// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package logtomanagementapi

import (
	"context"
	"fmt"
	"github.com/bllli/logto-management-api/internal/hooks"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
	"github.com/bllli/logto-management-api/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// Logto endpoint address.
	"https://[tenant_id].logto.app/",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

type sdkConfiguration struct {
	Client            HTTPClient
	Security          func(context.Context) (interface{}, error)
	ServerURL         string
	ServerIndex       int
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
	UserAgent         string
	RetryConfig       *retry.Config
	Hooks             *hooks.Hooks
	Timeout           *time.Duration
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	return ServerList[c.ServerIndex], nil
}

// LogtoManagementAPI - Logto API references: API references for Logto services.
//
// Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.
type LogtoManagementAPI struct {
	// Application represents your registered software program or service that has been authorized to access user information and perform actions on behalf of users within the system. Currently, Logto supports four types of applications:
	//
	// - Traditional web
	//
	// - Single-page app
	// - Native app
	// - Machine-to-machine app.
	//
	// Depending on the application type, it may have different authentication flows and access to the system. See [üîó Integrate Logto in your application](https://docs.logto.io/docs/recipes/integrate-logto/) to learn more about how to integrate Logto into your application.
	//
	// Role-based access control (RBAC) is supported for machine-to-machine applications. See [üîê Role-based access control (RBAC)](https://docs.logto.io/docs/recipes/rbac/) to get started with role-based access control.
	Applications *Applications
	// Endpoints for managing Logto global configurations for the tenant, such as admin console config and OIDC signing keys.
	//
	// See [üîë Signing keys](https://docs.logto.io/docs/recipes/signing-keys-rotation/) to learn more about signing keys and key rotation.
	Configs        *Configs
	JwtCustomizers *JwtCustomizers
	// Connectors are the bridge between Logto and other third-party vendors who provide short message service (SMS), email service, or user information on wildly accepted social media.
	//
	// To learn more about connectors, please see [ü™õ Configure connectors](https://docs.logto.io/docs/recipes/configure-connectors/).
	Connectors         *Connectors
	ConnectorFactories *ConnectorFactories
	// Resources (API resources) represent the APIs that you want to protect with Logto. Each resource has a unique indicator (URI) and a set of scopes (permissions). The resources will be used in the authorization process which conforms to [RFC 8707: Resource Indicators for OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8707.html).
	//
	// See [‚öîÔ∏è Protect your API](https://docs.logto.io/docs/recipes/protect-your-api/) to learn more about how to define API resources and protect your APIs with Logto.
	Resources         *Resources
	SignInExperience  *SignInExperience
	SignInExperiences *SignInExperiences
	// Endpoints for user management. Including creating, updating, deleting, and querying users with flexible filters. In addition to the endpoints, see [üßë‚ÄçüöÄ Manage users](https://docs.logto.io/docs/recipes/manage-users/) for more insights.
	Users     *Users
	AuditLogs *AuditLogs
	// Role management for API resource RBAC (role-based access control). See [üîê Role-based access control (RBAC)](https://docs.logto.io/docs/recipes/rbac/) to get started with role-based access control.
	Roles          *Roles
	DashboardUsers *DashboardUsers
	// Endpoints that power the dashboard page of Console to show the statistics of the current tenant.
	Dashboard     *Dashboard
	CustomPhrases *CustomPhrases
	// Hook enables you to effortlessly receive real-time updates regarding specific events, such as user registration, sign-in, or password reset. See [ü™ù Webhooks] to get started and learn more.
	Hooks             *Hooks
	VerificationCodes *VerificationCodes
	UserAssets        *UserAssets
	// Custom domain lets you present a consistent brand by having your own domain name on the sign-in and registration pages. See [üåç Custom domain](https://docs.logto.io/docs/recipes/custom-domain/) for more details.
	Domains                 *Domains
	OrganizationRoles       *OrganizationRoles
	OrganizationScopes      *OrganizationScopes
	OrganizationInvitations *OrganizationInvitations
	// Organization is a concept that brings together multiple identities (mostly users). Logto supports multiple organizations, and each organization can have multiple users.
	//
	// Every organization shares the same set (organization template) of roles and permissions. Each user can have different roles in different organizations. See [üè¢ Organizations (Multi-tenancy)](https://docs.logto.io/docs/recipes/organizations/) to get started with organizations and organization template.
	Organizations         *Organizations
	SsoConnectorProviders *SsoConnectorProviders
	SsoConnectors         *SsoConnectors
	// Endpoints for system constants and information.
	Systems            *Systems
	SubjectTokens      *SubjectTokens
	AccountCenter      *AccountCenter
	SamlApplications   *SamlApplications
	EmailTemplates     *EmailTemplates
	OneTimeTokens      *OneTimeTokens
	CaptchaProvider    *CaptchaProvider
	CaptchaProviders   *CaptchaProviders
	SentinelActivities *SentinelActivities
	WellKnown          *WellKnown
	// Endpoints for health check.
	Status      *Status
	AuthnHasura *AuthnHasura
	AuthnSaml   *AuthnSaml
	// Authentication endpoints for third-party integrations and identity providers.
	Authn                    *Authn
	SamlApplicationsAuthFlow *SamlApplicationsAuthFlow
	SwaggerJSON              *SwaggerJSON
	// The Experience endpoints allow end-users to interact with Logto for identity verification and profile completion.
	Experience                    *Experience
	InteractionEvents             *InteractionEvents
	Identifications               *Identifications
	EnterpriseSsoVerifications    *EnterpriseSsoVerifications
	TotpSecrets                   *TotpSecrets
	WebAuthnVerifications         *WebAuthnVerifications
	PasswordIdentityVerifications *PasswordIdentityVerifications
	Profiles                      *Profiles
	Mfa                           *Mfa
	MyAccount                     *MyAccount
	// Endpoints for creating and validating verification records, which can be used in Profile routes.
	Verifications *Verifications
	// Interaction endpoints are used to manage and process interactions for end-users, such as sign-in experience. Interaction endpoints are legacy endpoints that are used internally, will be replaced with Experience endpoints instead.
	Interaction  *Interaction
	Interactions *Interactions

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*LogtoManagementAPI)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *LogtoManagementAPI) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *LogtoManagementAPI) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *LogtoManagementAPI) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *LogtoManagementAPI) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security components.Security) SDKOption {
	return func(sdk *LogtoManagementAPI) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *LogtoManagementAPI) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *LogtoManagementAPI) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *LogtoManagementAPI) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *LogtoManagementAPI {
	sdk := &LogtoManagementAPI{
		sdkConfiguration: sdkConfiguration{
			Language:          "go",
			OpenAPIDocVersion: "Cloud",
			SDKVersion:        "0.1.1",
			GenVersion:        "2.598.22",
			UserAgent:         "speakeasy-sdk/go 0.1.1 2.598.22 Cloud github.com/bllli/logto-management-api",
			Hooks:             hooks.New(),
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.sdkConfiguration.Hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if serverURL != currentServerURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.Applications = newApplications(sdk.sdkConfiguration)

	sdk.Configs = newConfigs(sdk.sdkConfiguration)

	sdk.JwtCustomizers = newJwtCustomizers(sdk.sdkConfiguration)

	sdk.Connectors = newConnectors(sdk.sdkConfiguration)

	sdk.ConnectorFactories = newConnectorFactories(sdk.sdkConfiguration)

	sdk.Resources = newResources(sdk.sdkConfiguration)

	sdk.SignInExperience = newSignInExperience(sdk.sdkConfiguration)

	sdk.SignInExperiences = newSignInExperiences(sdk.sdkConfiguration)

	sdk.Users = newUsers(sdk.sdkConfiguration)

	sdk.AuditLogs = newAuditLogs(sdk.sdkConfiguration)

	sdk.Roles = newRoles(sdk.sdkConfiguration)

	sdk.DashboardUsers = newDashboardUsers(sdk.sdkConfiguration)

	sdk.Dashboard = newDashboard(sdk.sdkConfiguration)

	sdk.CustomPhrases = newCustomPhrases(sdk.sdkConfiguration)

	sdk.Hooks = newHooks(sdk.sdkConfiguration)

	sdk.VerificationCodes = newVerificationCodes(sdk.sdkConfiguration)

	sdk.UserAssets = newUserAssets(sdk.sdkConfiguration)

	sdk.Domains = newDomains(sdk.sdkConfiguration)

	sdk.OrganizationRoles = newOrganizationRoles(sdk.sdkConfiguration)

	sdk.OrganizationScopes = newOrganizationScopes(sdk.sdkConfiguration)

	sdk.OrganizationInvitations = newOrganizationInvitations(sdk.sdkConfiguration)

	sdk.Organizations = newOrganizations(sdk.sdkConfiguration)

	sdk.SsoConnectorProviders = newSsoConnectorProviders(sdk.sdkConfiguration)

	sdk.SsoConnectors = newSsoConnectors(sdk.sdkConfiguration)

	sdk.Systems = newSystems(sdk.sdkConfiguration)

	sdk.SubjectTokens = newSubjectTokens(sdk.sdkConfiguration)

	sdk.AccountCenter = newAccountCenter(sdk.sdkConfiguration)

	sdk.SamlApplications = newSamlApplications(sdk.sdkConfiguration)

	sdk.EmailTemplates = newEmailTemplates(sdk.sdkConfiguration)

	sdk.OneTimeTokens = newOneTimeTokens(sdk.sdkConfiguration)

	sdk.CaptchaProvider = newCaptchaProvider(sdk.sdkConfiguration)

	sdk.CaptchaProviders = newCaptchaProviders(sdk.sdkConfiguration)

	sdk.SentinelActivities = newSentinelActivities(sdk.sdkConfiguration)

	sdk.WellKnown = newWellKnown(sdk.sdkConfiguration)

	sdk.Status = newStatus(sdk.sdkConfiguration)

	sdk.AuthnHasura = newAuthnHasura(sdk.sdkConfiguration)

	sdk.AuthnSaml = newAuthnSaml(sdk.sdkConfiguration)

	sdk.Authn = newAuthn(sdk.sdkConfiguration)

	sdk.SamlApplicationsAuthFlow = newSamlApplicationsAuthFlow(sdk.sdkConfiguration)

	sdk.SwaggerJSON = newSwaggerJSON(sdk.sdkConfiguration)

	sdk.Experience = newExperience(sdk.sdkConfiguration)

	sdk.InteractionEvents = newInteractionEvents(sdk.sdkConfiguration)

	sdk.Identifications = newIdentifications(sdk.sdkConfiguration)

	sdk.EnterpriseSsoVerifications = newEnterpriseSsoVerifications(sdk.sdkConfiguration)

	sdk.TotpSecrets = newTotpSecrets(sdk.sdkConfiguration)

	sdk.WebAuthnVerifications = newWebAuthnVerifications(sdk.sdkConfiguration)

	sdk.PasswordIdentityVerifications = newPasswordIdentityVerifications(sdk.sdkConfiguration)

	sdk.Profiles = newProfiles(sdk.sdkConfiguration)

	sdk.Mfa = newMfa(sdk.sdkConfiguration)

	sdk.MyAccount = newMyAccount(sdk.sdkConfiguration)

	sdk.Verifications = newVerifications(sdk.sdkConfiguration)

	sdk.Interaction = newInteraction(sdk.sdkConfiguration)

	sdk.Interactions = newInteractions(sdk.sdkConfiguration)

	return sdk
}
