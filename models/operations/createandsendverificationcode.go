// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type CreateAndSendVerificationCodeType string

const (
	CreateAndSendVerificationCodeTypeEmail CreateAndSendVerificationCodeType = "email"
	CreateAndSendVerificationCodeTypePhone CreateAndSendVerificationCodeType = "phone"
)

func (e CreateAndSendVerificationCodeType) ToPointer() *CreateAndSendVerificationCodeType {
	return &e
}
func (e *CreateAndSendVerificationCodeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		fallthrough
	case "phone":
		*e = CreateAndSendVerificationCodeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAndSendVerificationCodeType: %v", v)
	}
}

// CreateAndSendVerificationCodeIdentifier - The identifier (email address or phone number) to send the verification code to.
type CreateAndSendVerificationCodeIdentifier struct {
	Type  CreateAndSendVerificationCodeType `json:"type"`
	Value string                            `json:"value"`
}

func (o *CreateAndSendVerificationCodeIdentifier) GetType() CreateAndSendVerificationCodeType {
	if o == nil {
		return CreateAndSendVerificationCodeType("")
	}
	return o.Type
}

func (o *CreateAndSendVerificationCodeIdentifier) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateAndSendVerificationCodeInteractionEvent - The interaction event for which the verification code will be used. Supported values are `SignIn`, `Register`, and `ForgotPassword`. This determines the template for the verification code.
type CreateAndSendVerificationCodeInteractionEvent string

const (
	CreateAndSendVerificationCodeInteractionEventSignIn         CreateAndSendVerificationCodeInteractionEvent = "SignIn"
	CreateAndSendVerificationCodeInteractionEventRegister       CreateAndSendVerificationCodeInteractionEvent = "Register"
	CreateAndSendVerificationCodeInteractionEventForgotPassword CreateAndSendVerificationCodeInteractionEvent = "ForgotPassword"
)

func (e CreateAndSendVerificationCodeInteractionEvent) ToPointer() *CreateAndSendVerificationCodeInteractionEvent {
	return &e
}
func (e *CreateAndSendVerificationCodeInteractionEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SignIn":
		fallthrough
	case "Register":
		fallthrough
	case "ForgotPassword":
		*e = CreateAndSendVerificationCodeInteractionEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAndSendVerificationCodeInteractionEvent: %v", v)
	}
}

type CreateAndSendVerificationCodeRequest struct {
	// The identifier (email address or phone number) to send the verification code to.
	Identifier CreateAndSendVerificationCodeIdentifier `json:"identifier"`
	// The interaction event for which the verification code will be used. Supported values are `SignIn`, `Register`, and `ForgotPassword`. This determines the template for the verification code.
	InteractionEvent CreateAndSendVerificationCodeInteractionEvent `json:"interactionEvent"`
}

func (o *CreateAndSendVerificationCodeRequest) GetIdentifier() CreateAndSendVerificationCodeIdentifier {
	if o == nil {
		return CreateAndSendVerificationCodeIdentifier{}
	}
	return o.Identifier
}

func (o *CreateAndSendVerificationCodeRequest) GetInteractionEvent() CreateAndSendVerificationCodeInteractionEvent {
	if o == nil {
		return CreateAndSendVerificationCodeInteractionEvent("")
	}
	return o.InteractionEvent
}

// CreateAndSendVerificationCodeResponseBody - The verification code has been successfully sent.
type CreateAndSendVerificationCodeResponseBody struct {
	// The unique ID of the verification record. Required to verify the code.
	VerificationID string `json:"verificationId"`
}

func (o *CreateAndSendVerificationCodeResponseBody) GetVerificationID() string {
	if o == nil {
		return ""
	}
	return o.VerificationID
}

type CreateAndSendVerificationCodeResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The verification code has been successfully sent.
	Object *CreateAndSendVerificationCodeResponseBody
}

func (o *CreateAndSendVerificationCodeResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateAndSendVerificationCodeResponse) GetObject() *CreateAndSendVerificationCodeResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
