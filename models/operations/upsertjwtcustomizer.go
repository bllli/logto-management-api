// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

// UpsertJwtCustomizerTokenTypePath - The token type to create a JWT customizer for.
type UpsertJwtCustomizerTokenTypePath string

const (
	UpsertJwtCustomizerTokenTypePathAccessToken       UpsertJwtCustomizerTokenTypePath = "access-token"
	UpsertJwtCustomizerTokenTypePathClientCredentials UpsertJwtCustomizerTokenTypePath = "client-credentials"
)

func (e UpsertJwtCustomizerTokenTypePath) ToPointer() *UpsertJwtCustomizerTokenTypePath {
	return &e
}
func (e *UpsertJwtCustomizerTokenTypePath) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access-token":
		fallthrough
	case "client-credentials":
		*e = UpsertJwtCustomizerTokenTypePath(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpsertJwtCustomizerTokenTypePath: %v", v)
	}
}

type UpsertJwtCustomizerRequestBody struct {
	// The script of the JWT customizer.
	Script any `json:"script,omitempty"`
	// The environment variables for the JWT customizer.
	EnvironmentVariables any `json:"environmentVariables,omitempty"`
	// The sample context for the JWT customizer script testing purpose.
	ContextSample any `json:"contextSample,omitempty"`
	// The sample raw token payload for the JWT customizer script testing purpose.
	TokenSample any `json:"tokenSample,omitempty"`
}

func (o *UpsertJwtCustomizerRequestBody) GetScript() any {
	if o == nil {
		return nil
	}
	return o.Script
}

func (o *UpsertJwtCustomizerRequestBody) GetEnvironmentVariables() any {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *UpsertJwtCustomizerRequestBody) GetContextSample() any {
	if o == nil {
		return nil
	}
	return o.ContextSample
}

func (o *UpsertJwtCustomizerRequestBody) GetTokenSample() any {
	if o == nil {
		return nil
	}
	return o.TokenSample
}

type UpsertJwtCustomizerRequest struct {
	// The token type to create a JWT customizer for.
	TokenTypePath UpsertJwtCustomizerTokenTypePath `pathParam:"style=simple,explode=false,name=tokenTypePath"`
	RequestBody   UpsertJwtCustomizerRequestBody   `request:"mediaType=application/json"`
}

func (o *UpsertJwtCustomizerRequest) GetTokenTypePath() UpsertJwtCustomizerTokenTypePath {
	if o == nil {
		return UpsertJwtCustomizerTokenTypePath("")
	}
	return o.TokenTypePath
}

func (o *UpsertJwtCustomizerRequest) GetRequestBody() UpsertJwtCustomizerRequestBody {
	if o == nil {
		return UpsertJwtCustomizerRequestBody{}
	}
	return o.RequestBody
}

type UpsertJwtCustomizerAud4Type string

const (
	UpsertJwtCustomizerAud4TypeStr        UpsertJwtCustomizerAud4Type = "str"
	UpsertJwtCustomizerAud4TypeArrayOfStr UpsertJwtCustomizerAud4Type = "arrayOfStr"
)

type UpsertJwtCustomizerAud4 struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type UpsertJwtCustomizerAud4Type
}

func CreateUpsertJwtCustomizerAud4Str(str string) UpsertJwtCustomizerAud4 {
	typ := UpsertJwtCustomizerAud4TypeStr

	return UpsertJwtCustomizerAud4{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpsertJwtCustomizerAud4ArrayOfStr(arrayOfStr []string) UpsertJwtCustomizerAud4 {
	typ := UpsertJwtCustomizerAud4TypeArrayOfStr

	return UpsertJwtCustomizerAud4{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpsertJwtCustomizerAud4) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpsertJwtCustomizerAud4TypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpsertJwtCustomizerAud4TypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpsertJwtCustomizerAud4", string(data))
}

func (u UpsertJwtCustomizerAud4) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpsertJwtCustomizerAud4: all fields are null")
}

type UpsertJwtCustomizerTokenSample4 struct {
	Jti      *string                  `json:"jti,omitempty"`
	Aud      *UpsertJwtCustomizerAud4 `json:"aud,omitempty"`
	Scope    *string                  `json:"scope,omitempty"`
	ClientID *string                  `json:"clientId,omitempty"`
	Kind     *string                  `json:"kind,omitempty"`
}

func (o *UpsertJwtCustomizerTokenSample4) GetJti() *string {
	if o == nil {
		return nil
	}
	return o.Jti
}

func (o *UpsertJwtCustomizerTokenSample4) GetAud() *UpsertJwtCustomizerAud4 {
	if o == nil {
		return nil
	}
	return o.Aud
}

func (o *UpsertJwtCustomizerTokenSample4) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *UpsertJwtCustomizerTokenSample4) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *UpsertJwtCustomizerTokenSample4) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

type UpsertJwtCustomizerResponseBody4 struct {
	Script               string            `json:"script"`
	EnvironmentVariables map[string]string `json:"environmentVariables,omitempty"`
	// arbitrary
	ContextSample map[string]any                   `json:"contextSample,omitempty"`
	TokenSample   *UpsertJwtCustomizerTokenSample4 `json:"tokenSample,omitempty"`
}

func (o *UpsertJwtCustomizerResponseBody4) GetScript() string {
	if o == nil {
		return ""
	}
	return o.Script
}

func (o *UpsertJwtCustomizerResponseBody4) GetEnvironmentVariables() map[string]string {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *UpsertJwtCustomizerResponseBody4) GetContextSample() map[string]any {
	if o == nil {
		return nil
	}
	return o.ContextSample
}

func (o *UpsertJwtCustomizerResponseBody4) GetTokenSample() *UpsertJwtCustomizerTokenSample4 {
	if o == nil {
		return nil
	}
	return o.TokenSample
}

type UpsertJwtCustomizerIdentities2 struct {
	UserID string `json:"userId"`
	// arbitrary
	Details map[string]any `json:"details,omitempty"`
}

func (o *UpsertJwtCustomizerIdentities2) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpsertJwtCustomizerIdentities2) GetDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.Details
}

type UpsertJwtCustomizerAddress2 struct {
	Formatted     *string `json:"formatted,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
	Locality      *string `json:"locality,omitempty"`
	Region        *string `json:"region,omitempty"`
	PostalCode    *string `json:"postalCode,omitempty"`
	Country       *string `json:"country,omitempty"`
}

func (o *UpsertJwtCustomizerAddress2) GetFormatted() *string {
	if o == nil {
		return nil
	}
	return o.Formatted
}

func (o *UpsertJwtCustomizerAddress2) GetStreetAddress() *string {
	if o == nil {
		return nil
	}
	return o.StreetAddress
}

func (o *UpsertJwtCustomizerAddress2) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *UpsertJwtCustomizerAddress2) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpsertJwtCustomizerAddress2) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *UpsertJwtCustomizerAddress2) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

type UpsertJwtCustomizerProfile2 struct {
	FamilyName        *string                      `json:"familyName,omitempty"`
	GivenName         *string                      `json:"givenName,omitempty"`
	MiddleName        *string                      `json:"middleName,omitempty"`
	Nickname          *string                      `json:"nickname,omitempty"`
	PreferredUsername *string                      `json:"preferredUsername,omitempty"`
	Profile           *string                      `json:"profile,omitempty"`
	Website           *string                      `json:"website,omitempty"`
	Gender            *string                      `json:"gender,omitempty"`
	Birthdate         *string                      `json:"birthdate,omitempty"`
	Zoneinfo          *string                      `json:"zoneinfo,omitempty"`
	Locale            *string                      `json:"locale,omitempty"`
	Address           *UpsertJwtCustomizerAddress2 `json:"address,omitempty"`
}

func (o *UpsertJwtCustomizerProfile2) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpsertJwtCustomizerProfile2) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpsertJwtCustomizerProfile2) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *UpsertJwtCustomizerProfile2) GetNickname() *string {
	if o == nil {
		return nil
	}
	return o.Nickname
}

func (o *UpsertJwtCustomizerProfile2) GetPreferredUsername() *string {
	if o == nil {
		return nil
	}
	return o.PreferredUsername
}

func (o *UpsertJwtCustomizerProfile2) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *UpsertJwtCustomizerProfile2) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *UpsertJwtCustomizerProfile2) GetGender() *string {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *UpsertJwtCustomizerProfile2) GetBirthdate() *string {
	if o == nil {
		return nil
	}
	return o.Birthdate
}

func (o *UpsertJwtCustomizerProfile2) GetZoneinfo() *string {
	if o == nil {
		return nil
	}
	return o.Zoneinfo
}

func (o *UpsertJwtCustomizerProfile2) GetLocale() *string {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *UpsertJwtCustomizerProfile2) GetAddress() *UpsertJwtCustomizerAddress2 {
	if o == nil {
		return nil
	}
	return o.Address
}

type UpsertJwtCustomizerSsoIdentity2 struct {
	Issuer     string `json:"issuer"`
	IdentityID string `json:"identityId"`
	// arbitrary
	Detail map[string]any `json:"detail"`
}

func (o *UpsertJwtCustomizerSsoIdentity2) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *UpsertJwtCustomizerSsoIdentity2) GetIdentityID() string {
	if o == nil {
		return ""
	}
	return o.IdentityID
}

func (o *UpsertJwtCustomizerSsoIdentity2) GetDetail() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Detail
}

type UpsertJwtCustomizerMfaVerificationFactor2 string

const (
	UpsertJwtCustomizerMfaVerificationFactor2Totp       UpsertJwtCustomizerMfaVerificationFactor2 = "Totp"
	UpsertJwtCustomizerMfaVerificationFactor2WebAuthn   UpsertJwtCustomizerMfaVerificationFactor2 = "WebAuthn"
	UpsertJwtCustomizerMfaVerificationFactor2BackupCode UpsertJwtCustomizerMfaVerificationFactor2 = "BackupCode"
)

func (e UpsertJwtCustomizerMfaVerificationFactor2) ToPointer() *UpsertJwtCustomizerMfaVerificationFactor2 {
	return &e
}
func (e *UpsertJwtCustomizerMfaVerificationFactor2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Totp":
		fallthrough
	case "WebAuthn":
		fallthrough
	case "BackupCode":
		*e = UpsertJwtCustomizerMfaVerificationFactor2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpsertJwtCustomizerMfaVerificationFactor2: %v", v)
	}
}

type UpsertJwtCustomizerResource2 struct {
	TenantID       string  `json:"tenantId"`
	ID             string  `json:"id"`
	Name           string  `json:"name"`
	Indicator      string  `json:"indicator"`
	IsDefault      bool    `json:"isDefault"`
	AccessTokenTTL float64 `json:"accessTokenTtl"`
}

func (o *UpsertJwtCustomizerResource2) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpsertJwtCustomizerResource2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpsertJwtCustomizerResource2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpsertJwtCustomizerResource2) GetIndicator() string {
	if o == nil {
		return ""
	}
	return o.Indicator
}

func (o *UpsertJwtCustomizerResource2) GetIsDefault() bool {
	if o == nil {
		return false
	}
	return o.IsDefault
}

func (o *UpsertJwtCustomizerResource2) GetAccessTokenTTL() float64 {
	if o == nil {
		return 0.0
	}
	return o.AccessTokenTTL
}

type UpsertJwtCustomizerScope2 struct {
	ID          string                       `json:"id"`
	Name        string                       `json:"name"`
	Description *string                      `json:"description"`
	ResourceID  string                       `json:"resourceId"`
	Resource    UpsertJwtCustomizerResource2 `json:"resource"`
}

func (o *UpsertJwtCustomizerScope2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpsertJwtCustomizerScope2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpsertJwtCustomizerScope2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpsertJwtCustomizerScope2) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

func (o *UpsertJwtCustomizerScope2) GetResource() UpsertJwtCustomizerResource2 {
	if o == nil {
		return UpsertJwtCustomizerResource2{}
	}
	return o.Resource
}

type UpsertJwtCustomizerRole2 struct {
	ID          string                      `json:"id"`
	Name        string                      `json:"name"`
	Description string                      `json:"description"`
	Scopes      []UpsertJwtCustomizerScope2 `json:"scopes"`
}

func (o *UpsertJwtCustomizerRole2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpsertJwtCustomizerRole2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpsertJwtCustomizerRole2) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpsertJwtCustomizerRole2) GetScopes() []UpsertJwtCustomizerScope2 {
	if o == nil {
		return []UpsertJwtCustomizerScope2{}
	}
	return o.Scopes
}

type UpsertJwtCustomizerOrganization2 struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (o *UpsertJwtCustomizerOrganization2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpsertJwtCustomizerOrganization2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpsertJwtCustomizerOrganization2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type UpsertJwtCustomizerOrganizationRole2 struct {
	OrganizationID string `json:"organizationId"`
	RoleID         string `json:"roleId"`
	RoleName       string `json:"roleName"`
}

func (o *UpsertJwtCustomizerOrganizationRole2) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *UpsertJwtCustomizerOrganizationRole2) GetRoleID() string {
	if o == nil {
		return ""
	}
	return o.RoleID
}

func (o *UpsertJwtCustomizerOrganizationRole2) GetRoleName() string {
	if o == nil {
		return ""
	}
	return o.RoleName
}

type UpsertJwtCustomizerUser2 struct {
	ID           *string `json:"id,omitempty"`
	Username     *string `json:"username,omitempty"`
	PrimaryEmail *string `json:"primaryEmail,omitempty"`
	PrimaryPhone *string `json:"primaryPhone,omitempty"`
	Name         *string `json:"name,omitempty"`
	Avatar       *string `json:"avatar,omitempty"`
	// arbitrary
	CustomData             map[string]any                              `json:"customData,omitempty"`
	Identities             map[string]UpsertJwtCustomizerIdentities2   `json:"identities,omitempty"`
	LastSignInAt           *float64                                    `json:"lastSignInAt,omitempty"`
	CreatedAt              *float64                                    `json:"createdAt,omitempty"`
	UpdatedAt              *float64                                    `json:"updatedAt,omitempty"`
	Profile                *UpsertJwtCustomizerProfile2                `json:"profile,omitempty"`
	ApplicationID          *string                                     `json:"applicationId,omitempty"`
	IsSuspended            *bool                                       `json:"isSuspended,omitempty"`
	HasPassword            *bool                                       `json:"hasPassword,omitempty"`
	SsoIdentities          []UpsertJwtCustomizerSsoIdentity2           `json:"ssoIdentities,omitempty"`
	MfaVerificationFactors []UpsertJwtCustomizerMfaVerificationFactor2 `json:"mfaVerificationFactors,omitempty"`
	Roles                  []UpsertJwtCustomizerRole2                  `json:"roles,omitempty"`
	Organizations          []UpsertJwtCustomizerOrganization2          `json:"organizations,omitempty"`
	OrganizationRoles      []UpsertJwtCustomizerOrganizationRole2      `json:"organizationRoles,omitempty"`
}

func (o *UpsertJwtCustomizerUser2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpsertJwtCustomizerUser2) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *UpsertJwtCustomizerUser2) GetPrimaryEmail() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryEmail
}

func (o *UpsertJwtCustomizerUser2) GetPrimaryPhone() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryPhone
}

func (o *UpsertJwtCustomizerUser2) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpsertJwtCustomizerUser2) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *UpsertJwtCustomizerUser2) GetCustomData() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *UpsertJwtCustomizerUser2) GetIdentities() map[string]UpsertJwtCustomizerIdentities2 {
	if o == nil {
		return nil
	}
	return o.Identities
}

func (o *UpsertJwtCustomizerUser2) GetLastSignInAt() *float64 {
	if o == nil {
		return nil
	}
	return o.LastSignInAt
}

func (o *UpsertJwtCustomizerUser2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpsertJwtCustomizerUser2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpsertJwtCustomizerUser2) GetProfile() *UpsertJwtCustomizerProfile2 {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *UpsertJwtCustomizerUser2) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *UpsertJwtCustomizerUser2) GetIsSuspended() *bool {
	if o == nil {
		return nil
	}
	return o.IsSuspended
}

func (o *UpsertJwtCustomizerUser2) GetHasPassword() *bool {
	if o == nil {
		return nil
	}
	return o.HasPassword
}

func (o *UpsertJwtCustomizerUser2) GetSsoIdentities() []UpsertJwtCustomizerSsoIdentity2 {
	if o == nil {
		return nil
	}
	return o.SsoIdentities
}

func (o *UpsertJwtCustomizerUser2) GetMfaVerificationFactors() []UpsertJwtCustomizerMfaVerificationFactor2 {
	if o == nil {
		return nil
	}
	return o.MfaVerificationFactors
}

func (o *UpsertJwtCustomizerUser2) GetRoles() []UpsertJwtCustomizerRole2 {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *UpsertJwtCustomizerUser2) GetOrganizations() []UpsertJwtCustomizerOrganization2 {
	if o == nil {
		return nil
	}
	return o.Organizations
}

func (o *UpsertJwtCustomizerUser2) GetOrganizationRoles() []UpsertJwtCustomizerOrganizationRole2 {
	if o == nil {
		return nil
	}
	return o.OrganizationRoles
}

type UpsertJwtCustomizerGrant2 struct {
	Type *string `json:"type,omitempty"`
	// arbitrary
	SubjectTokenContext map[string]any `json:"subjectTokenContext,omitempty"`
}

func (o *UpsertJwtCustomizerGrant2) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpsertJwtCustomizerGrant2) GetSubjectTokenContext() map[string]any {
	if o == nil {
		return nil
	}
	return o.SubjectTokenContext
}

type UpsertJwtCustomizerContextSample2 struct {
	User  UpsertJwtCustomizerUser2   `json:"user"`
	Grant *UpsertJwtCustomizerGrant2 `json:"grant,omitempty"`
}

func (o *UpsertJwtCustomizerContextSample2) GetUser() UpsertJwtCustomizerUser2 {
	if o == nil {
		return UpsertJwtCustomizerUser2{}
	}
	return o.User
}

func (o *UpsertJwtCustomizerContextSample2) GetGrant() *UpsertJwtCustomizerGrant2 {
	if o == nil {
		return nil
	}
	return o.Grant
}

type UpsertJwtCustomizerAud3Type string

const (
	UpsertJwtCustomizerAud3TypeStr        UpsertJwtCustomizerAud3Type = "str"
	UpsertJwtCustomizerAud3TypeArrayOfStr UpsertJwtCustomizerAud3Type = "arrayOfStr"
)

type UpsertJwtCustomizerAud3 struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type UpsertJwtCustomizerAud3Type
}

func CreateUpsertJwtCustomizerAud3Str(str string) UpsertJwtCustomizerAud3 {
	typ := UpsertJwtCustomizerAud3TypeStr

	return UpsertJwtCustomizerAud3{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpsertJwtCustomizerAud3ArrayOfStr(arrayOfStr []string) UpsertJwtCustomizerAud3 {
	typ := UpsertJwtCustomizerAud3TypeArrayOfStr

	return UpsertJwtCustomizerAud3{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpsertJwtCustomizerAud3) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpsertJwtCustomizerAud3TypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpsertJwtCustomizerAud3TypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpsertJwtCustomizerAud3", string(data))
}

func (u UpsertJwtCustomizerAud3) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpsertJwtCustomizerAud3: all fields are null")
}

type UpsertJwtCustomizerTokenSample3 struct {
	Jti                *string                  `json:"jti,omitempty"`
	Aud                *UpsertJwtCustomizerAud3 `json:"aud,omitempty"`
	Scope              *string                  `json:"scope,omitempty"`
	ClientID           *string                  `json:"clientId,omitempty"`
	AccountID          *string                  `json:"accountId,omitempty"`
	ExpiresWithSession *bool                    `json:"expiresWithSession,omitempty"`
	GrantID            *string                  `json:"grantId,omitempty"`
	Gty                *string                  `json:"gty,omitempty"`
	SessionUID         *string                  `json:"sessionUid,omitempty"`
	Sid                *string                  `json:"sid,omitempty"`
	Kind               *string                  `json:"kind,omitempty"`
}

func (o *UpsertJwtCustomizerTokenSample3) GetJti() *string {
	if o == nil {
		return nil
	}
	return o.Jti
}

func (o *UpsertJwtCustomizerTokenSample3) GetAud() *UpsertJwtCustomizerAud3 {
	if o == nil {
		return nil
	}
	return o.Aud
}

func (o *UpsertJwtCustomizerTokenSample3) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *UpsertJwtCustomizerTokenSample3) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *UpsertJwtCustomizerTokenSample3) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *UpsertJwtCustomizerTokenSample3) GetExpiresWithSession() *bool {
	if o == nil {
		return nil
	}
	return o.ExpiresWithSession
}

func (o *UpsertJwtCustomizerTokenSample3) GetGrantID() *string {
	if o == nil {
		return nil
	}
	return o.GrantID
}

func (o *UpsertJwtCustomizerTokenSample3) GetGty() *string {
	if o == nil {
		return nil
	}
	return o.Gty
}

func (o *UpsertJwtCustomizerTokenSample3) GetSessionUID() *string {
	if o == nil {
		return nil
	}
	return o.SessionUID
}

func (o *UpsertJwtCustomizerTokenSample3) GetSid() *string {
	if o == nil {
		return nil
	}
	return o.Sid
}

func (o *UpsertJwtCustomizerTokenSample3) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

type UpsertJwtCustomizerResponseBody3 struct {
	Script               string                             `json:"script"`
	EnvironmentVariables map[string]string                  `json:"environmentVariables,omitempty"`
	ContextSample        *UpsertJwtCustomizerContextSample2 `json:"contextSample,omitempty"`
	TokenSample          *UpsertJwtCustomizerTokenSample3   `json:"tokenSample,omitempty"`
}

func (o *UpsertJwtCustomizerResponseBody3) GetScript() string {
	if o == nil {
		return ""
	}
	return o.Script
}

func (o *UpsertJwtCustomizerResponseBody3) GetEnvironmentVariables() map[string]string {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *UpsertJwtCustomizerResponseBody3) GetContextSample() *UpsertJwtCustomizerContextSample2 {
	if o == nil {
		return nil
	}
	return o.ContextSample
}

func (o *UpsertJwtCustomizerResponseBody3) GetTokenSample() *UpsertJwtCustomizerTokenSample3 {
	if o == nil {
		return nil
	}
	return o.TokenSample
}

type UpsertJwtCustomizerResponseBodyUnion2Type string

const (
	UpsertJwtCustomizerResponseBodyUnion2TypeUpsertJwtCustomizerResponseBody3 UpsertJwtCustomizerResponseBodyUnion2Type = "UpsertJwtCustomizer_ResponseBody_3"
	UpsertJwtCustomizerResponseBodyUnion2TypeUpsertJwtCustomizerResponseBody4 UpsertJwtCustomizerResponseBodyUnion2Type = "UpsertJwtCustomizer_ResponseBody_4"
)

// UpsertJwtCustomizerResponseBodyUnion2 - The created JWT customizer.
type UpsertJwtCustomizerResponseBodyUnion2 struct {
	UpsertJwtCustomizerResponseBody3 *UpsertJwtCustomizerResponseBody3 `queryParam:"inline"`
	UpsertJwtCustomizerResponseBody4 *UpsertJwtCustomizerResponseBody4 `queryParam:"inline"`

	Type UpsertJwtCustomizerResponseBodyUnion2Type
}

func CreateUpsertJwtCustomizerResponseBodyUnion2UpsertJwtCustomizerResponseBody3(upsertJwtCustomizerResponseBody3 UpsertJwtCustomizerResponseBody3) UpsertJwtCustomizerResponseBodyUnion2 {
	typ := UpsertJwtCustomizerResponseBodyUnion2TypeUpsertJwtCustomizerResponseBody3

	return UpsertJwtCustomizerResponseBodyUnion2{
		UpsertJwtCustomizerResponseBody3: &upsertJwtCustomizerResponseBody3,
		Type:                             typ,
	}
}

func CreateUpsertJwtCustomizerResponseBodyUnion2UpsertJwtCustomizerResponseBody4(upsertJwtCustomizerResponseBody4 UpsertJwtCustomizerResponseBody4) UpsertJwtCustomizerResponseBodyUnion2 {
	typ := UpsertJwtCustomizerResponseBodyUnion2TypeUpsertJwtCustomizerResponseBody4

	return UpsertJwtCustomizerResponseBodyUnion2{
		UpsertJwtCustomizerResponseBody4: &upsertJwtCustomizerResponseBody4,
		Type:                             typ,
	}
}

func (u *UpsertJwtCustomizerResponseBodyUnion2) UnmarshalJSON(data []byte) error {

	var upsertJwtCustomizerResponseBody3 UpsertJwtCustomizerResponseBody3 = UpsertJwtCustomizerResponseBody3{}
	if err := utils.UnmarshalJSON(data, &upsertJwtCustomizerResponseBody3, "", true, true); err == nil {
		u.UpsertJwtCustomizerResponseBody3 = &upsertJwtCustomizerResponseBody3
		u.Type = UpsertJwtCustomizerResponseBodyUnion2TypeUpsertJwtCustomizerResponseBody3
		return nil
	}

	var upsertJwtCustomizerResponseBody4 UpsertJwtCustomizerResponseBody4 = UpsertJwtCustomizerResponseBody4{}
	if err := utils.UnmarshalJSON(data, &upsertJwtCustomizerResponseBody4, "", true, true); err == nil {
		u.UpsertJwtCustomizerResponseBody4 = &upsertJwtCustomizerResponseBody4
		u.Type = UpsertJwtCustomizerResponseBodyUnion2TypeUpsertJwtCustomizerResponseBody4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpsertJwtCustomizerResponseBodyUnion2", string(data))
}

func (u UpsertJwtCustomizerResponseBodyUnion2) MarshalJSON() ([]byte, error) {
	if u.UpsertJwtCustomizerResponseBody3 != nil {
		return utils.MarshalJSON(u.UpsertJwtCustomizerResponseBody3, "", true)
	}

	if u.UpsertJwtCustomizerResponseBody4 != nil {
		return utils.MarshalJSON(u.UpsertJwtCustomizerResponseBody4, "", true)
	}

	return nil, errors.New("could not marshal union type UpsertJwtCustomizerResponseBodyUnion2: all fields are null")
}

type UpsertJwtCustomizerAud2Type string

const (
	UpsertJwtCustomizerAud2TypeStr        UpsertJwtCustomizerAud2Type = "str"
	UpsertJwtCustomizerAud2TypeArrayOfStr UpsertJwtCustomizerAud2Type = "arrayOfStr"
)

type UpsertJwtCustomizerAud2 struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type UpsertJwtCustomizerAud2Type
}

func CreateUpsertJwtCustomizerAud2Str(str string) UpsertJwtCustomizerAud2 {
	typ := UpsertJwtCustomizerAud2TypeStr

	return UpsertJwtCustomizerAud2{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpsertJwtCustomizerAud2ArrayOfStr(arrayOfStr []string) UpsertJwtCustomizerAud2 {
	typ := UpsertJwtCustomizerAud2TypeArrayOfStr

	return UpsertJwtCustomizerAud2{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpsertJwtCustomizerAud2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpsertJwtCustomizerAud2TypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpsertJwtCustomizerAud2TypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpsertJwtCustomizerAud2", string(data))
}

func (u UpsertJwtCustomizerAud2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpsertJwtCustomizerAud2: all fields are null")
}

type UpsertJwtCustomizerTokenSample2 struct {
	Jti      *string                  `json:"jti,omitempty"`
	Aud      *UpsertJwtCustomizerAud2 `json:"aud,omitempty"`
	Scope    *string                  `json:"scope,omitempty"`
	ClientID *string                  `json:"clientId,omitempty"`
	Kind     *string                  `json:"kind,omitempty"`
}

func (o *UpsertJwtCustomizerTokenSample2) GetJti() *string {
	if o == nil {
		return nil
	}
	return o.Jti
}

func (o *UpsertJwtCustomizerTokenSample2) GetAud() *UpsertJwtCustomizerAud2 {
	if o == nil {
		return nil
	}
	return o.Aud
}

func (o *UpsertJwtCustomizerTokenSample2) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *UpsertJwtCustomizerTokenSample2) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *UpsertJwtCustomizerTokenSample2) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

type UpsertJwtCustomizerResponseBody2 struct {
	Script               string            `json:"script"`
	EnvironmentVariables map[string]string `json:"environmentVariables,omitempty"`
	// arbitrary
	ContextSample map[string]any                   `json:"contextSample,omitempty"`
	TokenSample   *UpsertJwtCustomizerTokenSample2 `json:"tokenSample,omitempty"`
}

func (o *UpsertJwtCustomizerResponseBody2) GetScript() string {
	if o == nil {
		return ""
	}
	return o.Script
}

func (o *UpsertJwtCustomizerResponseBody2) GetEnvironmentVariables() map[string]string {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *UpsertJwtCustomizerResponseBody2) GetContextSample() map[string]any {
	if o == nil {
		return nil
	}
	return o.ContextSample
}

func (o *UpsertJwtCustomizerResponseBody2) GetTokenSample() *UpsertJwtCustomizerTokenSample2 {
	if o == nil {
		return nil
	}
	return o.TokenSample
}

type UpsertJwtCustomizerIdentities1 struct {
	UserID string `json:"userId"`
	// arbitrary
	Details map[string]any `json:"details,omitempty"`
}

func (o *UpsertJwtCustomizerIdentities1) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpsertJwtCustomizerIdentities1) GetDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.Details
}

type UpsertJwtCustomizerAddress1 struct {
	Formatted     *string `json:"formatted,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
	Locality      *string `json:"locality,omitempty"`
	Region        *string `json:"region,omitempty"`
	PostalCode    *string `json:"postalCode,omitempty"`
	Country       *string `json:"country,omitempty"`
}

func (o *UpsertJwtCustomizerAddress1) GetFormatted() *string {
	if o == nil {
		return nil
	}
	return o.Formatted
}

func (o *UpsertJwtCustomizerAddress1) GetStreetAddress() *string {
	if o == nil {
		return nil
	}
	return o.StreetAddress
}

func (o *UpsertJwtCustomizerAddress1) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *UpsertJwtCustomizerAddress1) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpsertJwtCustomizerAddress1) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *UpsertJwtCustomizerAddress1) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

type UpsertJwtCustomizerProfile1 struct {
	FamilyName        *string                      `json:"familyName,omitempty"`
	GivenName         *string                      `json:"givenName,omitempty"`
	MiddleName        *string                      `json:"middleName,omitempty"`
	Nickname          *string                      `json:"nickname,omitempty"`
	PreferredUsername *string                      `json:"preferredUsername,omitempty"`
	Profile           *string                      `json:"profile,omitempty"`
	Website           *string                      `json:"website,omitempty"`
	Gender            *string                      `json:"gender,omitempty"`
	Birthdate         *string                      `json:"birthdate,omitempty"`
	Zoneinfo          *string                      `json:"zoneinfo,omitempty"`
	Locale            *string                      `json:"locale,omitempty"`
	Address           *UpsertJwtCustomizerAddress1 `json:"address,omitempty"`
}

func (o *UpsertJwtCustomizerProfile1) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpsertJwtCustomizerProfile1) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpsertJwtCustomizerProfile1) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *UpsertJwtCustomizerProfile1) GetNickname() *string {
	if o == nil {
		return nil
	}
	return o.Nickname
}

func (o *UpsertJwtCustomizerProfile1) GetPreferredUsername() *string {
	if o == nil {
		return nil
	}
	return o.PreferredUsername
}

func (o *UpsertJwtCustomizerProfile1) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *UpsertJwtCustomizerProfile1) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *UpsertJwtCustomizerProfile1) GetGender() *string {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *UpsertJwtCustomizerProfile1) GetBirthdate() *string {
	if o == nil {
		return nil
	}
	return o.Birthdate
}

func (o *UpsertJwtCustomizerProfile1) GetZoneinfo() *string {
	if o == nil {
		return nil
	}
	return o.Zoneinfo
}

func (o *UpsertJwtCustomizerProfile1) GetLocale() *string {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *UpsertJwtCustomizerProfile1) GetAddress() *UpsertJwtCustomizerAddress1 {
	if o == nil {
		return nil
	}
	return o.Address
}

type UpsertJwtCustomizerSsoIdentity1 struct {
	Issuer     string `json:"issuer"`
	IdentityID string `json:"identityId"`
	// arbitrary
	Detail map[string]any `json:"detail"`
}

func (o *UpsertJwtCustomizerSsoIdentity1) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *UpsertJwtCustomizerSsoIdentity1) GetIdentityID() string {
	if o == nil {
		return ""
	}
	return o.IdentityID
}

func (o *UpsertJwtCustomizerSsoIdentity1) GetDetail() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Detail
}

type UpsertJwtCustomizerMfaVerificationFactor1 string

const (
	UpsertJwtCustomizerMfaVerificationFactor1Totp       UpsertJwtCustomizerMfaVerificationFactor1 = "Totp"
	UpsertJwtCustomizerMfaVerificationFactor1WebAuthn   UpsertJwtCustomizerMfaVerificationFactor1 = "WebAuthn"
	UpsertJwtCustomizerMfaVerificationFactor1BackupCode UpsertJwtCustomizerMfaVerificationFactor1 = "BackupCode"
)

func (e UpsertJwtCustomizerMfaVerificationFactor1) ToPointer() *UpsertJwtCustomizerMfaVerificationFactor1 {
	return &e
}
func (e *UpsertJwtCustomizerMfaVerificationFactor1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Totp":
		fallthrough
	case "WebAuthn":
		fallthrough
	case "BackupCode":
		*e = UpsertJwtCustomizerMfaVerificationFactor1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpsertJwtCustomizerMfaVerificationFactor1: %v", v)
	}
}

type UpsertJwtCustomizerResource1 struct {
	TenantID       string  `json:"tenantId"`
	ID             string  `json:"id"`
	Name           string  `json:"name"`
	Indicator      string  `json:"indicator"`
	IsDefault      bool    `json:"isDefault"`
	AccessTokenTTL float64 `json:"accessTokenTtl"`
}

func (o *UpsertJwtCustomizerResource1) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpsertJwtCustomizerResource1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpsertJwtCustomizerResource1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpsertJwtCustomizerResource1) GetIndicator() string {
	if o == nil {
		return ""
	}
	return o.Indicator
}

func (o *UpsertJwtCustomizerResource1) GetIsDefault() bool {
	if o == nil {
		return false
	}
	return o.IsDefault
}

func (o *UpsertJwtCustomizerResource1) GetAccessTokenTTL() float64 {
	if o == nil {
		return 0.0
	}
	return o.AccessTokenTTL
}

type UpsertJwtCustomizerScope1 struct {
	ID          string                       `json:"id"`
	Name        string                       `json:"name"`
	Description *string                      `json:"description"`
	ResourceID  string                       `json:"resourceId"`
	Resource    UpsertJwtCustomizerResource1 `json:"resource"`
}

func (o *UpsertJwtCustomizerScope1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpsertJwtCustomizerScope1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpsertJwtCustomizerScope1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpsertJwtCustomizerScope1) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

func (o *UpsertJwtCustomizerScope1) GetResource() UpsertJwtCustomizerResource1 {
	if o == nil {
		return UpsertJwtCustomizerResource1{}
	}
	return o.Resource
}

type UpsertJwtCustomizerRole1 struct {
	ID          string                      `json:"id"`
	Name        string                      `json:"name"`
	Description string                      `json:"description"`
	Scopes      []UpsertJwtCustomizerScope1 `json:"scopes"`
}

func (o *UpsertJwtCustomizerRole1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpsertJwtCustomizerRole1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpsertJwtCustomizerRole1) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpsertJwtCustomizerRole1) GetScopes() []UpsertJwtCustomizerScope1 {
	if o == nil {
		return []UpsertJwtCustomizerScope1{}
	}
	return o.Scopes
}

type UpsertJwtCustomizerOrganization1 struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (o *UpsertJwtCustomizerOrganization1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpsertJwtCustomizerOrganization1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpsertJwtCustomizerOrganization1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type UpsertJwtCustomizerOrganizationRole1 struct {
	OrganizationID string `json:"organizationId"`
	RoleID         string `json:"roleId"`
	RoleName       string `json:"roleName"`
}

func (o *UpsertJwtCustomizerOrganizationRole1) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *UpsertJwtCustomizerOrganizationRole1) GetRoleID() string {
	if o == nil {
		return ""
	}
	return o.RoleID
}

func (o *UpsertJwtCustomizerOrganizationRole1) GetRoleName() string {
	if o == nil {
		return ""
	}
	return o.RoleName
}

type UpsertJwtCustomizerUser1 struct {
	ID           *string `json:"id,omitempty"`
	Username     *string `json:"username,omitempty"`
	PrimaryEmail *string `json:"primaryEmail,omitempty"`
	PrimaryPhone *string `json:"primaryPhone,omitempty"`
	Name         *string `json:"name,omitempty"`
	Avatar       *string `json:"avatar,omitempty"`
	// arbitrary
	CustomData             map[string]any                              `json:"customData,omitempty"`
	Identities             map[string]UpsertJwtCustomizerIdentities1   `json:"identities,omitempty"`
	LastSignInAt           *float64                                    `json:"lastSignInAt,omitempty"`
	CreatedAt              *float64                                    `json:"createdAt,omitempty"`
	UpdatedAt              *float64                                    `json:"updatedAt,omitempty"`
	Profile                *UpsertJwtCustomizerProfile1                `json:"profile,omitempty"`
	ApplicationID          *string                                     `json:"applicationId,omitempty"`
	IsSuspended            *bool                                       `json:"isSuspended,omitempty"`
	HasPassword            *bool                                       `json:"hasPassword,omitempty"`
	SsoIdentities          []UpsertJwtCustomizerSsoIdentity1           `json:"ssoIdentities,omitempty"`
	MfaVerificationFactors []UpsertJwtCustomizerMfaVerificationFactor1 `json:"mfaVerificationFactors,omitempty"`
	Roles                  []UpsertJwtCustomizerRole1                  `json:"roles,omitempty"`
	Organizations          []UpsertJwtCustomizerOrganization1          `json:"organizations,omitempty"`
	OrganizationRoles      []UpsertJwtCustomizerOrganizationRole1      `json:"organizationRoles,omitempty"`
}

func (o *UpsertJwtCustomizerUser1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpsertJwtCustomizerUser1) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *UpsertJwtCustomizerUser1) GetPrimaryEmail() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryEmail
}

func (o *UpsertJwtCustomizerUser1) GetPrimaryPhone() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryPhone
}

func (o *UpsertJwtCustomizerUser1) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpsertJwtCustomizerUser1) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *UpsertJwtCustomizerUser1) GetCustomData() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *UpsertJwtCustomizerUser1) GetIdentities() map[string]UpsertJwtCustomizerIdentities1 {
	if o == nil {
		return nil
	}
	return o.Identities
}

func (o *UpsertJwtCustomizerUser1) GetLastSignInAt() *float64 {
	if o == nil {
		return nil
	}
	return o.LastSignInAt
}

func (o *UpsertJwtCustomizerUser1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpsertJwtCustomizerUser1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpsertJwtCustomizerUser1) GetProfile() *UpsertJwtCustomizerProfile1 {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *UpsertJwtCustomizerUser1) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *UpsertJwtCustomizerUser1) GetIsSuspended() *bool {
	if o == nil {
		return nil
	}
	return o.IsSuspended
}

func (o *UpsertJwtCustomizerUser1) GetHasPassword() *bool {
	if o == nil {
		return nil
	}
	return o.HasPassword
}

func (o *UpsertJwtCustomizerUser1) GetSsoIdentities() []UpsertJwtCustomizerSsoIdentity1 {
	if o == nil {
		return nil
	}
	return o.SsoIdentities
}

func (o *UpsertJwtCustomizerUser1) GetMfaVerificationFactors() []UpsertJwtCustomizerMfaVerificationFactor1 {
	if o == nil {
		return nil
	}
	return o.MfaVerificationFactors
}

func (o *UpsertJwtCustomizerUser1) GetRoles() []UpsertJwtCustomizerRole1 {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *UpsertJwtCustomizerUser1) GetOrganizations() []UpsertJwtCustomizerOrganization1 {
	if o == nil {
		return nil
	}
	return o.Organizations
}

func (o *UpsertJwtCustomizerUser1) GetOrganizationRoles() []UpsertJwtCustomizerOrganizationRole1 {
	if o == nil {
		return nil
	}
	return o.OrganizationRoles
}

type UpsertJwtCustomizerGrant1 struct {
	Type *string `json:"type,omitempty"`
	// arbitrary
	SubjectTokenContext map[string]any `json:"subjectTokenContext,omitempty"`
}

func (o *UpsertJwtCustomizerGrant1) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpsertJwtCustomizerGrant1) GetSubjectTokenContext() map[string]any {
	if o == nil {
		return nil
	}
	return o.SubjectTokenContext
}

type UpsertJwtCustomizerContextSample1 struct {
	User  UpsertJwtCustomizerUser1   `json:"user"`
	Grant *UpsertJwtCustomizerGrant1 `json:"grant,omitempty"`
}

func (o *UpsertJwtCustomizerContextSample1) GetUser() UpsertJwtCustomizerUser1 {
	if o == nil {
		return UpsertJwtCustomizerUser1{}
	}
	return o.User
}

func (o *UpsertJwtCustomizerContextSample1) GetGrant() *UpsertJwtCustomizerGrant1 {
	if o == nil {
		return nil
	}
	return o.Grant
}

type UpsertJwtCustomizerAud1Type string

const (
	UpsertJwtCustomizerAud1TypeStr        UpsertJwtCustomizerAud1Type = "str"
	UpsertJwtCustomizerAud1TypeArrayOfStr UpsertJwtCustomizerAud1Type = "arrayOfStr"
)

type UpsertJwtCustomizerAud1 struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type UpsertJwtCustomizerAud1Type
}

func CreateUpsertJwtCustomizerAud1Str(str string) UpsertJwtCustomizerAud1 {
	typ := UpsertJwtCustomizerAud1TypeStr

	return UpsertJwtCustomizerAud1{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpsertJwtCustomizerAud1ArrayOfStr(arrayOfStr []string) UpsertJwtCustomizerAud1 {
	typ := UpsertJwtCustomizerAud1TypeArrayOfStr

	return UpsertJwtCustomizerAud1{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpsertJwtCustomizerAud1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpsertJwtCustomizerAud1TypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpsertJwtCustomizerAud1TypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpsertJwtCustomizerAud1", string(data))
}

func (u UpsertJwtCustomizerAud1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpsertJwtCustomizerAud1: all fields are null")
}

type UpsertJwtCustomizerTokenSample1 struct {
	Jti                *string                  `json:"jti,omitempty"`
	Aud                *UpsertJwtCustomizerAud1 `json:"aud,omitempty"`
	Scope              *string                  `json:"scope,omitempty"`
	ClientID           *string                  `json:"clientId,omitempty"`
	AccountID          *string                  `json:"accountId,omitempty"`
	ExpiresWithSession *bool                    `json:"expiresWithSession,omitempty"`
	GrantID            *string                  `json:"grantId,omitempty"`
	Gty                *string                  `json:"gty,omitempty"`
	SessionUID         *string                  `json:"sessionUid,omitempty"`
	Sid                *string                  `json:"sid,omitempty"`
	Kind               *string                  `json:"kind,omitempty"`
}

func (o *UpsertJwtCustomizerTokenSample1) GetJti() *string {
	if o == nil {
		return nil
	}
	return o.Jti
}

func (o *UpsertJwtCustomizerTokenSample1) GetAud() *UpsertJwtCustomizerAud1 {
	if o == nil {
		return nil
	}
	return o.Aud
}

func (o *UpsertJwtCustomizerTokenSample1) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *UpsertJwtCustomizerTokenSample1) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *UpsertJwtCustomizerTokenSample1) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *UpsertJwtCustomizerTokenSample1) GetExpiresWithSession() *bool {
	if o == nil {
		return nil
	}
	return o.ExpiresWithSession
}

func (o *UpsertJwtCustomizerTokenSample1) GetGrantID() *string {
	if o == nil {
		return nil
	}
	return o.GrantID
}

func (o *UpsertJwtCustomizerTokenSample1) GetGty() *string {
	if o == nil {
		return nil
	}
	return o.Gty
}

func (o *UpsertJwtCustomizerTokenSample1) GetSessionUID() *string {
	if o == nil {
		return nil
	}
	return o.SessionUID
}

func (o *UpsertJwtCustomizerTokenSample1) GetSid() *string {
	if o == nil {
		return nil
	}
	return o.Sid
}

func (o *UpsertJwtCustomizerTokenSample1) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

type UpsertJwtCustomizerResponseBody1 struct {
	Script               string                             `json:"script"`
	EnvironmentVariables map[string]string                  `json:"environmentVariables,omitempty"`
	ContextSample        *UpsertJwtCustomizerContextSample1 `json:"contextSample,omitempty"`
	TokenSample          *UpsertJwtCustomizerTokenSample1   `json:"tokenSample,omitempty"`
}

func (o *UpsertJwtCustomizerResponseBody1) GetScript() string {
	if o == nil {
		return ""
	}
	return o.Script
}

func (o *UpsertJwtCustomizerResponseBody1) GetEnvironmentVariables() map[string]string {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *UpsertJwtCustomizerResponseBody1) GetContextSample() *UpsertJwtCustomizerContextSample1 {
	if o == nil {
		return nil
	}
	return o.ContextSample
}

func (o *UpsertJwtCustomizerResponseBody1) GetTokenSample() *UpsertJwtCustomizerTokenSample1 {
	if o == nil {
		return nil
	}
	return o.TokenSample
}

type UpsertJwtCustomizerResponseBodyUnion1Type string

const (
	UpsertJwtCustomizerResponseBodyUnion1TypeUpsertJwtCustomizerResponseBody1 UpsertJwtCustomizerResponseBodyUnion1Type = "UpsertJwtCustomizer_ResponseBody_1"
	UpsertJwtCustomizerResponseBodyUnion1TypeUpsertJwtCustomizerResponseBody2 UpsertJwtCustomizerResponseBodyUnion1Type = "UpsertJwtCustomizer_ResponseBody_2"
)

// UpsertJwtCustomizerResponseBodyUnion1 - The updated JWT customizer.
type UpsertJwtCustomizerResponseBodyUnion1 struct {
	UpsertJwtCustomizerResponseBody1 *UpsertJwtCustomizerResponseBody1 `queryParam:"inline"`
	UpsertJwtCustomizerResponseBody2 *UpsertJwtCustomizerResponseBody2 `queryParam:"inline"`

	Type UpsertJwtCustomizerResponseBodyUnion1Type
}

func CreateUpsertJwtCustomizerResponseBodyUnion1UpsertJwtCustomizerResponseBody1(upsertJwtCustomizerResponseBody1 UpsertJwtCustomizerResponseBody1) UpsertJwtCustomizerResponseBodyUnion1 {
	typ := UpsertJwtCustomizerResponseBodyUnion1TypeUpsertJwtCustomizerResponseBody1

	return UpsertJwtCustomizerResponseBodyUnion1{
		UpsertJwtCustomizerResponseBody1: &upsertJwtCustomizerResponseBody1,
		Type:                             typ,
	}
}

func CreateUpsertJwtCustomizerResponseBodyUnion1UpsertJwtCustomizerResponseBody2(upsertJwtCustomizerResponseBody2 UpsertJwtCustomizerResponseBody2) UpsertJwtCustomizerResponseBodyUnion1 {
	typ := UpsertJwtCustomizerResponseBodyUnion1TypeUpsertJwtCustomizerResponseBody2

	return UpsertJwtCustomizerResponseBodyUnion1{
		UpsertJwtCustomizerResponseBody2: &upsertJwtCustomizerResponseBody2,
		Type:                             typ,
	}
}

func (u *UpsertJwtCustomizerResponseBodyUnion1) UnmarshalJSON(data []byte) error {

	var upsertJwtCustomizerResponseBody1 UpsertJwtCustomizerResponseBody1 = UpsertJwtCustomizerResponseBody1{}
	if err := utils.UnmarshalJSON(data, &upsertJwtCustomizerResponseBody1, "", true, true); err == nil {
		u.UpsertJwtCustomizerResponseBody1 = &upsertJwtCustomizerResponseBody1
		u.Type = UpsertJwtCustomizerResponseBodyUnion1TypeUpsertJwtCustomizerResponseBody1
		return nil
	}

	var upsertJwtCustomizerResponseBody2 UpsertJwtCustomizerResponseBody2 = UpsertJwtCustomizerResponseBody2{}
	if err := utils.UnmarshalJSON(data, &upsertJwtCustomizerResponseBody2, "", true, true); err == nil {
		u.UpsertJwtCustomizerResponseBody2 = &upsertJwtCustomizerResponseBody2
		u.Type = UpsertJwtCustomizerResponseBodyUnion1TypeUpsertJwtCustomizerResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpsertJwtCustomizerResponseBodyUnion1", string(data))
}

func (u UpsertJwtCustomizerResponseBodyUnion1) MarshalJSON() ([]byte, error) {
	if u.UpsertJwtCustomizerResponseBody1 != nil {
		return utils.MarshalJSON(u.UpsertJwtCustomizerResponseBody1, "", true)
	}

	if u.UpsertJwtCustomizerResponseBody2 != nil {
		return utils.MarshalJSON(u.UpsertJwtCustomizerResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type UpsertJwtCustomizerResponseBodyUnion1: all fields are null")
}

type UpsertJwtCustomizerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated JWT customizer.
	TwoHundredApplicationJSONOneOf *UpsertJwtCustomizerResponseBodyUnion1
	// The created JWT customizer.
	TwoHundredAndOneApplicationJSONOneOf *UpsertJwtCustomizerResponseBodyUnion2
}

func (o *UpsertJwtCustomizerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpsertJwtCustomizerResponse) GetTwoHundredApplicationJSONOneOf() *UpsertJwtCustomizerResponseBodyUnion1 {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONOneOf
}

func (o *UpsertJwtCustomizerResponse) GetTwoHundredAndOneApplicationJSONOneOf() *UpsertJwtCustomizerResponseBodyUnion2 {
	if o == nil {
		return nil
	}
	return o.TwoHundredAndOneApplicationJSONOneOf
}
