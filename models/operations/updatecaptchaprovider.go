// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type UpdateCaptchaProviderConfigRequest2 struct {
	Type      string `json:"type"`
	SiteKey   string `json:"siteKey"`
	SecretKey string `json:"secretKey"`
	ProjectID string `json:"projectId"`
}

func (o *UpdateCaptchaProviderConfigRequest2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateCaptchaProviderConfigRequest2) GetSiteKey() string {
	if o == nil {
		return ""
	}
	return o.SiteKey
}

func (o *UpdateCaptchaProviderConfigRequest2) GetSecretKey() string {
	if o == nil {
		return ""
	}
	return o.SecretKey
}

func (o *UpdateCaptchaProviderConfigRequest2) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UpdateCaptchaProviderConfigRequest1 struct {
	Type      string `json:"type"`
	SiteKey   string `json:"siteKey"`
	SecretKey string `json:"secretKey"`
}

func (o *UpdateCaptchaProviderConfigRequest1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateCaptchaProviderConfigRequest1) GetSiteKey() string {
	if o == nil {
		return ""
	}
	return o.SiteKey
}

func (o *UpdateCaptchaProviderConfigRequest1) GetSecretKey() string {
	if o == nil {
		return ""
	}
	return o.SecretKey
}

type ConfigRequestUnionType string

const (
	ConfigRequestUnionTypeUpdateCaptchaProviderConfigRequest1 ConfigRequestUnionType = "UpdateCaptchaProvider_config_request_1"
	ConfigRequestUnionTypeUpdateCaptchaProviderConfigRequest2 ConfigRequestUnionType = "UpdateCaptchaProvider_config_request_2"
)

// ConfigRequestUnion - The captcha provider config.
type ConfigRequestUnion struct {
	UpdateCaptchaProviderConfigRequest1 *UpdateCaptchaProviderConfigRequest1 `queryParam:"inline"`
	UpdateCaptchaProviderConfigRequest2 *UpdateCaptchaProviderConfigRequest2 `queryParam:"inline"`

	Type ConfigRequestUnionType
}

func CreateConfigRequestUnionUpdateCaptchaProviderConfigRequest1(updateCaptchaProviderConfigRequest1 UpdateCaptchaProviderConfigRequest1) ConfigRequestUnion {
	typ := ConfigRequestUnionTypeUpdateCaptchaProviderConfigRequest1

	return ConfigRequestUnion{
		UpdateCaptchaProviderConfigRequest1: &updateCaptchaProviderConfigRequest1,
		Type:                                typ,
	}
}

func CreateConfigRequestUnionUpdateCaptchaProviderConfigRequest2(updateCaptchaProviderConfigRequest2 UpdateCaptchaProviderConfigRequest2) ConfigRequestUnion {
	typ := ConfigRequestUnionTypeUpdateCaptchaProviderConfigRequest2

	return ConfigRequestUnion{
		UpdateCaptchaProviderConfigRequest2: &updateCaptchaProviderConfigRequest2,
		Type:                                typ,
	}
}

func (u *ConfigRequestUnion) UnmarshalJSON(data []byte) error {

	var updateCaptchaProviderConfigRequest1 UpdateCaptchaProviderConfigRequest1 = UpdateCaptchaProviderConfigRequest1{}
	if err := utils.UnmarshalJSON(data, &updateCaptchaProviderConfigRequest1, "", true, true); err == nil {
		u.UpdateCaptchaProviderConfigRequest1 = &updateCaptchaProviderConfigRequest1
		u.Type = ConfigRequestUnionTypeUpdateCaptchaProviderConfigRequest1
		return nil
	}

	var updateCaptchaProviderConfigRequest2 UpdateCaptchaProviderConfigRequest2 = UpdateCaptchaProviderConfigRequest2{}
	if err := utils.UnmarshalJSON(data, &updateCaptchaProviderConfigRequest2, "", true, true); err == nil {
		u.UpdateCaptchaProviderConfigRequest2 = &updateCaptchaProviderConfigRequest2
		u.Type = ConfigRequestUnionTypeUpdateCaptchaProviderConfigRequest2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ConfigRequestUnion", string(data))
}

func (u ConfigRequestUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateCaptchaProviderConfigRequest1 != nil {
		return utils.MarshalJSON(u.UpdateCaptchaProviderConfigRequest1, "", true)
	}

	if u.UpdateCaptchaProviderConfigRequest2 != nil {
		return utils.MarshalJSON(u.UpdateCaptchaProviderConfigRequest2, "", true)
	}

	return nil, errors.New("could not marshal union type ConfigRequestUnion: all fields are null")
}

type UpdateCaptchaProviderRequest struct {
	// The captcha provider config.
	Config ConfigRequestUnion `json:"config"`
}

func (o *UpdateCaptchaProviderRequest) GetConfig() ConfigRequestUnion {
	if o == nil {
		return ConfigRequestUnion{}
	}
	return o.Config
}

type UpdateCaptchaProviderConfigResponse2 struct {
	Type      string `json:"type"`
	SiteKey   string `json:"siteKey"`
	SecretKey string `json:"secretKey"`
	ProjectID string `json:"projectId"`
}

func (o *UpdateCaptchaProviderConfigResponse2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateCaptchaProviderConfigResponse2) GetSiteKey() string {
	if o == nil {
		return ""
	}
	return o.SiteKey
}

func (o *UpdateCaptchaProviderConfigResponse2) GetSecretKey() string {
	if o == nil {
		return ""
	}
	return o.SecretKey
}

func (o *UpdateCaptchaProviderConfigResponse2) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UpdateCaptchaProviderConfigResponse1 struct {
	Type      string `json:"type"`
	SiteKey   string `json:"siteKey"`
	SecretKey string `json:"secretKey"`
}

func (o *UpdateCaptchaProviderConfigResponse1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateCaptchaProviderConfigResponse1) GetSiteKey() string {
	if o == nil {
		return ""
	}
	return o.SiteKey
}

func (o *UpdateCaptchaProviderConfigResponse1) GetSecretKey() string {
	if o == nil {
		return ""
	}
	return o.SecretKey
}

type UpdateCaptchaProviderConfigResponseUnionType string

const (
	UpdateCaptchaProviderConfigResponseUnionTypeUpdateCaptchaProviderConfigResponse1 UpdateCaptchaProviderConfigResponseUnionType = "UpdateCaptchaProvider_config_response_1"
	UpdateCaptchaProviderConfigResponseUnionTypeUpdateCaptchaProviderConfigResponse2 UpdateCaptchaProviderConfigResponseUnionType = "UpdateCaptchaProvider_config_response_2"
)

type UpdateCaptchaProviderConfigResponseUnion struct {
	UpdateCaptchaProviderConfigResponse1 *UpdateCaptchaProviderConfigResponse1 `queryParam:"inline"`
	UpdateCaptchaProviderConfigResponse2 *UpdateCaptchaProviderConfigResponse2 `queryParam:"inline"`

	Type UpdateCaptchaProviderConfigResponseUnionType
}

func CreateUpdateCaptchaProviderConfigResponseUnionUpdateCaptchaProviderConfigResponse1(updateCaptchaProviderConfigResponse1 UpdateCaptchaProviderConfigResponse1) UpdateCaptchaProviderConfigResponseUnion {
	typ := UpdateCaptchaProviderConfigResponseUnionTypeUpdateCaptchaProviderConfigResponse1

	return UpdateCaptchaProviderConfigResponseUnion{
		UpdateCaptchaProviderConfigResponse1: &updateCaptchaProviderConfigResponse1,
		Type:                                 typ,
	}
}

func CreateUpdateCaptchaProviderConfigResponseUnionUpdateCaptchaProviderConfigResponse2(updateCaptchaProviderConfigResponse2 UpdateCaptchaProviderConfigResponse2) UpdateCaptchaProviderConfigResponseUnion {
	typ := UpdateCaptchaProviderConfigResponseUnionTypeUpdateCaptchaProviderConfigResponse2

	return UpdateCaptchaProviderConfigResponseUnion{
		UpdateCaptchaProviderConfigResponse2: &updateCaptchaProviderConfigResponse2,
		Type:                                 typ,
	}
}

func (u *UpdateCaptchaProviderConfigResponseUnion) UnmarshalJSON(data []byte) error {

	var updateCaptchaProviderConfigResponse1 UpdateCaptchaProviderConfigResponse1 = UpdateCaptchaProviderConfigResponse1{}
	if err := utils.UnmarshalJSON(data, &updateCaptchaProviderConfigResponse1, "", true, true); err == nil {
		u.UpdateCaptchaProviderConfigResponse1 = &updateCaptchaProviderConfigResponse1
		u.Type = UpdateCaptchaProviderConfigResponseUnionTypeUpdateCaptchaProviderConfigResponse1
		return nil
	}

	var updateCaptchaProviderConfigResponse2 UpdateCaptchaProviderConfigResponse2 = UpdateCaptchaProviderConfigResponse2{}
	if err := utils.UnmarshalJSON(data, &updateCaptchaProviderConfigResponse2, "", true, true); err == nil {
		u.UpdateCaptchaProviderConfigResponse2 = &updateCaptchaProviderConfigResponse2
		u.Type = UpdateCaptchaProviderConfigResponseUnionTypeUpdateCaptchaProviderConfigResponse2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateCaptchaProviderConfigResponseUnion", string(data))
}

func (u UpdateCaptchaProviderConfigResponseUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateCaptchaProviderConfigResponse1 != nil {
		return utils.MarshalJSON(u.UpdateCaptchaProviderConfigResponse1, "", true)
	}

	if u.UpdateCaptchaProviderConfigResponse2 != nil {
		return utils.MarshalJSON(u.UpdateCaptchaProviderConfigResponse2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateCaptchaProviderConfigResponseUnion: all fields are null")
}

// UpdateCaptchaProviderResponseBody - Updated captcha provider.
type UpdateCaptchaProviderResponseBody struct {
	TenantID  string                                   `json:"tenantId"`
	ID        string                                   `json:"id"`
	Config    UpdateCaptchaProviderConfigResponseUnion `json:"config"`
	CreatedAt float64                                  `json:"createdAt"`
	UpdatedAt float64                                  `json:"updatedAt"`
}

func (o *UpdateCaptchaProviderResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpdateCaptchaProviderResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCaptchaProviderResponseBody) GetConfig() UpdateCaptchaProviderConfigResponseUnion {
	if o == nil {
		return UpdateCaptchaProviderConfigResponseUnion{}
	}
	return o.Config
}

func (o *UpdateCaptchaProviderResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateCaptchaProviderResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type UpdateCaptchaProviderResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Updated captcha provider.
	Object *UpdateCaptchaProviderResponseBody
}

func (o *UpdateCaptchaProviderResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateCaptchaProviderResponse) GetObject() *UpdateCaptchaProviderResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
