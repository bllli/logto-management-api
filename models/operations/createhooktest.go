// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type CreateHookTestEvent string

const (
	CreateHookTestEventPostRegister                  CreateHookTestEvent = "PostRegister"
	CreateHookTestEventPostSignIn                    CreateHookTestEvent = "PostSignIn"
	CreateHookTestEventPostResetPassword             CreateHookTestEvent = "PostResetPassword"
	CreateHookTestEventUserCreated                   CreateHookTestEvent = "User.Created"
	CreateHookTestEventUserDeleted                   CreateHookTestEvent = "User.Deleted"
	CreateHookTestEventUserDataUpdated               CreateHookTestEvent = "User.Data.Updated"
	CreateHookTestEventUserSuspensionStatusUpdated   CreateHookTestEvent = "User.SuspensionStatus.Updated"
	CreateHookTestEventRoleCreated                   CreateHookTestEvent = "Role.Created"
	CreateHookTestEventRoleDeleted                   CreateHookTestEvent = "Role.Deleted"
	CreateHookTestEventRoleDataUpdated               CreateHookTestEvent = "Role.Data.Updated"
	CreateHookTestEventRoleScopesUpdated             CreateHookTestEvent = "Role.Scopes.Updated"
	CreateHookTestEventScopeCreated                  CreateHookTestEvent = "Scope.Created"
	CreateHookTestEventScopeDeleted                  CreateHookTestEvent = "Scope.Deleted"
	CreateHookTestEventScopeDataUpdated              CreateHookTestEvent = "Scope.Data.Updated"
	CreateHookTestEventOrganizationCreated           CreateHookTestEvent = "Organization.Created"
	CreateHookTestEventOrganizationDeleted           CreateHookTestEvent = "Organization.Deleted"
	CreateHookTestEventOrganizationDataUpdated       CreateHookTestEvent = "Organization.Data.Updated"
	CreateHookTestEventOrganizationMembershipUpdated CreateHookTestEvent = "Organization.Membership.Updated"
	CreateHookTestEventOrganizationRoleCreated       CreateHookTestEvent = "OrganizationRole.Created"
	CreateHookTestEventOrganizationRoleDeleted       CreateHookTestEvent = "OrganizationRole.Deleted"
	CreateHookTestEventOrganizationRoleDataUpdated   CreateHookTestEvent = "OrganizationRole.Data.Updated"
	CreateHookTestEventOrganizationRoleScopesUpdated CreateHookTestEvent = "OrganizationRole.Scopes.Updated"
	CreateHookTestEventOrganizationScopeCreated      CreateHookTestEvent = "OrganizationScope.Created"
	CreateHookTestEventOrganizationScopeDeleted      CreateHookTestEvent = "OrganizationScope.Deleted"
	CreateHookTestEventOrganizationScopeDataUpdated  CreateHookTestEvent = "OrganizationScope.Data.Updated"
)

func (e CreateHookTestEvent) ToPointer() *CreateHookTestEvent {
	return &e
}
func (e *CreateHookTestEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PostRegister":
		fallthrough
	case "PostSignIn":
		fallthrough
	case "PostResetPassword":
		fallthrough
	case "User.Created":
		fallthrough
	case "User.Deleted":
		fallthrough
	case "User.Data.Updated":
		fallthrough
	case "User.SuspensionStatus.Updated":
		fallthrough
	case "Role.Created":
		fallthrough
	case "Role.Deleted":
		fallthrough
	case "Role.Data.Updated":
		fallthrough
	case "Role.Scopes.Updated":
		fallthrough
	case "Scope.Created":
		fallthrough
	case "Scope.Deleted":
		fallthrough
	case "Scope.Data.Updated":
		fallthrough
	case "Organization.Created":
		fallthrough
	case "Organization.Deleted":
		fallthrough
	case "Organization.Data.Updated":
		fallthrough
	case "Organization.Membership.Updated":
		fallthrough
	case "OrganizationRole.Created":
		fallthrough
	case "OrganizationRole.Deleted":
		fallthrough
	case "OrganizationRole.Data.Updated":
		fallthrough
	case "OrganizationRole.Scopes.Updated":
		fallthrough
	case "OrganizationScope.Created":
		fallthrough
	case "OrganizationScope.Deleted":
		fallthrough
	case "OrganizationScope.Data.Updated":
		*e = CreateHookTestEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHookTestEvent: %v", v)
	}
}

// CreateHookTestConfig - The hook configuration for testing.
type CreateHookTestConfig struct {
	URL     string            `json:"url"`
	Headers map[string]string `json:"headers,omitempty"`
	// Now the retry times is fixed to 3. Keep for backward compatibility.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Retries *float64 `json:"retries,omitempty"`
}

func (o *CreateHookTestConfig) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateHookTestConfig) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateHookTestConfig) GetRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

type CreateHookTestRequestBody struct {
	// An array of hook events for testing.
	Events []CreateHookTestEvent `json:"events"`
	// The hook configuration for testing.
	Config CreateHookTestConfig `json:"config"`
	// Use `events` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Event any `json:"event,omitempty"`
}

func (o *CreateHookTestRequestBody) GetEvents() []CreateHookTestEvent {
	if o == nil {
		return []CreateHookTestEvent{}
	}
	return o.Events
}

func (o *CreateHookTestRequestBody) GetConfig() CreateHookTestConfig {
	if o == nil {
		return CreateHookTestConfig{}
	}
	return o.Config
}

func (o *CreateHookTestRequestBody) GetEvent() any {
	if o == nil {
		return nil
	}
	return o.Event
}

type CreateHookTestRequest struct {
	// The unique identifier of the hook.
	ID          string                    `pathParam:"style=simple,explode=false,name=id"`
	RequestBody CreateHookTestRequestBody `request:"mediaType=application/json"`
}

func (o *CreateHookTestRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateHookTestRequest) GetRequestBody() CreateHookTestRequestBody {
	if o == nil {
		return CreateHookTestRequestBody{}
	}
	return o.RequestBody
}

type CreateHookTestResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *CreateHookTestResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
