// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type CreateUserMfaVerificationRequestBody4 struct {
	// The type of MFA verification to create.
	Type string `json:"type"`
	// The backup codes for the MFA verification, if not provided, a new group of backup codes will be generated.
	Codes []string `json:"codes,omitempty"`
}

func (o *CreateUserMfaVerificationRequestBody4) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateUserMfaVerificationRequestBody4) GetCodes() []string {
	if o == nil {
		return nil
	}
	return o.Codes
}

type CreateUserMfaVerificationRequestBody3 struct {
	// The type of MFA verification to create.
	Type string `json:"type"`
	// The secret for the MFA verification, if not provided, a new secret will be generated.
	Secret *string `json:"secret,omitempty"`
}

func (o *CreateUserMfaVerificationRequestBody3) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateUserMfaVerificationRequestBody3) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type CreateUserMfaVerificationRequestBody2 struct {
	Type  string   `json:"type"`
	Codes []string `json:"codes,omitempty"`
}

func (o *CreateUserMfaVerificationRequestBody2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateUserMfaVerificationRequestBody2) GetCodes() []string {
	if o == nil {
		return nil
	}
	return o.Codes
}

type CreateUserMfaVerificationRequestBody1 struct {
	Type   string  `json:"type"`
	Secret *string `json:"secret,omitempty"`
}

func (o *CreateUserMfaVerificationRequestBody1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateUserMfaVerificationRequestBody1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type CreateUserMfaVerificationRequestBodyType string

const (
	CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody1 CreateUserMfaVerificationRequestBodyType = "CreateUserMfaVerification_RequestBody_1"
	CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody2 CreateUserMfaVerificationRequestBodyType = "CreateUserMfaVerification_RequestBody_2"
	CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody3 CreateUserMfaVerificationRequestBodyType = "CreateUserMfaVerification_RequestBody_3"
	CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody4 CreateUserMfaVerificationRequestBodyType = "CreateUserMfaVerification_RequestBody_4"
)

type CreateUserMfaVerificationRequestBody struct {
	CreateUserMfaVerificationRequestBody1 *CreateUserMfaVerificationRequestBody1 `queryParam:"inline"`
	CreateUserMfaVerificationRequestBody2 *CreateUserMfaVerificationRequestBody2 `queryParam:"inline"`
	CreateUserMfaVerificationRequestBody3 *CreateUserMfaVerificationRequestBody3 `queryParam:"inline"`
	CreateUserMfaVerificationRequestBody4 *CreateUserMfaVerificationRequestBody4 `queryParam:"inline"`

	Type CreateUserMfaVerificationRequestBodyType
}

func CreateCreateUserMfaVerificationRequestBodyCreateUserMfaVerificationRequestBody1(createUserMfaVerificationRequestBody1 CreateUserMfaVerificationRequestBody1) CreateUserMfaVerificationRequestBody {
	typ := CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody1

	return CreateUserMfaVerificationRequestBody{
		CreateUserMfaVerificationRequestBody1: &createUserMfaVerificationRequestBody1,
		Type:                                  typ,
	}
}

func CreateCreateUserMfaVerificationRequestBodyCreateUserMfaVerificationRequestBody2(createUserMfaVerificationRequestBody2 CreateUserMfaVerificationRequestBody2) CreateUserMfaVerificationRequestBody {
	typ := CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody2

	return CreateUserMfaVerificationRequestBody{
		CreateUserMfaVerificationRequestBody2: &createUserMfaVerificationRequestBody2,
		Type:                                  typ,
	}
}

func CreateCreateUserMfaVerificationRequestBodyCreateUserMfaVerificationRequestBody3(createUserMfaVerificationRequestBody3 CreateUserMfaVerificationRequestBody3) CreateUserMfaVerificationRequestBody {
	typ := CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody3

	return CreateUserMfaVerificationRequestBody{
		CreateUserMfaVerificationRequestBody3: &createUserMfaVerificationRequestBody3,
		Type:                                  typ,
	}
}

func CreateCreateUserMfaVerificationRequestBodyCreateUserMfaVerificationRequestBody4(createUserMfaVerificationRequestBody4 CreateUserMfaVerificationRequestBody4) CreateUserMfaVerificationRequestBody {
	typ := CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody4

	return CreateUserMfaVerificationRequestBody{
		CreateUserMfaVerificationRequestBody4: &createUserMfaVerificationRequestBody4,
		Type:                                  typ,
	}
}

func (u *CreateUserMfaVerificationRequestBody) UnmarshalJSON(data []byte) error {

	var createUserMfaVerificationRequestBody1 CreateUserMfaVerificationRequestBody1 = CreateUserMfaVerificationRequestBody1{}
	if err := utils.UnmarshalJSON(data, &createUserMfaVerificationRequestBody1, "", true, true); err == nil {
		u.CreateUserMfaVerificationRequestBody1 = &createUserMfaVerificationRequestBody1
		u.Type = CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody1
		return nil
	}

	var createUserMfaVerificationRequestBody2 CreateUserMfaVerificationRequestBody2 = CreateUserMfaVerificationRequestBody2{}
	if err := utils.UnmarshalJSON(data, &createUserMfaVerificationRequestBody2, "", true, true); err == nil {
		u.CreateUserMfaVerificationRequestBody2 = &createUserMfaVerificationRequestBody2
		u.Type = CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody2
		return nil
	}

	var createUserMfaVerificationRequestBody3 CreateUserMfaVerificationRequestBody3 = CreateUserMfaVerificationRequestBody3{}
	if err := utils.UnmarshalJSON(data, &createUserMfaVerificationRequestBody3, "", true, true); err == nil {
		u.CreateUserMfaVerificationRequestBody3 = &createUserMfaVerificationRequestBody3
		u.Type = CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody3
		return nil
	}

	var createUserMfaVerificationRequestBody4 CreateUserMfaVerificationRequestBody4 = CreateUserMfaVerificationRequestBody4{}
	if err := utils.UnmarshalJSON(data, &createUserMfaVerificationRequestBody4, "", true, true); err == nil {
		u.CreateUserMfaVerificationRequestBody4 = &createUserMfaVerificationRequestBody4
		u.Type = CreateUserMfaVerificationRequestBodyTypeCreateUserMfaVerificationRequestBody4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateUserMfaVerificationRequestBody", string(data))
}

func (u CreateUserMfaVerificationRequestBody) MarshalJSON() ([]byte, error) {
	if u.CreateUserMfaVerificationRequestBody1 != nil {
		return utils.MarshalJSON(u.CreateUserMfaVerificationRequestBody1, "", true)
	}

	if u.CreateUserMfaVerificationRequestBody2 != nil {
		return utils.MarshalJSON(u.CreateUserMfaVerificationRequestBody2, "", true)
	}

	if u.CreateUserMfaVerificationRequestBody3 != nil {
		return utils.MarshalJSON(u.CreateUserMfaVerificationRequestBody3, "", true)
	}

	if u.CreateUserMfaVerificationRequestBody4 != nil {
		return utils.MarshalJSON(u.CreateUserMfaVerificationRequestBody4, "", true)
	}

	return nil, errors.New("could not marshal union type CreateUserMfaVerificationRequestBody: all fields are null")
}

type CreateUserMfaVerificationRequest struct {
	// The unique identifier of the user.
	UserID      string                               `pathParam:"style=simple,explode=false,name=userId"`
	RequestBody CreateUserMfaVerificationRequestBody `request:"mediaType=application/json"`
}

func (o *CreateUserMfaVerificationRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateUserMfaVerificationRequest) GetRequestBody() CreateUserMfaVerificationRequestBody {
	if o == nil {
		return CreateUserMfaVerificationRequestBody{}
	}
	return o.RequestBody
}

type CreateUserMfaVerificationResponseBody2 struct {
	Type  string   `json:"type"`
	Codes []string `json:"codes"`
}

func (o *CreateUserMfaVerificationResponseBody2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateUserMfaVerificationResponseBody2) GetCodes() []string {
	if o == nil {
		return []string{}
	}
	return o.Codes
}

type CreateUserMfaVerificationResponseBody1 struct {
	Type         string `json:"type"`
	Secret       string `json:"secret"`
	SecretQrCode string `json:"secretQrCode"`
}

func (o *CreateUserMfaVerificationResponseBody1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateUserMfaVerificationResponseBody1) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *CreateUserMfaVerificationResponseBody1) GetSecretQrCode() string {
	if o == nil {
		return ""
	}
	return o.SecretQrCode
}

type CreateUserMfaVerificationResponseBodyType string

const (
	CreateUserMfaVerificationResponseBodyTypeCreateUserMfaVerificationResponseBody1 CreateUserMfaVerificationResponseBodyType = "CreateUserMfaVerification_ResponseBody_1"
	CreateUserMfaVerificationResponseBodyTypeCreateUserMfaVerificationResponseBody2 CreateUserMfaVerificationResponseBodyType = "CreateUserMfaVerification_ResponseBody_2"
)

// CreateUserMfaVerificationResponseBody - The MFA verification that was created.
type CreateUserMfaVerificationResponseBody struct {
	CreateUserMfaVerificationResponseBody1 *CreateUserMfaVerificationResponseBody1 `queryParam:"inline"`
	CreateUserMfaVerificationResponseBody2 *CreateUserMfaVerificationResponseBody2 `queryParam:"inline"`

	Type CreateUserMfaVerificationResponseBodyType
}

func CreateCreateUserMfaVerificationResponseBodyCreateUserMfaVerificationResponseBody1(createUserMfaVerificationResponseBody1 CreateUserMfaVerificationResponseBody1) CreateUserMfaVerificationResponseBody {
	typ := CreateUserMfaVerificationResponseBodyTypeCreateUserMfaVerificationResponseBody1

	return CreateUserMfaVerificationResponseBody{
		CreateUserMfaVerificationResponseBody1: &createUserMfaVerificationResponseBody1,
		Type:                                   typ,
	}
}

func CreateCreateUserMfaVerificationResponseBodyCreateUserMfaVerificationResponseBody2(createUserMfaVerificationResponseBody2 CreateUserMfaVerificationResponseBody2) CreateUserMfaVerificationResponseBody {
	typ := CreateUserMfaVerificationResponseBodyTypeCreateUserMfaVerificationResponseBody2

	return CreateUserMfaVerificationResponseBody{
		CreateUserMfaVerificationResponseBody2: &createUserMfaVerificationResponseBody2,
		Type:                                   typ,
	}
}

func (u *CreateUserMfaVerificationResponseBody) UnmarshalJSON(data []byte) error {

	var createUserMfaVerificationResponseBody2 CreateUserMfaVerificationResponseBody2 = CreateUserMfaVerificationResponseBody2{}
	if err := utils.UnmarshalJSON(data, &createUserMfaVerificationResponseBody2, "", true, true); err == nil {
		u.CreateUserMfaVerificationResponseBody2 = &createUserMfaVerificationResponseBody2
		u.Type = CreateUserMfaVerificationResponseBodyTypeCreateUserMfaVerificationResponseBody2
		return nil
	}

	var createUserMfaVerificationResponseBody1 CreateUserMfaVerificationResponseBody1 = CreateUserMfaVerificationResponseBody1{}
	if err := utils.UnmarshalJSON(data, &createUserMfaVerificationResponseBody1, "", true, true); err == nil {
		u.CreateUserMfaVerificationResponseBody1 = &createUserMfaVerificationResponseBody1
		u.Type = CreateUserMfaVerificationResponseBodyTypeCreateUserMfaVerificationResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateUserMfaVerificationResponseBody", string(data))
}

func (u CreateUserMfaVerificationResponseBody) MarshalJSON() ([]byte, error) {
	if u.CreateUserMfaVerificationResponseBody1 != nil {
		return utils.MarshalJSON(u.CreateUserMfaVerificationResponseBody1, "", true)
	}

	if u.CreateUserMfaVerificationResponseBody2 != nil {
		return utils.MarshalJSON(u.CreateUserMfaVerificationResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateUserMfaVerificationResponseBody: all fields are null")
}

type CreateUserMfaVerificationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The MFA verification that was created.
	OneOf *CreateUserMfaVerificationResponseBody
}

func (o *CreateUserMfaVerificationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateUserMfaVerificationResponse) GetOneOf() *CreateUserMfaVerificationResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
