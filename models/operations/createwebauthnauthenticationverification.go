// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type CreateWebAuthnAuthenticationVerificationTransport string

const (
	CreateWebAuthnAuthenticationVerificationTransportUsb       CreateWebAuthnAuthenticationVerificationTransport = "usb"
	CreateWebAuthnAuthenticationVerificationTransportNfc       CreateWebAuthnAuthenticationVerificationTransport = "nfc"
	CreateWebAuthnAuthenticationVerificationTransportBle       CreateWebAuthnAuthenticationVerificationTransport = "ble"
	CreateWebAuthnAuthenticationVerificationTransportInternal  CreateWebAuthnAuthenticationVerificationTransport = "internal"
	CreateWebAuthnAuthenticationVerificationTransportCable     CreateWebAuthnAuthenticationVerificationTransport = "cable"
	CreateWebAuthnAuthenticationVerificationTransportHybrid    CreateWebAuthnAuthenticationVerificationTransport = "hybrid"
	CreateWebAuthnAuthenticationVerificationTransportSmartCard CreateWebAuthnAuthenticationVerificationTransport = "smart-card"
)

func (e CreateWebAuthnAuthenticationVerificationTransport) ToPointer() *CreateWebAuthnAuthenticationVerificationTransport {
	return &e
}
func (e *CreateWebAuthnAuthenticationVerificationTransport) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "usb":
		fallthrough
	case "nfc":
		fallthrough
	case "ble":
		fallthrough
	case "internal":
		fallthrough
	case "cable":
		fallthrough
	case "hybrid":
		fallthrough
	case "smart-card":
		*e = CreateWebAuthnAuthenticationVerificationTransport(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebAuthnAuthenticationVerificationTransport: %v", v)
	}
}

type CreateWebAuthnAuthenticationVerificationAllowCredential struct {
	Type       string                                              `json:"type"`
	ID         string                                              `json:"id"`
	Transports []CreateWebAuthnAuthenticationVerificationTransport `json:"transports,omitempty"`
}

func (o *CreateWebAuthnAuthenticationVerificationAllowCredential) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateWebAuthnAuthenticationVerificationAllowCredential) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateWebAuthnAuthenticationVerificationAllowCredential) GetTransports() []CreateWebAuthnAuthenticationVerificationTransport {
	if o == nil {
		return nil
	}
	return o.Transports
}

type CreateWebAuthnAuthenticationVerificationUserVerification string

const (
	CreateWebAuthnAuthenticationVerificationUserVerificationRequired    CreateWebAuthnAuthenticationVerificationUserVerification = "required"
	CreateWebAuthnAuthenticationVerificationUserVerificationPreferred   CreateWebAuthnAuthenticationVerificationUserVerification = "preferred"
	CreateWebAuthnAuthenticationVerificationUserVerificationDiscouraged CreateWebAuthnAuthenticationVerificationUserVerification = "discouraged"
)

func (e CreateWebAuthnAuthenticationVerificationUserVerification) ToPointer() *CreateWebAuthnAuthenticationVerificationUserVerification {
	return &e
}
func (e *CreateWebAuthnAuthenticationVerificationUserVerification) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "required":
		fallthrough
	case "preferred":
		fallthrough
	case "discouraged":
		*e = CreateWebAuthnAuthenticationVerificationUserVerification(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebAuthnAuthenticationVerificationUserVerification: %v", v)
	}
}

type CreateWebAuthnAuthenticationVerificationExtensions struct {
	Appid            *string `json:"appid,omitempty"`
	CredProps        *bool   `json:"credProps,omitempty"`
	HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
}

func (o *CreateWebAuthnAuthenticationVerificationExtensions) GetAppid() *string {
	if o == nil {
		return nil
	}
	return o.Appid
}

func (o *CreateWebAuthnAuthenticationVerificationExtensions) GetCredProps() *bool {
	if o == nil {
		return nil
	}
	return o.CredProps
}

func (o *CreateWebAuthnAuthenticationVerificationExtensions) GetHmacCreateSecret() *bool {
	if o == nil {
		return nil
	}
	return o.HmacCreateSecret
}

// AuthenticationOptions - Options for the user to authenticate with their WebAuthn credential.
type AuthenticationOptions struct {
	Challenge        string                                                    `json:"challenge"`
	Timeout          *float64                                                  `json:"timeout,omitempty"`
	RpID             *string                                                   `json:"rpId,omitempty"`
	AllowCredentials []CreateWebAuthnAuthenticationVerificationAllowCredential `json:"allowCredentials,omitempty"`
	UserVerification *CreateWebAuthnAuthenticationVerificationUserVerification `json:"userVerification,omitempty"`
	Extensions       *CreateWebAuthnAuthenticationVerificationExtensions       `json:"extensions,omitempty"`
}

func (o *AuthenticationOptions) GetChallenge() string {
	if o == nil {
		return ""
	}
	return o.Challenge
}

func (o *AuthenticationOptions) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *AuthenticationOptions) GetRpID() *string {
	if o == nil {
		return nil
	}
	return o.RpID
}

func (o *AuthenticationOptions) GetAllowCredentials() []CreateWebAuthnAuthenticationVerificationAllowCredential {
	if o == nil {
		return nil
	}
	return o.AllowCredentials
}

func (o *AuthenticationOptions) GetUserVerification() *CreateWebAuthnAuthenticationVerificationUserVerification {
	if o == nil {
		return nil
	}
	return o.UserVerification
}

func (o *AuthenticationOptions) GetExtensions() *CreateWebAuthnAuthenticationVerificationExtensions {
	if o == nil {
		return nil
	}
	return o.Extensions
}

// CreateWebAuthnAuthenticationVerificationResponseBody - WebAuthn authentication successfully initiated.
type CreateWebAuthnAuthenticationVerificationResponseBody struct {
	// The unique ID for the WebAuthn authentication record, required to verify the WebAuthn authentication challenge.
	VerificationID string `json:"verificationId"`
	// Options for the user to authenticate with their WebAuthn credential.
	AuthenticationOptions AuthenticationOptions `json:"authenticationOptions"`
}

func (o *CreateWebAuthnAuthenticationVerificationResponseBody) GetVerificationID() string {
	if o == nil {
		return ""
	}
	return o.VerificationID
}

func (o *CreateWebAuthnAuthenticationVerificationResponseBody) GetAuthenticationOptions() AuthenticationOptions {
	if o == nil {
		return AuthenticationOptions{}
	}
	return o.AuthenticationOptions
}

type CreateWebAuthnAuthenticationVerificationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// WebAuthn authentication successfully initiated.
	Object *CreateWebAuthnAuthenticationVerificationResponseBody
}

func (o *CreateWebAuthnAuthenticationVerificationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateWebAuthnAuthenticationVerificationResponse) GetObject() *CreateWebAuthnAuthenticationVerificationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
