// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/bllli/logto-management-api/models/components"
)

// CreateConnectorTestConfig - Connector configuration object for testing.
type CreateConnectorTestConfig struct {
}

type CreateConnectorTestRequestBody struct {
	// Phone number to send test message to. If this is set, email will be ignored.
	Phone *string `json:"phone,omitempty"`
	// Email address to send test message to. If phone is set, this will be ignored.
	Email *string `json:"email,omitempty"`
	// Connector configuration object for testing.
	Config CreateConnectorTestConfig `json:"config"`
	// Preferred language for the message. If not set, the default language will be used. (Applicable only when custom i18n templates are configured.)
	Locale *string `json:"locale,omitempty"`
}

func (o *CreateConnectorTestRequestBody) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreateConnectorTestRequestBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreateConnectorTestRequestBody) GetConfig() CreateConnectorTestConfig {
	if o == nil {
		return CreateConnectorTestConfig{}
	}
	return o.Config
}

func (o *CreateConnectorTestRequestBody) GetLocale() *string {
	if o == nil {
		return nil
	}
	return o.Locale
}

type CreateConnectorTestRequest struct {
	// The unique identifier of the factory.
	FactoryID   string                         `pathParam:"style=simple,explode=false,name=factoryId"`
	RequestBody CreateConnectorTestRequestBody `request:"mediaType=application/json"`
}

func (o *CreateConnectorTestRequest) GetFactoryID() string {
	if o == nil {
		return ""
	}
	return o.FactoryID
}

func (o *CreateConnectorTestRequest) GetRequestBody() CreateConnectorTestRequestBody {
	if o == nil {
		return CreateConnectorTestRequestBody{}
	}
	return o.RequestBody
}

type CreateConnectorTestResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *CreateConnectorTestResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
