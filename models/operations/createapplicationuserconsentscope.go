// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type CreateApplicationUserConsentScopeUserScope string

const (
	CreateApplicationUserConsentScopeUserScopeProfile                        CreateApplicationUserConsentScopeUserScope = "profile"
	CreateApplicationUserConsentScopeUserScopeEmail                          CreateApplicationUserConsentScopeUserScope = "email"
	CreateApplicationUserConsentScopeUserScopePhone                          CreateApplicationUserConsentScopeUserScope = "phone"
	CreateApplicationUserConsentScopeUserScopeAddress                        CreateApplicationUserConsentScopeUserScope = "address"
	CreateApplicationUserConsentScopeUserScopeCustomData                     CreateApplicationUserConsentScopeUserScope = "custom_data"
	CreateApplicationUserConsentScopeUserScopeIdentities                     CreateApplicationUserConsentScopeUserScope = "identities"
	CreateApplicationUserConsentScopeUserScopeRoles                          CreateApplicationUserConsentScopeUserScope = "roles"
	CreateApplicationUserConsentScopeUserScopeUrnLogtoScopeOrganizations     CreateApplicationUserConsentScopeUserScope = "urn:logto:scope:organizations"
	CreateApplicationUserConsentScopeUserScopeUrnLogtoScopeOrganizationRoles CreateApplicationUserConsentScopeUserScope = "urn:logto:scope:organization_roles"
)

func (e CreateApplicationUserConsentScopeUserScope) ToPointer() *CreateApplicationUserConsentScopeUserScope {
	return &e
}
func (e *CreateApplicationUserConsentScopeUserScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "profile":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		fallthrough
	case "address":
		fallthrough
	case "custom_data":
		fallthrough
	case "identities":
		fallthrough
	case "roles":
		fallthrough
	case "urn:logto:scope:organizations":
		fallthrough
	case "urn:logto:scope:organization_roles":
		*e = CreateApplicationUserConsentScopeUserScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateApplicationUserConsentScopeUserScope: %v", v)
	}
}

type CreateApplicationUserConsentScopeRequestBody struct {
	// A list of organization scope id to assign to the application. Throws error if any given organization scope is not found.
	OrganizationScopes []string `json:"organizationScopes,omitempty"`
	// A list of resource scope id to assign to the application. Throws error if any given resource scope is not found.
	ResourceScopes []string `json:"resourceScopes,omitempty"`
	// A list of organization resource scope id to assign to the application. Throws error if any given resource scope is not found.
	OrganizationResourceScopes []string `json:"organizationResourceScopes,omitempty"`
	// A list of user scope enum value to assign to the application.
	UserScopes []CreateApplicationUserConsentScopeUserScope `json:"userScopes,omitempty"`
}

func (o *CreateApplicationUserConsentScopeRequestBody) GetOrganizationScopes() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationScopes
}

func (o *CreateApplicationUserConsentScopeRequestBody) GetResourceScopes() []string {
	if o == nil {
		return nil
	}
	return o.ResourceScopes
}

func (o *CreateApplicationUserConsentScopeRequestBody) GetOrganizationResourceScopes() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationResourceScopes
}

func (o *CreateApplicationUserConsentScopeRequestBody) GetUserScopes() []CreateApplicationUserConsentScopeUserScope {
	if o == nil {
		return nil
	}
	return o.UserScopes
}

type CreateApplicationUserConsentScopeRequest struct {
	// The unique identifier of the application.
	ApplicationID string                                       `pathParam:"style=simple,explode=false,name=applicationId"`
	RequestBody   CreateApplicationUserConsentScopeRequestBody `request:"mediaType=application/json"`
}

func (o *CreateApplicationUserConsentScopeRequest) GetApplicationID() string {
	if o == nil {
		return ""
	}
	return o.ApplicationID
}

func (o *CreateApplicationUserConsentScopeRequest) GetRequestBody() CreateApplicationUserConsentScopeRequestBody {
	if o == nil {
		return CreateApplicationUserConsentScopeRequestBody{}
	}
	return o.RequestBody
}

type CreateApplicationUserConsentScopeResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *CreateApplicationUserConsentScopeResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
