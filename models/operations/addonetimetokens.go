// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// AddOneTimeTokensContextRequest - Additional context to store with the one-time token. This can be used to store arbitrary data that will be associated with the token.
type AddOneTimeTokensContextRequest struct {
	JitOrganizationIds []string `json:"jitOrganizationIds,omitempty"`
}

func (o *AddOneTimeTokensContextRequest) GetJitOrganizationIds() []string {
	if o == nil {
		return nil
	}
	return o.JitOrganizationIds
}

type AddOneTimeTokensRequest struct {
	// The email address to associate with the one-time token.
	Email string `json:"email"`
	// Additional context to store with the one-time token. This can be used to store arbitrary data that will be associated with the token.
	Context *AddOneTimeTokensContextRequest `json:"context,omitempty"`
	// The expiration time in seconds. If not provided, defaults to 2 days (172,800 seconds).
	ExpiresIn *float64 `json:"expiresIn,omitempty"`
}

func (o *AddOneTimeTokensRequest) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *AddOneTimeTokensRequest) GetContext() *AddOneTimeTokensContextRequest {
	if o == nil {
		return nil
	}
	return o.Context
}

func (o *AddOneTimeTokensRequest) GetExpiresIn() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpiresIn
}

type AddOneTimeTokensContextResponse struct {
	JitOrganizationIds []string `json:"jitOrganizationIds,omitempty"`
}

func (o *AddOneTimeTokensContextResponse) GetJitOrganizationIds() []string {
	if o == nil {
		return nil
	}
	return o.JitOrganizationIds
}

type AddOneTimeTokensStatus string

const (
	AddOneTimeTokensStatusActive   AddOneTimeTokensStatus = "active"
	AddOneTimeTokensStatusConsumed AddOneTimeTokensStatus = "consumed"
	AddOneTimeTokensStatusRevoked  AddOneTimeTokensStatus = "revoked"
	AddOneTimeTokensStatusExpired  AddOneTimeTokensStatus = "expired"
)

func (e AddOneTimeTokensStatus) ToPointer() *AddOneTimeTokensStatus {
	return &e
}
func (e *AddOneTimeTokensStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "consumed":
		fallthrough
	case "revoked":
		fallthrough
	case "expired":
		*e = AddOneTimeTokensStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddOneTimeTokensStatus: %v", v)
	}
}

// AddOneTimeTokensResponseBody - The one-time token was created successfully.
type AddOneTimeTokensResponseBody struct {
	TenantID  string                          `json:"tenantId"`
	ID        string                          `json:"id"`
	Email     string                          `json:"email"`
	Token     string                          `json:"token"`
	Context   AddOneTimeTokensContextResponse `json:"context"`
	Status    AddOneTimeTokensStatus          `json:"status"`
	CreatedAt float64                         `json:"createdAt"`
	ExpiresAt float64                         `json:"expiresAt"`
}

func (o *AddOneTimeTokensResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *AddOneTimeTokensResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AddOneTimeTokensResponseBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *AddOneTimeTokensResponseBody) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *AddOneTimeTokensResponseBody) GetContext() AddOneTimeTokensContextResponse {
	if o == nil {
		return AddOneTimeTokensContextResponse{}
	}
	return o.Context
}

func (o *AddOneTimeTokensResponseBody) GetStatus() AddOneTimeTokensStatus {
	if o == nil {
		return AddOneTimeTokensStatus("")
	}
	return o.Status
}

func (o *AddOneTimeTokensResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *AddOneTimeTokensResponseBody) GetExpiresAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresAt
}

type AddOneTimeTokensResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The one-time token was created successfully.
	Object *AddOneTimeTokensResponseBody
}

func (o *AddOneTimeTokensResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AddOneTimeTokensResponse) GetObject() *AddOneTimeTokensResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
