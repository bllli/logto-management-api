// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type UpdateEmailTemplateDetailsRequestBody struct {
	// The template of the email subject.
	Subject *string `json:"subject,omitempty"`
	// The template of the email body.
	Content *string `json:"content,omitempty"`
	// The content type of the email body. (Only required by some specific email providers.)
	ContentType *string `json:"contentType,omitempty"`
	// The reply name template of the email. If not provided, the target email address will be used. (The render logic may differ based on the email provider.)
	ReplyTo *string `json:"replyTo,omitempty"`
	// The send from name template of the email. If not provided, the default Logto email address will be used. (The render logic may differ based on the email provider.)
	SendFrom *string `json:"sendFrom,omitempty"`
}

func (o *UpdateEmailTemplateDetailsRequestBody) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *UpdateEmailTemplateDetailsRequestBody) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *UpdateEmailTemplateDetailsRequestBody) GetContentType() *string {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *UpdateEmailTemplateDetailsRequestBody) GetReplyTo() *string {
	if o == nil {
		return nil
	}
	return o.ReplyTo
}

func (o *UpdateEmailTemplateDetailsRequestBody) GetSendFrom() *string {
	if o == nil {
		return nil
	}
	return o.SendFrom
}

type UpdateEmailTemplateDetailsRequest struct {
	// The unique identifier of the email template.
	ID          string                                `pathParam:"style=simple,explode=false,name=id"`
	RequestBody UpdateEmailTemplateDetailsRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateEmailTemplateDetailsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateEmailTemplateDetailsRequest) GetRequestBody() UpdateEmailTemplateDetailsRequestBody {
	if o == nil {
		return UpdateEmailTemplateDetailsRequestBody{}
	}
	return o.RequestBody
}

type UpdateEmailTemplateDetailsTemplateType string

const (
	UpdateEmailTemplateDetailsTemplateTypeSignIn                   UpdateEmailTemplateDetailsTemplateType = "SignIn"
	UpdateEmailTemplateDetailsTemplateTypeRegister                 UpdateEmailTemplateDetailsTemplateType = "Register"
	UpdateEmailTemplateDetailsTemplateTypeForgotPassword           UpdateEmailTemplateDetailsTemplateType = "ForgotPassword"
	UpdateEmailTemplateDetailsTemplateTypeOrganizationInvitation   UpdateEmailTemplateDetailsTemplateType = "OrganizationInvitation"
	UpdateEmailTemplateDetailsTemplateTypeGeneric                  UpdateEmailTemplateDetailsTemplateType = "Generic"
	UpdateEmailTemplateDetailsTemplateTypeUserPermissionValidation UpdateEmailTemplateDetailsTemplateType = "UserPermissionValidation"
	UpdateEmailTemplateDetailsTemplateTypeBindNewIdentifier        UpdateEmailTemplateDetailsTemplateType = "BindNewIdentifier"
)

func (e UpdateEmailTemplateDetailsTemplateType) ToPointer() *UpdateEmailTemplateDetailsTemplateType {
	return &e
}
func (e *UpdateEmailTemplateDetailsTemplateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SignIn":
		fallthrough
	case "Register":
		fallthrough
	case "ForgotPassword":
		fallthrough
	case "OrganizationInvitation":
		fallthrough
	case "Generic":
		fallthrough
	case "UserPermissionValidation":
		fallthrough
	case "BindNewIdentifier":
		*e = UpdateEmailTemplateDetailsTemplateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateEmailTemplateDetailsTemplateType: %v", v)
	}
}

type UpdateEmailTemplateDetailsDetails struct {
	Subject     string  `json:"subject"`
	Content     string  `json:"content"`
	ContentType *string `json:"contentType,omitempty"`
	ReplyTo     *string `json:"replyTo,omitempty"`
	SendFrom    *string `json:"sendFrom,omitempty"`
}

func (o *UpdateEmailTemplateDetailsDetails) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *UpdateEmailTemplateDetailsDetails) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *UpdateEmailTemplateDetailsDetails) GetContentType() *string {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *UpdateEmailTemplateDetailsDetails) GetReplyTo() *string {
	if o == nil {
		return nil
	}
	return o.ReplyTo
}

func (o *UpdateEmailTemplateDetailsDetails) GetSendFrom() *string {
	if o == nil {
		return nil
	}
	return o.SendFrom
}

// UpdateEmailTemplateDetailsResponseBody - The updated email template.
type UpdateEmailTemplateDetailsResponseBody struct {
	TenantID     string                                 `json:"tenantId"`
	ID           string                                 `json:"id"`
	LanguageTag  string                                 `json:"languageTag"`
	TemplateType UpdateEmailTemplateDetailsTemplateType `json:"templateType"`
	Details      UpdateEmailTemplateDetailsDetails      `json:"details"`
	CreatedAt    float64                                `json:"createdAt"`
}

func (o *UpdateEmailTemplateDetailsResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpdateEmailTemplateDetailsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateEmailTemplateDetailsResponseBody) GetLanguageTag() string {
	if o == nil {
		return ""
	}
	return o.LanguageTag
}

func (o *UpdateEmailTemplateDetailsResponseBody) GetTemplateType() UpdateEmailTemplateDetailsTemplateType {
	if o == nil {
		return UpdateEmailTemplateDetailsTemplateType("")
	}
	return o.TemplateType
}

func (o *UpdateEmailTemplateDetailsResponseBody) GetDetails() UpdateEmailTemplateDetailsDetails {
	if o == nil {
		return UpdateEmailTemplateDetailsDetails{}
	}
	return o.Details
}

func (o *UpdateEmailTemplateDetailsResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type UpdateEmailTemplateDetailsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated email template.
	Object *UpdateEmailTemplateDetailsResponseBody
}

func (o *UpdateEmailTemplateDetailsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateEmailTemplateDetailsResponse) GetObject() *UpdateEmailTemplateDetailsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
