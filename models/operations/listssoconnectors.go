// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListSsoConnectorsRequest struct {
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
}

func (l ListSsoConnectorsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListSsoConnectorsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListSsoConnectorsRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListSsoConnectorsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type ListSsoConnectorsProviderName string

const (
	ListSsoConnectorsProviderNameOidc            ListSsoConnectorsProviderName = "OIDC"
	ListSsoConnectorsProviderNameSaml            ListSsoConnectorsProviderName = "SAML"
	ListSsoConnectorsProviderNameAzureAd         ListSsoConnectorsProviderName = "AzureAD"
	ListSsoConnectorsProviderNameGoogleWorkspace ListSsoConnectorsProviderName = "GoogleWorkspace"
	ListSsoConnectorsProviderNameOkta            ListSsoConnectorsProviderName = "Okta"
	ListSsoConnectorsProviderNameAzureAdOidc     ListSsoConnectorsProviderName = "AzureAdOidc"
)

func (e ListSsoConnectorsProviderName) ToPointer() *ListSsoConnectorsProviderName {
	return &e
}
func (e *ListSsoConnectorsProviderName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OIDC":
		fallthrough
	case "SAML":
		fallthrough
	case "AzureAD":
		fallthrough
	case "GoogleWorkspace":
		fallthrough
	case "Okta":
		fallthrough
	case "AzureAdOidc":
		*e = ListSsoConnectorsProviderName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSsoConnectorsProviderName: %v", v)
	}
}

// ListSsoConnectorsConfig - arbitrary
type ListSsoConnectorsConfig struct {
}

type ListSsoConnectorsBranding struct {
	DisplayName *string `json:"displayName,omitempty"`
	Logo        *string `json:"logo,omitempty"`
	DarkLogo    *string `json:"darkLogo,omitempty"`
}

func (o *ListSsoConnectorsBranding) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *ListSsoConnectorsBranding) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *ListSsoConnectorsBranding) GetDarkLogo() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogo
}

type ListSsoConnectorsProviderType string

const (
	ListSsoConnectorsProviderTypeOidc ListSsoConnectorsProviderType = "oidc"
	ListSsoConnectorsProviderTypeSaml ListSsoConnectorsProviderType = "saml"
)

func (e ListSsoConnectorsProviderType) ToPointer() *ListSsoConnectorsProviderType {
	return &e
}
func (e *ListSsoConnectorsProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oidc":
		fallthrough
	case "saml":
		*e = ListSsoConnectorsProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSsoConnectorsProviderType: %v", v)
	}
}

type ListSsoConnectorsResponseBody struct {
	TenantID      string                        `json:"tenantId"`
	ID            string                        `json:"id"`
	ProviderName  ListSsoConnectorsProviderName `json:"providerName"`
	ConnectorName string                        `json:"connectorName"`
	// arbitrary
	Config           ListSsoConnectorsConfig       `json:"config"`
	Domains          []string                      `json:"domains"`
	Branding         ListSsoConnectorsBranding     `json:"branding"`
	SyncProfile      bool                          `json:"syncProfile"`
	CreatedAt        float64                       `json:"createdAt"`
	Name             string                        `json:"name"`
	ProviderType     ListSsoConnectorsProviderType `json:"providerType"`
	ProviderLogo     string                        `json:"providerLogo"`
	ProviderLogoDark string                        `json:"providerLogoDark"`
	ProviderConfig   map[string]any                `json:"providerConfig,omitempty"`
}

func (o *ListSsoConnectorsResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListSsoConnectorsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListSsoConnectorsResponseBody) GetProviderName() ListSsoConnectorsProviderName {
	if o == nil {
		return ListSsoConnectorsProviderName("")
	}
	return o.ProviderName
}

func (o *ListSsoConnectorsResponseBody) GetConnectorName() string {
	if o == nil {
		return ""
	}
	return o.ConnectorName
}

func (o *ListSsoConnectorsResponseBody) GetConfig() ListSsoConnectorsConfig {
	if o == nil {
		return ListSsoConnectorsConfig{}
	}
	return o.Config
}

func (o *ListSsoConnectorsResponseBody) GetDomains() []string {
	if o == nil {
		return []string{}
	}
	return o.Domains
}

func (o *ListSsoConnectorsResponseBody) GetBranding() ListSsoConnectorsBranding {
	if o == nil {
		return ListSsoConnectorsBranding{}
	}
	return o.Branding
}

func (o *ListSsoConnectorsResponseBody) GetSyncProfile() bool {
	if o == nil {
		return false
	}
	return o.SyncProfile
}

func (o *ListSsoConnectorsResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListSsoConnectorsResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListSsoConnectorsResponseBody) GetProviderType() ListSsoConnectorsProviderType {
	if o == nil {
		return ListSsoConnectorsProviderType("")
	}
	return o.ProviderType
}

func (o *ListSsoConnectorsResponseBody) GetProviderLogo() string {
	if o == nil {
		return ""
	}
	return o.ProviderLogo
}

func (o *ListSsoConnectorsResponseBody) GetProviderLogoDark() string {
	if o == nil {
		return ""
	}
	return o.ProviderLogoDark
}

func (o *ListSsoConnectorsResponseBody) GetProviderConfig() map[string]any {
	if o == nil {
		return nil
	}
	return o.ProviderConfig
}

type ListSsoConnectorsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of SSO connectors.
	ResponseBodies []ListSsoConnectorsResponseBody
}

func (o *ListSsoConnectorsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListSsoConnectorsResponse) GetResponseBodies() []ListSsoConnectorsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
