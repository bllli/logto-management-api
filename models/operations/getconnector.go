// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type GetConnectorRequest struct {
	// The unique identifier of the connector.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetConnectorRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetConnectorMetadataName - Validator function
type GetConnectorMetadataName struct {
}

type GetConnectorMetadata struct {
	Target *string `json:"target,omitempty"`
	// Validator function
	Name     *GetConnectorMetadataName `json:"name,omitempty"`
	Logo     *string                   `json:"logo,omitempty"`
	LogoDark *string                   `json:"logoDark,omitempty"`
}

func (o *GetConnectorMetadata) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetConnectorMetadata) GetName() *GetConnectorMetadataName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetConnectorMetadata) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *GetConnectorMetadata) GetLogoDark() *string {
	if o == nil {
		return nil
	}
	return o.LogoDark
}

// GetConnectorName - Validator function
type GetConnectorName struct {
}

// GetConnectorDescription - Validator function
type GetConnectorDescription struct {
}

type GetConnectorFormItemType string

const (
	GetConnectorFormItemTypeText          GetConnectorFormItemType = "Text"
	GetConnectorFormItemTypeNumber        GetConnectorFormItemType = "Number"
	GetConnectorFormItemTypeMultilineText GetConnectorFormItemType = "MultilineText"
	GetConnectorFormItemTypeSwitch        GetConnectorFormItemType = "Switch"
	GetConnectorFormItemTypeJSON          GetConnectorFormItemType = "Json"
)

func (e GetConnectorFormItemType) ToPointer() *GetConnectorFormItemType {
	return &e
}
func (e *GetConnectorFormItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Text":
		fallthrough
	case "Number":
		fallthrough
	case "MultilineText":
		fallthrough
	case "Switch":
		fallthrough
	case "Json":
		*e = GetConnectorFormItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectorFormItemType: %v", v)
	}
}

type GetConnectorShowCondition3 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *GetConnectorShowCondition3) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *GetConnectorShowCondition3) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type GetConnectorFormItem3 struct {
	Type           GetConnectorFormItemType     `json:"type"`
	Key            string                       `json:"key"`
	Label          string                       `json:"label"`
	Placeholder    *string                      `json:"placeholder,omitempty"`
	Required       *bool                        `json:"required,omitempty"`
	DefaultValue   any                          `json:"defaultValue,omitempty"`
	ShowConditions []GetConnectorShowCondition3 `json:"showConditions,omitempty"`
	Description    *string                      `json:"description,omitempty"`
	Tooltip        *string                      `json:"tooltip,omitempty"`
	IsConfidential *bool                        `json:"isConfidential,omitempty"`
}

func (o *GetConnectorFormItem3) GetType() GetConnectorFormItemType {
	if o == nil {
		return GetConnectorFormItemType("")
	}
	return o.Type
}

func (o *GetConnectorFormItem3) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetConnectorFormItem3) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *GetConnectorFormItem3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *GetConnectorFormItem3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *GetConnectorFormItem3) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *GetConnectorFormItem3) GetShowConditions() []GetConnectorShowCondition3 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *GetConnectorFormItem3) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetConnectorFormItem3) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *GetConnectorFormItem3) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type GetConnectorSelectItem2 struct {
	Value string `json:"value"`
}

func (o *GetConnectorSelectItem2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetConnectorShowCondition2 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *GetConnectorShowCondition2) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *GetConnectorShowCondition2) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type GetConnectorFormItem2 struct {
	Type           string                       `json:"type"`
	SelectItems    []GetConnectorSelectItem2    `json:"selectItems"`
	Key            string                       `json:"key"`
	Label          string                       `json:"label"`
	Placeholder    *string                      `json:"placeholder,omitempty"`
	Required       *bool                        `json:"required,omitempty"`
	DefaultValue   any                          `json:"defaultValue,omitempty"`
	ShowConditions []GetConnectorShowCondition2 `json:"showConditions,omitempty"`
	Description    *string                      `json:"description,omitempty"`
	Tooltip        *string                      `json:"tooltip,omitempty"`
	IsConfidential *bool                        `json:"isConfidential,omitempty"`
}

func (o *GetConnectorFormItem2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetConnectorFormItem2) GetSelectItems() []GetConnectorSelectItem2 {
	if o == nil {
		return []GetConnectorSelectItem2{}
	}
	return o.SelectItems
}

func (o *GetConnectorFormItem2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetConnectorFormItem2) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *GetConnectorFormItem2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *GetConnectorFormItem2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *GetConnectorFormItem2) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *GetConnectorFormItem2) GetShowConditions() []GetConnectorShowCondition2 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *GetConnectorFormItem2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetConnectorFormItem2) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *GetConnectorFormItem2) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type GetConnectorSelectItem1 struct {
	Value string `json:"value"`
	Title string `json:"title"`
}

func (o *GetConnectorSelectItem1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetConnectorSelectItem1) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type GetConnectorShowCondition1 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *GetConnectorShowCondition1) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *GetConnectorShowCondition1) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type GetConnectorFormItem1 struct {
	Type           string                       `json:"type"`
	SelectItems    []GetConnectorSelectItem1    `json:"selectItems"`
	Key            string                       `json:"key"`
	Label          string                       `json:"label"`
	Placeholder    *string                      `json:"placeholder,omitempty"`
	Required       *bool                        `json:"required,omitempty"`
	DefaultValue   any                          `json:"defaultValue,omitempty"`
	ShowConditions []GetConnectorShowCondition1 `json:"showConditions,omitempty"`
	Description    *string                      `json:"description,omitempty"`
	Tooltip        *string                      `json:"tooltip,omitempty"`
	IsConfidential *bool                        `json:"isConfidential,omitempty"`
}

func (o *GetConnectorFormItem1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetConnectorFormItem1) GetSelectItems() []GetConnectorSelectItem1 {
	if o == nil {
		return []GetConnectorSelectItem1{}
	}
	return o.SelectItems
}

func (o *GetConnectorFormItem1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetConnectorFormItem1) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *GetConnectorFormItem1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *GetConnectorFormItem1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *GetConnectorFormItem1) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *GetConnectorFormItem1) GetShowConditions() []GetConnectorShowCondition1 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *GetConnectorFormItem1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetConnectorFormItem1) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *GetConnectorFormItem1) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type GetConnectorFormItemUnionType string

const (
	GetConnectorFormItemUnionTypeGetConnectorFormItem1 GetConnectorFormItemUnionType = "GetConnector_formItem_1"
	GetConnectorFormItemUnionTypeGetConnectorFormItem2 GetConnectorFormItemUnionType = "GetConnector_formItem_2"
	GetConnectorFormItemUnionTypeGetConnectorFormItem3 GetConnectorFormItemUnionType = "GetConnector_formItem_3"
)

type GetConnectorFormItemUnion struct {
	GetConnectorFormItem1 *GetConnectorFormItem1 `queryParam:"inline"`
	GetConnectorFormItem2 *GetConnectorFormItem2 `queryParam:"inline"`
	GetConnectorFormItem3 *GetConnectorFormItem3 `queryParam:"inline"`

	Type GetConnectorFormItemUnionType
}

func CreateGetConnectorFormItemUnionGetConnectorFormItem1(getConnectorFormItem1 GetConnectorFormItem1) GetConnectorFormItemUnion {
	typ := GetConnectorFormItemUnionTypeGetConnectorFormItem1

	return GetConnectorFormItemUnion{
		GetConnectorFormItem1: &getConnectorFormItem1,
		Type:                  typ,
	}
}

func CreateGetConnectorFormItemUnionGetConnectorFormItem2(getConnectorFormItem2 GetConnectorFormItem2) GetConnectorFormItemUnion {
	typ := GetConnectorFormItemUnionTypeGetConnectorFormItem2

	return GetConnectorFormItemUnion{
		GetConnectorFormItem2: &getConnectorFormItem2,
		Type:                  typ,
	}
}

func CreateGetConnectorFormItemUnionGetConnectorFormItem3(getConnectorFormItem3 GetConnectorFormItem3) GetConnectorFormItemUnion {
	typ := GetConnectorFormItemUnionTypeGetConnectorFormItem3

	return GetConnectorFormItemUnion{
		GetConnectorFormItem3: &getConnectorFormItem3,
		Type:                  typ,
	}
}

func (u *GetConnectorFormItemUnion) UnmarshalJSON(data []byte) error {

	var getConnectorFormItem3 GetConnectorFormItem3 = GetConnectorFormItem3{}
	if err := utils.UnmarshalJSON(data, &getConnectorFormItem3, "", true, true); err == nil {
		u.GetConnectorFormItem3 = &getConnectorFormItem3
		u.Type = GetConnectorFormItemUnionTypeGetConnectorFormItem3
		return nil
	}

	var getConnectorFormItem1 GetConnectorFormItem1 = GetConnectorFormItem1{}
	if err := utils.UnmarshalJSON(data, &getConnectorFormItem1, "", true, true); err == nil {
		u.GetConnectorFormItem1 = &getConnectorFormItem1
		u.Type = GetConnectorFormItemUnionTypeGetConnectorFormItem1
		return nil
	}

	var getConnectorFormItem2 GetConnectorFormItem2 = GetConnectorFormItem2{}
	if err := utils.UnmarshalJSON(data, &getConnectorFormItem2, "", true, true); err == nil {
		u.GetConnectorFormItem2 = &getConnectorFormItem2
		u.Type = GetConnectorFormItemUnionTypeGetConnectorFormItem2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetConnectorFormItemUnion", string(data))
}

func (u GetConnectorFormItemUnion) MarshalJSON() ([]byte, error) {
	if u.GetConnectorFormItem1 != nil {
		return utils.MarshalJSON(u.GetConnectorFormItem1, "", true)
	}

	if u.GetConnectorFormItem2 != nil {
		return utils.MarshalJSON(u.GetConnectorFormItem2, "", true)
	}

	if u.GetConnectorFormItem3 != nil {
		return utils.MarshalJSON(u.GetConnectorFormItem3, "", true)
	}

	return nil, errors.New("could not marshal union type GetConnectorFormItemUnion: all fields are null")
}

type GetConnectorPlatform string

const (
	GetConnectorPlatformNative    GetConnectorPlatform = "Native"
	GetConnectorPlatformUniversal GetConnectorPlatform = "Universal"
	GetConnectorPlatformWeb       GetConnectorPlatform = "Web"
)

func (e GetConnectorPlatform) ToPointer() *GetConnectorPlatform {
	return &e
}
func (e *GetConnectorPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "Universal":
		fallthrough
	case "Web":
		*e = GetConnectorPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectorPlatform: %v", v)
	}
}

type GetConnectorType string

const (
	GetConnectorTypeEmail  GetConnectorType = "Email"
	GetConnectorTypeSms    GetConnectorType = "Sms"
	GetConnectorTypeSocial GetConnectorType = "Social"
)

func (e GetConnectorType) ToPointer() *GetConnectorType {
	return &e
}
func (e *GetConnectorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Email":
		fallthrough
	case "Sms":
		fallthrough
	case "Social":
		*e = GetConnectorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectorType: %v", v)
	}
}

// GetConnectorResponseBody - The connector data.
type GetConnectorResponseBody struct {
	ID          string `json:"id"`
	SyncProfile bool   `json:"syncProfile"`
	// arbitrary
	Config      map[string]any       `json:"config"`
	Metadata    GetConnectorMetadata `json:"metadata"`
	ConnectorID string               `json:"connectorId"`
	Target      string               `json:"target"`
	// Validator function
	Name GetConnectorName `json:"name"`
	// Validator function
	Description    GetConnectorDescription     `json:"description"`
	Logo           string                      `json:"logo"`
	LogoDark       *string                     `json:"logoDark"`
	Readme         string                      `json:"readme"`
	ConfigTemplate *string                     `json:"configTemplate,omitempty"`
	FormItems      []GetConnectorFormItemUnion `json:"formItems,omitempty"`
	CustomData     map[string]any              `json:"customData,omitempty"`
	FromEmail      *string                     `json:"fromEmail,omitempty"`
	Platform       *GetConnectorPlatform       `json:"platform"`
	IsStandard     *bool                       `json:"isStandard,omitempty"`
	Type           GetConnectorType            `json:"type"`
	IsDemo         *bool                       `json:"isDemo,omitempty"`
	ExtraInfo      map[string]any              `json:"extraInfo,omitempty"`
	Usage          *float64                    `json:"usage,omitempty"`
}

func (o *GetConnectorResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConnectorResponseBody) GetSyncProfile() bool {
	if o == nil {
		return false
	}
	return o.SyncProfile
}

func (o *GetConnectorResponseBody) GetConfig() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Config
}

func (o *GetConnectorResponseBody) GetMetadata() GetConnectorMetadata {
	if o == nil {
		return GetConnectorMetadata{}
	}
	return o.Metadata
}

func (o *GetConnectorResponseBody) GetConnectorID() string {
	if o == nil {
		return ""
	}
	return o.ConnectorID
}

func (o *GetConnectorResponseBody) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *GetConnectorResponseBody) GetName() GetConnectorName {
	if o == nil {
		return GetConnectorName{}
	}
	return o.Name
}

func (o *GetConnectorResponseBody) GetDescription() GetConnectorDescription {
	if o == nil {
		return GetConnectorDescription{}
	}
	return o.Description
}

func (o *GetConnectorResponseBody) GetLogo() string {
	if o == nil {
		return ""
	}
	return o.Logo
}

func (o *GetConnectorResponseBody) GetLogoDark() *string {
	if o == nil {
		return nil
	}
	return o.LogoDark
}

func (o *GetConnectorResponseBody) GetReadme() string {
	if o == nil {
		return ""
	}
	return o.Readme
}

func (o *GetConnectorResponseBody) GetConfigTemplate() *string {
	if o == nil {
		return nil
	}
	return o.ConfigTemplate
}

func (o *GetConnectorResponseBody) GetFormItems() []GetConnectorFormItemUnion {
	if o == nil {
		return nil
	}
	return o.FormItems
}

func (o *GetConnectorResponseBody) GetCustomData() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *GetConnectorResponseBody) GetFromEmail() *string {
	if o == nil {
		return nil
	}
	return o.FromEmail
}

func (o *GetConnectorResponseBody) GetPlatform() *GetConnectorPlatform {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *GetConnectorResponseBody) GetIsStandard() *bool {
	if o == nil {
		return nil
	}
	return o.IsStandard
}

func (o *GetConnectorResponseBody) GetType() GetConnectorType {
	if o == nil {
		return GetConnectorType("")
	}
	return o.Type
}

func (o *GetConnectorResponseBody) GetIsDemo() *bool {
	if o == nil {
		return nil
	}
	return o.IsDemo
}

func (o *GetConnectorResponseBody) GetExtraInfo() map[string]any {
	if o == nil {
		return nil
	}
	return o.ExtraInfo
}

func (o *GetConnectorResponseBody) GetUsage() *float64 {
	if o == nil {
		return nil
	}
	return o.Usage
}

type GetConnectorResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The connector data.
	Object *GetConnectorResponseBody
}

func (o *GetConnectorResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetConnectorResponse) GetObject() *GetConnectorResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
