// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type TestJwtCustomizerAud2Type string

const (
	TestJwtCustomizerAud2TypeStr        TestJwtCustomizerAud2Type = "str"
	TestJwtCustomizerAud2TypeArrayOfStr TestJwtCustomizerAud2Type = "arrayOfStr"
)

type TestJwtCustomizerAud2 struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type TestJwtCustomizerAud2Type
}

func CreateTestJwtCustomizerAud2Str(str string) TestJwtCustomizerAud2 {
	typ := TestJwtCustomizerAud2TypeStr

	return TestJwtCustomizerAud2{
		Str:  &str,
		Type: typ,
	}
}

func CreateTestJwtCustomizerAud2ArrayOfStr(arrayOfStr []string) TestJwtCustomizerAud2 {
	typ := TestJwtCustomizerAud2TypeArrayOfStr

	return TestJwtCustomizerAud2{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *TestJwtCustomizerAud2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TestJwtCustomizerAud2TypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = TestJwtCustomizerAud2TypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TestJwtCustomizerAud2", string(data))
}

func (u TestJwtCustomizerAud2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type TestJwtCustomizerAud2: all fields are null")
}

type Token2 struct {
	Jti      *string                `json:"jti,omitempty"`
	Aud      *TestJwtCustomizerAud2 `json:"aud,omitempty"`
	Scope    *string                `json:"scope,omitempty"`
	ClientID *string                `json:"clientId,omitempty"`
	Kind     *string                `json:"kind,omitempty"`
}

func (o *Token2) GetJti() *string {
	if o == nil {
		return nil
	}
	return o.Jti
}

func (o *Token2) GetAud() *TestJwtCustomizerAud2 {
	if o == nil {
		return nil
	}
	return o.Aud
}

func (o *Token2) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *Token2) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *Token2) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

type TestJwtCustomizerPayload2 struct {
	// The code snippet of the JWT customizer.
	Script any `json:"script,omitempty"`
	// The environment variables for the JWT customizer.
	EnvironmentVariables any `json:"environmentVariables,omitempty"`
	// The sample context for the JWT customizer script testing purpose.
	ContextSample any `json:"contextSample,omitempty"`
	// The sample token payload for the JWT customizer script testing purpose.
	TokenSample any `json:"tokenSample,omitempty"`
}

func (o *TestJwtCustomizerPayload2) GetScript() any {
	if o == nil {
		return nil
	}
	return o.Script
}

func (o *TestJwtCustomizerPayload2) GetEnvironmentVariables() any {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *TestJwtCustomizerPayload2) GetContextSample() any {
	if o == nil {
		return nil
	}
	return o.ContextSample
}

func (o *TestJwtCustomizerPayload2) GetTokenSample() any {
	if o == nil {
		return nil
	}
	return o.TokenSample
}

type TestJwtCustomizerRequestBody2 struct {
	// The token type to test the JWT customizer for.
	TokenType            any                        `json:"tokenType"`
	EnvironmentVariables map[string]string          `json:"environmentVariables,omitempty"`
	Script               string                     `json:"script"`
	Token                Token2                     `json:"token"`
	Payload              *TestJwtCustomizerPayload2 `json:"payload,omitempty"`
}

func (o *TestJwtCustomizerRequestBody2) GetTokenType() any {
	if o == nil {
		return nil
	}
	return o.TokenType
}

func (o *TestJwtCustomizerRequestBody2) GetEnvironmentVariables() map[string]string {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *TestJwtCustomizerRequestBody2) GetScript() string {
	if o == nil {
		return ""
	}
	return o.Script
}

func (o *TestJwtCustomizerRequestBody2) GetToken() Token2 {
	if o == nil {
		return Token2{}
	}
	return o.Token
}

func (o *TestJwtCustomizerRequestBody2) GetPayload() *TestJwtCustomizerPayload2 {
	if o == nil {
		return nil
	}
	return o.Payload
}

type TestJwtCustomizerAud1Type string

const (
	TestJwtCustomizerAud1TypeStr        TestJwtCustomizerAud1Type = "str"
	TestJwtCustomizerAud1TypeArrayOfStr TestJwtCustomizerAud1Type = "arrayOfStr"
)

type TestJwtCustomizerAud1 struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type TestJwtCustomizerAud1Type
}

func CreateTestJwtCustomizerAud1Str(str string) TestJwtCustomizerAud1 {
	typ := TestJwtCustomizerAud1TypeStr

	return TestJwtCustomizerAud1{
		Str:  &str,
		Type: typ,
	}
}

func CreateTestJwtCustomizerAud1ArrayOfStr(arrayOfStr []string) TestJwtCustomizerAud1 {
	typ := TestJwtCustomizerAud1TypeArrayOfStr

	return TestJwtCustomizerAud1{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *TestJwtCustomizerAud1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TestJwtCustomizerAud1TypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = TestJwtCustomizerAud1TypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TestJwtCustomizerAud1", string(data))
}

func (u TestJwtCustomizerAud1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type TestJwtCustomizerAud1: all fields are null")
}

type Token1 struct {
	Jti                *string                `json:"jti,omitempty"`
	Aud                *TestJwtCustomizerAud1 `json:"aud,omitempty"`
	Scope              *string                `json:"scope,omitempty"`
	ClientID           *string                `json:"clientId,omitempty"`
	AccountID          *string                `json:"accountId,omitempty"`
	ExpiresWithSession *bool                  `json:"expiresWithSession,omitempty"`
	GrantID            *string                `json:"grantId,omitempty"`
	Gty                *string                `json:"gty,omitempty"`
	SessionUID         *string                `json:"sessionUid,omitempty"`
	Sid                *string                `json:"sid,omitempty"`
	Kind               *string                `json:"kind,omitempty"`
}

func (o *Token1) GetJti() *string {
	if o == nil {
		return nil
	}
	return o.Jti
}

func (o *Token1) GetAud() *TestJwtCustomizerAud1 {
	if o == nil {
		return nil
	}
	return o.Aud
}

func (o *Token1) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *Token1) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *Token1) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Token1) GetExpiresWithSession() *bool {
	if o == nil {
		return nil
	}
	return o.ExpiresWithSession
}

func (o *Token1) GetGrantID() *string {
	if o == nil {
		return nil
	}
	return o.GrantID
}

func (o *Token1) GetGty() *string {
	if o == nil {
		return nil
	}
	return o.Gty
}

func (o *Token1) GetSessionUID() *string {
	if o == nil {
		return nil
	}
	return o.SessionUID
}

func (o *Token1) GetSid() *string {
	if o == nil {
		return nil
	}
	return o.Sid
}

func (o *Token1) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

// TestJwtCustomizerCustomData - arbitrary
type TestJwtCustomizerCustomData struct {
}

// TestJwtCustomizerDetails - arbitrary
type TestJwtCustomizerDetails struct {
}

type TestJwtCustomizerIdentities struct {
	UserID string `json:"userId"`
	// arbitrary
	Details *TestJwtCustomizerDetails `json:"details,omitempty"`
}

func (o *TestJwtCustomizerIdentities) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *TestJwtCustomizerIdentities) GetDetails() *TestJwtCustomizerDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

type TestJwtCustomizerAddress struct {
	Formatted     *string `json:"formatted,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
	Locality      *string `json:"locality,omitempty"`
	Region        *string `json:"region,omitempty"`
	PostalCode    *string `json:"postalCode,omitempty"`
	Country       *string `json:"country,omitempty"`
}

func (o *TestJwtCustomizerAddress) GetFormatted() *string {
	if o == nil {
		return nil
	}
	return o.Formatted
}

func (o *TestJwtCustomizerAddress) GetStreetAddress() *string {
	if o == nil {
		return nil
	}
	return o.StreetAddress
}

func (o *TestJwtCustomizerAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *TestJwtCustomizerAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *TestJwtCustomizerAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *TestJwtCustomizerAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

type TestJwtCustomizerProfile struct {
	FamilyName        *string                   `json:"familyName,omitempty"`
	GivenName         *string                   `json:"givenName,omitempty"`
	MiddleName        *string                   `json:"middleName,omitempty"`
	Nickname          *string                   `json:"nickname,omitempty"`
	PreferredUsername *string                   `json:"preferredUsername,omitempty"`
	Profile           *string                   `json:"profile,omitempty"`
	Website           *string                   `json:"website,omitempty"`
	Gender            *string                   `json:"gender,omitempty"`
	Birthdate         *string                   `json:"birthdate,omitempty"`
	Zoneinfo          *string                   `json:"zoneinfo,omitempty"`
	Locale            *string                   `json:"locale,omitempty"`
	Address           *TestJwtCustomizerAddress `json:"address,omitempty"`
}

func (o *TestJwtCustomizerProfile) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *TestJwtCustomizerProfile) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *TestJwtCustomizerProfile) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *TestJwtCustomizerProfile) GetNickname() *string {
	if o == nil {
		return nil
	}
	return o.Nickname
}

func (o *TestJwtCustomizerProfile) GetPreferredUsername() *string {
	if o == nil {
		return nil
	}
	return o.PreferredUsername
}

func (o *TestJwtCustomizerProfile) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *TestJwtCustomizerProfile) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *TestJwtCustomizerProfile) GetGender() *string {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *TestJwtCustomizerProfile) GetBirthdate() *string {
	if o == nil {
		return nil
	}
	return o.Birthdate
}

func (o *TestJwtCustomizerProfile) GetZoneinfo() *string {
	if o == nil {
		return nil
	}
	return o.Zoneinfo
}

func (o *TestJwtCustomizerProfile) GetLocale() *string {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *TestJwtCustomizerProfile) GetAddress() *TestJwtCustomizerAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

// TestJwtCustomizerDetail - arbitrary
type TestJwtCustomizerDetail struct {
}

type TestJwtCustomizerSsoIdentity struct {
	Issuer     string `json:"issuer"`
	IdentityID string `json:"identityId"`
	// arbitrary
	Detail TestJwtCustomizerDetail `json:"detail"`
}

func (o *TestJwtCustomizerSsoIdentity) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *TestJwtCustomizerSsoIdentity) GetIdentityID() string {
	if o == nil {
		return ""
	}
	return o.IdentityID
}

func (o *TestJwtCustomizerSsoIdentity) GetDetail() TestJwtCustomizerDetail {
	if o == nil {
		return TestJwtCustomizerDetail{}
	}
	return o.Detail
}

type TestJwtCustomizerMfaVerificationFactor string

const (
	TestJwtCustomizerMfaVerificationFactorTotp       TestJwtCustomizerMfaVerificationFactor = "Totp"
	TestJwtCustomizerMfaVerificationFactorWebAuthn   TestJwtCustomizerMfaVerificationFactor = "WebAuthn"
	TestJwtCustomizerMfaVerificationFactorBackupCode TestJwtCustomizerMfaVerificationFactor = "BackupCode"
)

func (e TestJwtCustomizerMfaVerificationFactor) ToPointer() *TestJwtCustomizerMfaVerificationFactor {
	return &e
}
func (e *TestJwtCustomizerMfaVerificationFactor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Totp":
		fallthrough
	case "WebAuthn":
		fallthrough
	case "BackupCode":
		*e = TestJwtCustomizerMfaVerificationFactor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestJwtCustomizerMfaVerificationFactor: %v", v)
	}
}

type TestJwtCustomizerResource struct {
	TenantID       string  `json:"tenantId"`
	ID             string  `json:"id"`
	Name           string  `json:"name"`
	Indicator      string  `json:"indicator"`
	IsDefault      bool    `json:"isDefault"`
	AccessTokenTTL float64 `json:"accessTokenTtl"`
}

func (o *TestJwtCustomizerResource) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *TestJwtCustomizerResource) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TestJwtCustomizerResource) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TestJwtCustomizerResource) GetIndicator() string {
	if o == nil {
		return ""
	}
	return o.Indicator
}

func (o *TestJwtCustomizerResource) GetIsDefault() bool {
	if o == nil {
		return false
	}
	return o.IsDefault
}

func (o *TestJwtCustomizerResource) GetAccessTokenTTL() float64 {
	if o == nil {
		return 0.0
	}
	return o.AccessTokenTTL
}

type TestJwtCustomizerScope struct {
	ID          string                    `json:"id"`
	Name        string                    `json:"name"`
	Description *string                   `json:"description"`
	ResourceID  string                    `json:"resourceId"`
	Resource    TestJwtCustomizerResource `json:"resource"`
}

func (o *TestJwtCustomizerScope) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TestJwtCustomizerScope) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TestJwtCustomizerScope) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TestJwtCustomizerScope) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

func (o *TestJwtCustomizerScope) GetResource() TestJwtCustomizerResource {
	if o == nil {
		return TestJwtCustomizerResource{}
	}
	return o.Resource
}

type TestJwtCustomizerRole struct {
	ID          string                   `json:"id"`
	Name        string                   `json:"name"`
	Description string                   `json:"description"`
	Scopes      []TestJwtCustomizerScope `json:"scopes"`
}

func (o *TestJwtCustomizerRole) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TestJwtCustomizerRole) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TestJwtCustomizerRole) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *TestJwtCustomizerRole) GetScopes() []TestJwtCustomizerScope {
	if o == nil {
		return []TestJwtCustomizerScope{}
	}
	return o.Scopes
}

type TestJwtCustomizerOrganization struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (o *TestJwtCustomizerOrganization) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TestJwtCustomizerOrganization) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TestJwtCustomizerOrganization) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type TestJwtCustomizerOrganizationRole struct {
	OrganizationID string `json:"organizationId"`
	RoleID         string `json:"roleId"`
	RoleName       string `json:"roleName"`
}

func (o *TestJwtCustomizerOrganizationRole) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *TestJwtCustomizerOrganizationRole) GetRoleID() string {
	if o == nil {
		return ""
	}
	return o.RoleID
}

func (o *TestJwtCustomizerOrganizationRole) GetRoleName() string {
	if o == nil {
		return ""
	}
	return o.RoleName
}

type TestJwtCustomizerUser struct {
	ID           *string `json:"id,omitempty"`
	Username     *string `json:"username,omitempty"`
	PrimaryEmail *string `json:"primaryEmail,omitempty"`
	PrimaryPhone *string `json:"primaryPhone,omitempty"`
	Name         *string `json:"name,omitempty"`
	Avatar       *string `json:"avatar,omitempty"`
	// arbitrary
	CustomData             *TestJwtCustomizerCustomData             `json:"customData,omitempty"`
	Identities             map[string]TestJwtCustomizerIdentities   `json:"identities,omitempty"`
	LastSignInAt           *float64                                 `json:"lastSignInAt,omitempty"`
	CreatedAt              *float64                                 `json:"createdAt,omitempty"`
	UpdatedAt              *float64                                 `json:"updatedAt,omitempty"`
	Profile                *TestJwtCustomizerProfile                `json:"profile,omitempty"`
	ApplicationID          *string                                  `json:"applicationId,omitempty"`
	IsSuspended            *bool                                    `json:"isSuspended,omitempty"`
	HasPassword            *bool                                    `json:"hasPassword,omitempty"`
	SsoIdentities          []TestJwtCustomizerSsoIdentity           `json:"ssoIdentities,omitempty"`
	MfaVerificationFactors []TestJwtCustomizerMfaVerificationFactor `json:"mfaVerificationFactors,omitempty"`
	Roles                  []TestJwtCustomizerRole                  `json:"roles,omitempty"`
	Organizations          []TestJwtCustomizerOrganization          `json:"organizations,omitempty"`
	OrganizationRoles      []TestJwtCustomizerOrganizationRole      `json:"organizationRoles,omitempty"`
}

func (o *TestJwtCustomizerUser) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TestJwtCustomizerUser) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *TestJwtCustomizerUser) GetPrimaryEmail() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryEmail
}

func (o *TestJwtCustomizerUser) GetPrimaryPhone() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryPhone
}

func (o *TestJwtCustomizerUser) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TestJwtCustomizerUser) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *TestJwtCustomizerUser) GetCustomData() *TestJwtCustomizerCustomData {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *TestJwtCustomizerUser) GetIdentities() map[string]TestJwtCustomizerIdentities {
	if o == nil {
		return nil
	}
	return o.Identities
}

func (o *TestJwtCustomizerUser) GetLastSignInAt() *float64 {
	if o == nil {
		return nil
	}
	return o.LastSignInAt
}

func (o *TestJwtCustomizerUser) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *TestJwtCustomizerUser) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *TestJwtCustomizerUser) GetProfile() *TestJwtCustomizerProfile {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *TestJwtCustomizerUser) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *TestJwtCustomizerUser) GetIsSuspended() *bool {
	if o == nil {
		return nil
	}
	return o.IsSuspended
}

func (o *TestJwtCustomizerUser) GetHasPassword() *bool {
	if o == nil {
		return nil
	}
	return o.HasPassword
}

func (o *TestJwtCustomizerUser) GetSsoIdentities() []TestJwtCustomizerSsoIdentity {
	if o == nil {
		return nil
	}
	return o.SsoIdentities
}

func (o *TestJwtCustomizerUser) GetMfaVerificationFactors() []TestJwtCustomizerMfaVerificationFactor {
	if o == nil {
		return nil
	}
	return o.MfaVerificationFactors
}

func (o *TestJwtCustomizerUser) GetRoles() []TestJwtCustomizerRole {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *TestJwtCustomizerUser) GetOrganizations() []TestJwtCustomizerOrganization {
	if o == nil {
		return nil
	}
	return o.Organizations
}

func (o *TestJwtCustomizerUser) GetOrganizationRoles() []TestJwtCustomizerOrganizationRole {
	if o == nil {
		return nil
	}
	return o.OrganizationRoles
}

// TestJwtCustomizerSubjectTokenContext - arbitrary
type TestJwtCustomizerSubjectTokenContext struct {
}

type TestJwtCustomizerGrant struct {
	Type *string `json:"type,omitempty"`
	// arbitrary
	SubjectTokenContext *TestJwtCustomizerSubjectTokenContext `json:"subjectTokenContext,omitempty"`
}

func (o *TestJwtCustomizerGrant) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TestJwtCustomizerGrant) GetSubjectTokenContext() *TestJwtCustomizerSubjectTokenContext {
	if o == nil {
		return nil
	}
	return o.SubjectTokenContext
}

type TestJwtCustomizerContext struct {
	User  TestJwtCustomizerUser   `json:"user"`
	Grant *TestJwtCustomizerGrant `json:"grant,omitempty"`
}

func (o *TestJwtCustomizerContext) GetUser() TestJwtCustomizerUser {
	if o == nil {
		return TestJwtCustomizerUser{}
	}
	return o.User
}

func (o *TestJwtCustomizerContext) GetGrant() *TestJwtCustomizerGrant {
	if o == nil {
		return nil
	}
	return o.Grant
}

type TestJwtCustomizerPayload1 struct {
	// The code snippet of the JWT customizer.
	Script any `json:"script,omitempty"`
	// The environment variables for the JWT customizer.
	EnvironmentVariables any `json:"environmentVariables,omitempty"`
	// The sample context for the JWT customizer script testing purpose.
	ContextSample any `json:"contextSample,omitempty"`
	// The sample token payload for the JWT customizer script testing purpose.
	TokenSample any `json:"tokenSample,omitempty"`
}

func (o *TestJwtCustomizerPayload1) GetScript() any {
	if o == nil {
		return nil
	}
	return o.Script
}

func (o *TestJwtCustomizerPayload1) GetEnvironmentVariables() any {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *TestJwtCustomizerPayload1) GetContextSample() any {
	if o == nil {
		return nil
	}
	return o.ContextSample
}

func (o *TestJwtCustomizerPayload1) GetTokenSample() any {
	if o == nil {
		return nil
	}
	return o.TokenSample
}

type TestJwtCustomizerRequestBody1 struct {
	// The token type to test the JWT customizer for.
	TokenType            any                        `json:"tokenType"`
	EnvironmentVariables map[string]string          `json:"environmentVariables,omitempty"`
	Script               string                     `json:"script"`
	Token                Token1                     `json:"token"`
	Context              TestJwtCustomizerContext   `json:"context"`
	Payload              *TestJwtCustomizerPayload1 `json:"payload,omitempty"`
}

func (o *TestJwtCustomizerRequestBody1) GetTokenType() any {
	if o == nil {
		return nil
	}
	return o.TokenType
}

func (o *TestJwtCustomizerRequestBody1) GetEnvironmentVariables() map[string]string {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *TestJwtCustomizerRequestBody1) GetScript() string {
	if o == nil {
		return ""
	}
	return o.Script
}

func (o *TestJwtCustomizerRequestBody1) GetToken() Token1 {
	if o == nil {
		return Token1{}
	}
	return o.Token
}

func (o *TestJwtCustomizerRequestBody1) GetContext() TestJwtCustomizerContext {
	if o == nil {
		return TestJwtCustomizerContext{}
	}
	return o.Context
}

func (o *TestJwtCustomizerRequestBody1) GetPayload() *TestJwtCustomizerPayload1 {
	if o == nil {
		return nil
	}
	return o.Payload
}

type TestJwtCustomizerRequestType string

const (
	TestJwtCustomizerRequestTypeTestJwtCustomizerRequestBody1 TestJwtCustomizerRequestType = "TestJwtCustomizer_RequestBody_1"
	TestJwtCustomizerRequestTypeTestJwtCustomizerRequestBody2 TestJwtCustomizerRequestType = "TestJwtCustomizer_RequestBody_2"
)

type TestJwtCustomizerRequest struct {
	TestJwtCustomizerRequestBody1 *TestJwtCustomizerRequestBody1 `queryParam:"inline"`
	TestJwtCustomizerRequestBody2 *TestJwtCustomizerRequestBody2 `queryParam:"inline"`

	Type TestJwtCustomizerRequestType
}

func CreateTestJwtCustomizerRequestTestJwtCustomizerRequestBody1(testJwtCustomizerRequestBody1 TestJwtCustomizerRequestBody1) TestJwtCustomizerRequest {
	typ := TestJwtCustomizerRequestTypeTestJwtCustomizerRequestBody1

	return TestJwtCustomizerRequest{
		TestJwtCustomizerRequestBody1: &testJwtCustomizerRequestBody1,
		Type:                          typ,
	}
}

func CreateTestJwtCustomizerRequestTestJwtCustomizerRequestBody2(testJwtCustomizerRequestBody2 TestJwtCustomizerRequestBody2) TestJwtCustomizerRequest {
	typ := TestJwtCustomizerRequestTypeTestJwtCustomizerRequestBody2

	return TestJwtCustomizerRequest{
		TestJwtCustomizerRequestBody2: &testJwtCustomizerRequestBody2,
		Type:                          typ,
	}
}

func (u *TestJwtCustomizerRequest) UnmarshalJSON(data []byte) error {

	var testJwtCustomizerRequestBody2 TestJwtCustomizerRequestBody2 = TestJwtCustomizerRequestBody2{}
	if err := utils.UnmarshalJSON(data, &testJwtCustomizerRequestBody2, "", true, true); err == nil {
		u.TestJwtCustomizerRequestBody2 = &testJwtCustomizerRequestBody2
		u.Type = TestJwtCustomizerRequestTypeTestJwtCustomizerRequestBody2
		return nil
	}

	var testJwtCustomizerRequestBody1 TestJwtCustomizerRequestBody1 = TestJwtCustomizerRequestBody1{}
	if err := utils.UnmarshalJSON(data, &testJwtCustomizerRequestBody1, "", true, true); err == nil {
		u.TestJwtCustomizerRequestBody1 = &testJwtCustomizerRequestBody1
		u.Type = TestJwtCustomizerRequestTypeTestJwtCustomizerRequestBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TestJwtCustomizerRequest", string(data))
}

func (u TestJwtCustomizerRequest) MarshalJSON() ([]byte, error) {
	if u.TestJwtCustomizerRequestBody1 != nil {
		return utils.MarshalJSON(u.TestJwtCustomizerRequestBody1, "", true)
	}

	if u.TestJwtCustomizerRequestBody2 != nil {
		return utils.MarshalJSON(u.TestJwtCustomizerRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type TestJwtCustomizerRequest: all fields are null")
}

// TestJwtCustomizerResponseBody - arbitrary
type TestJwtCustomizerResponseBody struct {
}

type TestJwtCustomizerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The result of the JWT customizer script testing.
	Object *TestJwtCustomizerResponseBody
}

func (o *TestJwtCustomizerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *TestJwtCustomizerResponse) GetObject() *TestJwtCustomizerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
