// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// ListEmailTemplatesQueryParamTemplateType - The type of the email template, e.g. `SignIn` or `ForgotPassword`
type ListEmailTemplatesQueryParamTemplateType string

const (
	ListEmailTemplatesQueryParamTemplateTypeSignIn                   ListEmailTemplatesQueryParamTemplateType = "SignIn"
	ListEmailTemplatesQueryParamTemplateTypeRegister                 ListEmailTemplatesQueryParamTemplateType = "Register"
	ListEmailTemplatesQueryParamTemplateTypeForgotPassword           ListEmailTemplatesQueryParamTemplateType = "ForgotPassword"
	ListEmailTemplatesQueryParamTemplateTypeOrganizationInvitation   ListEmailTemplatesQueryParamTemplateType = "OrganizationInvitation"
	ListEmailTemplatesQueryParamTemplateTypeGeneric                  ListEmailTemplatesQueryParamTemplateType = "Generic"
	ListEmailTemplatesQueryParamTemplateTypeUserPermissionValidation ListEmailTemplatesQueryParamTemplateType = "UserPermissionValidation"
	ListEmailTemplatesQueryParamTemplateTypeBindNewIdentifier        ListEmailTemplatesQueryParamTemplateType = "BindNewIdentifier"
)

func (e ListEmailTemplatesQueryParamTemplateType) ToPointer() *ListEmailTemplatesQueryParamTemplateType {
	return &e
}
func (e *ListEmailTemplatesQueryParamTemplateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SignIn":
		fallthrough
	case "Register":
		fallthrough
	case "ForgotPassword":
		fallthrough
	case "OrganizationInvitation":
		fallthrough
	case "Generic":
		fallthrough
	case "UserPermissionValidation":
		fallthrough
	case "BindNewIdentifier":
		*e = ListEmailTemplatesQueryParamTemplateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEmailTemplatesQueryParamTemplateType: %v", v)
	}
}

type ListEmailTemplatesRequest struct {
	// The language tag of the email template, e.g., `en` or `fr`.
	LanguageTag *string `queryParam:"style=form,explode=true,name=languageTag"`
	// The type of the email template, e.g. `SignIn` or `ForgotPassword`
	TemplateType *ListEmailTemplatesQueryParamTemplateType `queryParam:"style=form,explode=true,name=templateType"`
}

func (o *ListEmailTemplatesRequest) GetLanguageTag() *string {
	if o == nil {
		return nil
	}
	return o.LanguageTag
}

func (o *ListEmailTemplatesRequest) GetTemplateType() *ListEmailTemplatesQueryParamTemplateType {
	if o == nil {
		return nil
	}
	return o.TemplateType
}

type ListEmailTemplatesTemplateTypeResponse string

const (
	ListEmailTemplatesTemplateTypeResponseSignIn                   ListEmailTemplatesTemplateTypeResponse = "SignIn"
	ListEmailTemplatesTemplateTypeResponseRegister                 ListEmailTemplatesTemplateTypeResponse = "Register"
	ListEmailTemplatesTemplateTypeResponseForgotPassword           ListEmailTemplatesTemplateTypeResponse = "ForgotPassword"
	ListEmailTemplatesTemplateTypeResponseOrganizationInvitation   ListEmailTemplatesTemplateTypeResponse = "OrganizationInvitation"
	ListEmailTemplatesTemplateTypeResponseGeneric                  ListEmailTemplatesTemplateTypeResponse = "Generic"
	ListEmailTemplatesTemplateTypeResponseUserPermissionValidation ListEmailTemplatesTemplateTypeResponse = "UserPermissionValidation"
	ListEmailTemplatesTemplateTypeResponseBindNewIdentifier        ListEmailTemplatesTemplateTypeResponse = "BindNewIdentifier"
)

func (e ListEmailTemplatesTemplateTypeResponse) ToPointer() *ListEmailTemplatesTemplateTypeResponse {
	return &e
}
func (e *ListEmailTemplatesTemplateTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SignIn":
		fallthrough
	case "Register":
		fallthrough
	case "ForgotPassword":
		fallthrough
	case "OrganizationInvitation":
		fallthrough
	case "Generic":
		fallthrough
	case "UserPermissionValidation":
		fallthrough
	case "BindNewIdentifier":
		*e = ListEmailTemplatesTemplateTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEmailTemplatesTemplateTypeResponse: %v", v)
	}
}

type ListEmailTemplatesDetails struct {
	Subject     string  `json:"subject"`
	Content     string  `json:"content"`
	ContentType *string `json:"contentType,omitempty"`
	ReplyTo     *string `json:"replyTo,omitempty"`
	SendFrom    *string `json:"sendFrom,omitempty"`
}

func (o *ListEmailTemplatesDetails) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *ListEmailTemplatesDetails) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *ListEmailTemplatesDetails) GetContentType() *string {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *ListEmailTemplatesDetails) GetReplyTo() *string {
	if o == nil {
		return nil
	}
	return o.ReplyTo
}

func (o *ListEmailTemplatesDetails) GetSendFrom() *string {
	if o == nil {
		return nil
	}
	return o.SendFrom
}

type ListEmailTemplatesResponseBody struct {
	TenantID     string                                 `json:"tenantId"`
	ID           string                                 `json:"id"`
	LanguageTag  string                                 `json:"languageTag"`
	TemplateType ListEmailTemplatesTemplateTypeResponse `json:"templateType"`
	Details      ListEmailTemplatesDetails              `json:"details"`
	CreatedAt    float64                                `json:"createdAt"`
}

func (o *ListEmailTemplatesResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListEmailTemplatesResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListEmailTemplatesResponseBody) GetLanguageTag() string {
	if o == nil {
		return ""
	}
	return o.LanguageTag
}

func (o *ListEmailTemplatesResponseBody) GetTemplateType() ListEmailTemplatesTemplateTypeResponse {
	if o == nil {
		return ListEmailTemplatesTemplateTypeResponse("")
	}
	return o.TemplateType
}

func (o *ListEmailTemplatesResponseBody) GetDetails() ListEmailTemplatesDetails {
	if o == nil {
		return ListEmailTemplatesDetails{}
	}
	return o.Details
}

func (o *ListEmailTemplatesResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type ListEmailTemplatesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The list of matched email templates. Returns empty list, if no email template is found.
	ResponseBodies []ListEmailTemplatesResponseBody
}

func (o *ListEmailTemplatesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListEmailTemplatesResponse) GetResponseBodies() []ListEmailTemplatesResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
