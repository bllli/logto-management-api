// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

// GetSignInExpColor - The primary branding color for the sign-in page (both light/dark mode).
type GetSignInExpColor struct {
	PrimaryColor      string `json:"primaryColor"`
	IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
	DarkPrimaryColor  string `json:"darkPrimaryColor"`
}

func (o *GetSignInExpColor) GetPrimaryColor() string {
	if o == nil {
		return ""
	}
	return o.PrimaryColor
}

func (o *GetSignInExpColor) GetIsDarkModeEnabled() bool {
	if o == nil {
		return false
	}
	return o.IsDarkModeEnabled
}

func (o *GetSignInExpColor) GetDarkPrimaryColor() string {
	if o == nil {
		return ""
	}
	return o.DarkPrimaryColor
}

type GetSignInExpBranding struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *GetSignInExpBranding) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *GetSignInExpBranding) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *GetSignInExpBranding) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *GetSignInExpBranding) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

type GetSignInExpFallbackLanguage string

const (
	GetSignInExpFallbackLanguageAfZa  GetSignInExpFallbackLanguage = "af-ZA"
	GetSignInExpFallbackLanguageAmEt  GetSignInExpFallbackLanguage = "am-ET"
	GetSignInExpFallbackLanguageAr    GetSignInExpFallbackLanguage = "ar"
	GetSignInExpFallbackLanguageArAr  GetSignInExpFallbackLanguage = "ar-AR"
	GetSignInExpFallbackLanguageAsIn  GetSignInExpFallbackLanguage = "as-IN"
	GetSignInExpFallbackLanguageAzAz  GetSignInExpFallbackLanguage = "az-AZ"
	GetSignInExpFallbackLanguageBeBy  GetSignInExpFallbackLanguage = "be-BY"
	GetSignInExpFallbackLanguageBgBg  GetSignInExpFallbackLanguage = "bg-BG"
	GetSignInExpFallbackLanguageBnIn  GetSignInExpFallbackLanguage = "bn-IN"
	GetSignInExpFallbackLanguageBrFr  GetSignInExpFallbackLanguage = "br-FR"
	GetSignInExpFallbackLanguageBsBa  GetSignInExpFallbackLanguage = "bs-BA"
	GetSignInExpFallbackLanguageCaEs  GetSignInExpFallbackLanguage = "ca-ES"
	GetSignInExpFallbackLanguageCbIq  GetSignInExpFallbackLanguage = "cb-IQ"
	GetSignInExpFallbackLanguageCoFr  GetSignInExpFallbackLanguage = "co-FR"
	GetSignInExpFallbackLanguageCsCz  GetSignInExpFallbackLanguage = "cs-CZ"
	GetSignInExpFallbackLanguageCxPh  GetSignInExpFallbackLanguage = "cx-PH"
	GetSignInExpFallbackLanguageCyGb  GetSignInExpFallbackLanguage = "cy-GB"
	GetSignInExpFallbackLanguageDaDk  GetSignInExpFallbackLanguage = "da-DK"
	GetSignInExpFallbackLanguageDe    GetSignInExpFallbackLanguage = "de"
	GetSignInExpFallbackLanguageDeDe  GetSignInExpFallbackLanguage = "de-DE"
	GetSignInExpFallbackLanguageElGr  GetSignInExpFallbackLanguage = "el-GR"
	GetSignInExpFallbackLanguageEn    GetSignInExpFallbackLanguage = "en"
	GetSignInExpFallbackLanguageEnGb  GetSignInExpFallbackLanguage = "en-GB"
	GetSignInExpFallbackLanguageEnUs  GetSignInExpFallbackLanguage = "en-US"
	GetSignInExpFallbackLanguageEoEo  GetSignInExpFallbackLanguage = "eo-EO"
	GetSignInExpFallbackLanguageEs    GetSignInExpFallbackLanguage = "es"
	GetSignInExpFallbackLanguageEsEs  GetSignInExpFallbackLanguage = "es-ES"
	GetSignInExpFallbackLanguageEs419 GetSignInExpFallbackLanguage = "es-419"
	GetSignInExpFallbackLanguageEtEe  GetSignInExpFallbackLanguage = "et-EE"
	GetSignInExpFallbackLanguageEuEs  GetSignInExpFallbackLanguage = "eu-ES"
	GetSignInExpFallbackLanguageFaIr  GetSignInExpFallbackLanguage = "fa-IR"
	GetSignInExpFallbackLanguageFfNg  GetSignInExpFallbackLanguage = "ff-NG"
	GetSignInExpFallbackLanguageFi    GetSignInExpFallbackLanguage = "fi"
	GetSignInExpFallbackLanguageFiFi  GetSignInExpFallbackLanguage = "fi-FI"
	GetSignInExpFallbackLanguageFoFo  GetSignInExpFallbackLanguage = "fo-FO"
	GetSignInExpFallbackLanguageFr    GetSignInExpFallbackLanguage = "fr"
	GetSignInExpFallbackLanguageFrCa  GetSignInExpFallbackLanguage = "fr-CA"
	GetSignInExpFallbackLanguageFrFr  GetSignInExpFallbackLanguage = "fr-FR"
	GetSignInExpFallbackLanguageFyNl  GetSignInExpFallbackLanguage = "fy-NL"
	GetSignInExpFallbackLanguageGaIe  GetSignInExpFallbackLanguage = "ga-IE"
	GetSignInExpFallbackLanguageGlEs  GetSignInExpFallbackLanguage = "gl-ES"
	GetSignInExpFallbackLanguageGnPy  GetSignInExpFallbackLanguage = "gn-PY"
	GetSignInExpFallbackLanguageGuIn  GetSignInExpFallbackLanguage = "gu-IN"
	GetSignInExpFallbackLanguageHaNg  GetSignInExpFallbackLanguage = "ha-NG"
	GetSignInExpFallbackLanguageHeIl  GetSignInExpFallbackLanguage = "he-IL"
	GetSignInExpFallbackLanguageHiIn  GetSignInExpFallbackLanguage = "hi-IN"
	GetSignInExpFallbackLanguageHrHr  GetSignInExpFallbackLanguage = "hr-HR"
	GetSignInExpFallbackLanguageHtHt  GetSignInExpFallbackLanguage = "ht-HT"
	GetSignInExpFallbackLanguageHuHu  GetSignInExpFallbackLanguage = "hu-HU"
	GetSignInExpFallbackLanguageHyAm  GetSignInExpFallbackLanguage = "hy-AM"
	GetSignInExpFallbackLanguageIDID  GetSignInExpFallbackLanguage = "id-ID"
	GetSignInExpFallbackLanguageIkUs  GetSignInExpFallbackLanguage = "ik-US"
	GetSignInExpFallbackLanguageIsIs  GetSignInExpFallbackLanguage = "is-IS"
	GetSignInExpFallbackLanguageIt    GetSignInExpFallbackLanguage = "it"
	GetSignInExpFallbackLanguageItIt  GetSignInExpFallbackLanguage = "it-IT"
	GetSignInExpFallbackLanguageIuCa  GetSignInExpFallbackLanguage = "iu-CA"
	GetSignInExpFallbackLanguageJa    GetSignInExpFallbackLanguage = "ja"
	GetSignInExpFallbackLanguageJaJp  GetSignInExpFallbackLanguage = "ja-JP"
	GetSignInExpFallbackLanguageJaKs  GetSignInExpFallbackLanguage = "ja-KS"
	GetSignInExpFallbackLanguageJvID  GetSignInExpFallbackLanguage = "jv-ID"
	GetSignInExpFallbackLanguageKaGe  GetSignInExpFallbackLanguage = "ka-GE"
	GetSignInExpFallbackLanguageKkKz  GetSignInExpFallbackLanguage = "kk-KZ"
	GetSignInExpFallbackLanguageKmKh  GetSignInExpFallbackLanguage = "km-KH"
	GetSignInExpFallbackLanguageKnIn  GetSignInExpFallbackLanguage = "kn-IN"
	GetSignInExpFallbackLanguageKo    GetSignInExpFallbackLanguage = "ko"
	GetSignInExpFallbackLanguageKoKr  GetSignInExpFallbackLanguage = "ko-KR"
	GetSignInExpFallbackLanguageKuTr  GetSignInExpFallbackLanguage = "ku-TR"
	GetSignInExpFallbackLanguageKyKg  GetSignInExpFallbackLanguage = "ky-KG"
	GetSignInExpFallbackLanguageLoLa  GetSignInExpFallbackLanguage = "lo-LA"
	GetSignInExpFallbackLanguageLtLt  GetSignInExpFallbackLanguage = "lt-LT"
	GetSignInExpFallbackLanguageLvLv  GetSignInExpFallbackLanguage = "lv-LV"
	GetSignInExpFallbackLanguageMgMg  GetSignInExpFallbackLanguage = "mg-MG"
	GetSignInExpFallbackLanguageMkMk  GetSignInExpFallbackLanguage = "mk-MK"
	GetSignInExpFallbackLanguageMlIn  GetSignInExpFallbackLanguage = "ml-IN"
	GetSignInExpFallbackLanguageMnMn  GetSignInExpFallbackLanguage = "mn-MN"
	GetSignInExpFallbackLanguageMrIn  GetSignInExpFallbackLanguage = "mr-IN"
	GetSignInExpFallbackLanguageMsMy  GetSignInExpFallbackLanguage = "ms-MY"
	GetSignInExpFallbackLanguageMtMt  GetSignInExpFallbackLanguage = "mt-MT"
	GetSignInExpFallbackLanguageMyMm  GetSignInExpFallbackLanguage = "my-MM"
	GetSignInExpFallbackLanguageNbNo  GetSignInExpFallbackLanguage = "nb-NO"
	GetSignInExpFallbackLanguageNeNp  GetSignInExpFallbackLanguage = "ne-NP"
	GetSignInExpFallbackLanguageNl    GetSignInExpFallbackLanguage = "nl"
	GetSignInExpFallbackLanguageNlBe  GetSignInExpFallbackLanguage = "nl-BE"
	GetSignInExpFallbackLanguageNlNl  GetSignInExpFallbackLanguage = "nl-NL"
	GetSignInExpFallbackLanguageNnNo  GetSignInExpFallbackLanguage = "nn-NO"
	GetSignInExpFallbackLanguageOrIn  GetSignInExpFallbackLanguage = "or-IN"
	GetSignInExpFallbackLanguagePaIn  GetSignInExpFallbackLanguage = "pa-IN"
	GetSignInExpFallbackLanguagePlPl  GetSignInExpFallbackLanguage = "pl-PL"
	GetSignInExpFallbackLanguagePsAf  GetSignInExpFallbackLanguage = "ps-AF"
	GetSignInExpFallbackLanguagePt    GetSignInExpFallbackLanguage = "pt"
	GetSignInExpFallbackLanguagePtBr  GetSignInExpFallbackLanguage = "pt-BR"
	GetSignInExpFallbackLanguagePtPt  GetSignInExpFallbackLanguage = "pt-PT"
	GetSignInExpFallbackLanguageRoRo  GetSignInExpFallbackLanguage = "ro-RO"
	GetSignInExpFallbackLanguageRu    GetSignInExpFallbackLanguage = "ru"
	GetSignInExpFallbackLanguageRuRu  GetSignInExpFallbackLanguage = "ru-RU"
	GetSignInExpFallbackLanguageRwRw  GetSignInExpFallbackLanguage = "rw-RW"
	GetSignInExpFallbackLanguageScIt  GetSignInExpFallbackLanguage = "sc-IT"
	GetSignInExpFallbackLanguageSiLk  GetSignInExpFallbackLanguage = "si-LK"
	GetSignInExpFallbackLanguageSkSk  GetSignInExpFallbackLanguage = "sk-SK"
	GetSignInExpFallbackLanguageSlSi  GetSignInExpFallbackLanguage = "sl-SI"
	GetSignInExpFallbackLanguageSnZw  GetSignInExpFallbackLanguage = "sn-ZW"
	GetSignInExpFallbackLanguageSqAl  GetSignInExpFallbackLanguage = "sq-AL"
	GetSignInExpFallbackLanguageSrRs  GetSignInExpFallbackLanguage = "sr-RS"
	GetSignInExpFallbackLanguageSv    GetSignInExpFallbackLanguage = "sv"
	GetSignInExpFallbackLanguageSvSe  GetSignInExpFallbackLanguage = "sv-SE"
	GetSignInExpFallbackLanguageSwKe  GetSignInExpFallbackLanguage = "sw-KE"
	GetSignInExpFallbackLanguageSySy  GetSignInExpFallbackLanguage = "sy-SY"
	GetSignInExpFallbackLanguageSzPl  GetSignInExpFallbackLanguage = "sz-PL"
	GetSignInExpFallbackLanguageTaIn  GetSignInExpFallbackLanguage = "ta-IN"
	GetSignInExpFallbackLanguageTeIn  GetSignInExpFallbackLanguage = "te-IN"
	GetSignInExpFallbackLanguageTgTj  GetSignInExpFallbackLanguage = "tg-TJ"
	GetSignInExpFallbackLanguageTh    GetSignInExpFallbackLanguage = "th"
	GetSignInExpFallbackLanguageThTh  GetSignInExpFallbackLanguage = "th-TH"
	GetSignInExpFallbackLanguageTlPh  GetSignInExpFallbackLanguage = "tl-PH"
	GetSignInExpFallbackLanguageTr    GetSignInExpFallbackLanguage = "tr"
	GetSignInExpFallbackLanguageTrTr  GetSignInExpFallbackLanguage = "tr-TR"
	GetSignInExpFallbackLanguageTtRu  GetSignInExpFallbackLanguage = "tt-RU"
	GetSignInExpFallbackLanguageTzMa  GetSignInExpFallbackLanguage = "tz-MA"
	GetSignInExpFallbackLanguageUkUa  GetSignInExpFallbackLanguage = "uk-UA"
	GetSignInExpFallbackLanguageUrPk  GetSignInExpFallbackLanguage = "ur-PK"
	GetSignInExpFallbackLanguageUzUz  GetSignInExpFallbackLanguage = "uz-UZ"
	GetSignInExpFallbackLanguageViVn  GetSignInExpFallbackLanguage = "vi-VN"
	GetSignInExpFallbackLanguageZh    GetSignInExpFallbackLanguage = "zh"
	GetSignInExpFallbackLanguageZhCn  GetSignInExpFallbackLanguage = "zh-CN"
	GetSignInExpFallbackLanguageZhHk  GetSignInExpFallbackLanguage = "zh-HK"
	GetSignInExpFallbackLanguageZhMo  GetSignInExpFallbackLanguage = "zh-MO"
	GetSignInExpFallbackLanguageZhTw  GetSignInExpFallbackLanguage = "zh-TW"
	GetSignInExpFallbackLanguageZzTr  GetSignInExpFallbackLanguage = "zz-TR"
)

func (e GetSignInExpFallbackLanguage) ToPointer() *GetSignInExpFallbackLanguage {
	return &e
}
func (e *GetSignInExpFallbackLanguage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "af-ZA":
		fallthrough
	case "am-ET":
		fallthrough
	case "ar":
		fallthrough
	case "ar-AR":
		fallthrough
	case "as-IN":
		fallthrough
	case "az-AZ":
		fallthrough
	case "be-BY":
		fallthrough
	case "bg-BG":
		fallthrough
	case "bn-IN":
		fallthrough
	case "br-FR":
		fallthrough
	case "bs-BA":
		fallthrough
	case "ca-ES":
		fallthrough
	case "cb-IQ":
		fallthrough
	case "co-FR":
		fallthrough
	case "cs-CZ":
		fallthrough
	case "cx-PH":
		fallthrough
	case "cy-GB":
		fallthrough
	case "da-DK":
		fallthrough
	case "de":
		fallthrough
	case "de-DE":
		fallthrough
	case "el-GR":
		fallthrough
	case "en":
		fallthrough
	case "en-GB":
		fallthrough
	case "en-US":
		fallthrough
	case "eo-EO":
		fallthrough
	case "es":
		fallthrough
	case "es-ES":
		fallthrough
	case "es-419":
		fallthrough
	case "et-EE":
		fallthrough
	case "eu-ES":
		fallthrough
	case "fa-IR":
		fallthrough
	case "ff-NG":
		fallthrough
	case "fi":
		fallthrough
	case "fi-FI":
		fallthrough
	case "fo-FO":
		fallthrough
	case "fr":
		fallthrough
	case "fr-CA":
		fallthrough
	case "fr-FR":
		fallthrough
	case "fy-NL":
		fallthrough
	case "ga-IE":
		fallthrough
	case "gl-ES":
		fallthrough
	case "gn-PY":
		fallthrough
	case "gu-IN":
		fallthrough
	case "ha-NG":
		fallthrough
	case "he-IL":
		fallthrough
	case "hi-IN":
		fallthrough
	case "hr-HR":
		fallthrough
	case "ht-HT":
		fallthrough
	case "hu-HU":
		fallthrough
	case "hy-AM":
		fallthrough
	case "id-ID":
		fallthrough
	case "ik-US":
		fallthrough
	case "is-IS":
		fallthrough
	case "it":
		fallthrough
	case "it-IT":
		fallthrough
	case "iu-CA":
		fallthrough
	case "ja":
		fallthrough
	case "ja-JP":
		fallthrough
	case "ja-KS":
		fallthrough
	case "jv-ID":
		fallthrough
	case "ka-GE":
		fallthrough
	case "kk-KZ":
		fallthrough
	case "km-KH":
		fallthrough
	case "kn-IN":
		fallthrough
	case "ko":
		fallthrough
	case "ko-KR":
		fallthrough
	case "ku-TR":
		fallthrough
	case "ky-KG":
		fallthrough
	case "lo-LA":
		fallthrough
	case "lt-LT":
		fallthrough
	case "lv-LV":
		fallthrough
	case "mg-MG":
		fallthrough
	case "mk-MK":
		fallthrough
	case "ml-IN":
		fallthrough
	case "mn-MN":
		fallthrough
	case "mr-IN":
		fallthrough
	case "ms-MY":
		fallthrough
	case "mt-MT":
		fallthrough
	case "my-MM":
		fallthrough
	case "nb-NO":
		fallthrough
	case "ne-NP":
		fallthrough
	case "nl":
		fallthrough
	case "nl-BE":
		fallthrough
	case "nl-NL":
		fallthrough
	case "nn-NO":
		fallthrough
	case "or-IN":
		fallthrough
	case "pa-IN":
		fallthrough
	case "pl-PL":
		fallthrough
	case "ps-AF":
		fallthrough
	case "pt":
		fallthrough
	case "pt-BR":
		fallthrough
	case "pt-PT":
		fallthrough
	case "ro-RO":
		fallthrough
	case "ru":
		fallthrough
	case "ru-RU":
		fallthrough
	case "rw-RW":
		fallthrough
	case "sc-IT":
		fallthrough
	case "si-LK":
		fallthrough
	case "sk-SK":
		fallthrough
	case "sl-SI":
		fallthrough
	case "sn-ZW":
		fallthrough
	case "sq-AL":
		fallthrough
	case "sr-RS":
		fallthrough
	case "sv":
		fallthrough
	case "sv-SE":
		fallthrough
	case "sw-KE":
		fallthrough
	case "sy-SY":
		fallthrough
	case "sz-PL":
		fallthrough
	case "ta-IN":
		fallthrough
	case "te-IN":
		fallthrough
	case "tg-TJ":
		fallthrough
	case "th":
		fallthrough
	case "th-TH":
		fallthrough
	case "tl-PH":
		fallthrough
	case "tr":
		fallthrough
	case "tr-TR":
		fallthrough
	case "tt-RU":
		fallthrough
	case "tz-MA":
		fallthrough
	case "uk-UA":
		fallthrough
	case "ur-PK":
		fallthrough
	case "uz-UZ":
		fallthrough
	case "vi-VN":
		fallthrough
	case "zh":
		fallthrough
	case "zh-CN":
		fallthrough
	case "zh-HK":
		fallthrough
	case "zh-MO":
		fallthrough
	case "zh-TW":
		fallthrough
	case "zz-TR":
		*e = GetSignInExpFallbackLanguage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExpFallbackLanguage: %v", v)
	}
}

// GetSignInExpLanguageInfo - The language detection policy for the sign-in page.
type GetSignInExpLanguageInfo struct {
	AutoDetect       bool                         `json:"autoDetect"`
	FallbackLanguage GetSignInExpFallbackLanguage `json:"fallbackLanguage"`
}

func (o *GetSignInExpLanguageInfo) GetAutoDetect() bool {
	if o == nil {
		return false
	}
	return o.AutoDetect
}

func (o *GetSignInExpLanguageInfo) GetFallbackLanguage() GetSignInExpFallbackLanguage {
	if o == nil {
		return GetSignInExpFallbackLanguage("")
	}
	return o.FallbackLanguage
}

type GetSignInExpAgreeToTermsPolicy string

const (
	GetSignInExpAgreeToTermsPolicyAutomatic              GetSignInExpAgreeToTermsPolicy = "Automatic"
	GetSignInExpAgreeToTermsPolicyManualRegistrationOnly GetSignInExpAgreeToTermsPolicy = "ManualRegistrationOnly"
	GetSignInExpAgreeToTermsPolicyManual                 GetSignInExpAgreeToTermsPolicy = "Manual"
)

func (e GetSignInExpAgreeToTermsPolicy) ToPointer() *GetSignInExpAgreeToTermsPolicy {
	return &e
}
func (e *GetSignInExpAgreeToTermsPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Automatic":
		fallthrough
	case "ManualRegistrationOnly":
		fallthrough
	case "Manual":
		*e = GetSignInExpAgreeToTermsPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExpAgreeToTermsPolicy: %v", v)
	}
}

type GetSignInExpMethodIdentifier string

const (
	GetSignInExpMethodIdentifierUsername GetSignInExpMethodIdentifier = "username"
	GetSignInExpMethodIdentifierEmail    GetSignInExpMethodIdentifier = "email"
	GetSignInExpMethodIdentifierPhone    GetSignInExpMethodIdentifier = "phone"
)

func (e GetSignInExpMethodIdentifier) ToPointer() *GetSignInExpMethodIdentifier {
	return &e
}
func (e *GetSignInExpMethodIdentifier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = GetSignInExpMethodIdentifier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExpMethodIdentifier: %v", v)
	}
}

type GetSignInExpMethod struct {
	Identifier        GetSignInExpMethodIdentifier `json:"identifier"`
	Password          bool                         `json:"password"`
	VerificationCode  bool                         `json:"verificationCode"`
	IsPasswordPrimary bool                         `json:"isPasswordPrimary"`
}

func (o *GetSignInExpMethod) GetIdentifier() GetSignInExpMethodIdentifier {
	if o == nil {
		return GetSignInExpMethodIdentifier("")
	}
	return o.Identifier
}

func (o *GetSignInExpMethod) GetPassword() bool {
	if o == nil {
		return false
	}
	return o.Password
}

func (o *GetSignInExpMethod) GetVerificationCode() bool {
	if o == nil {
		return false
	}
	return o.VerificationCode
}

func (o *GetSignInExpMethod) GetIsPasswordPrimary() bool {
	if o == nil {
		return false
	}
	return o.IsPasswordPrimary
}

// GetSignInExpSignIn - Sign-in method settings.
type GetSignInExpSignIn struct {
	Methods []GetSignInExpMethod `json:"methods"`
}

func (o *GetSignInExpSignIn) GetMethods() []GetSignInExpMethod {
	if o == nil {
		return []GetSignInExpMethod{}
	}
	return o.Methods
}

type GetSignInExpSignUpIdentifierEnum string

const (
	GetSignInExpSignUpIdentifierEnumUsername GetSignInExpSignUpIdentifierEnum = "username"
	GetSignInExpSignUpIdentifierEnumEmail    GetSignInExpSignUpIdentifierEnum = "email"
	GetSignInExpSignUpIdentifierEnumPhone    GetSignInExpSignUpIdentifierEnum = "phone"
)

func (e GetSignInExpSignUpIdentifierEnum) ToPointer() *GetSignInExpSignUpIdentifierEnum {
	return &e
}
func (e *GetSignInExpSignUpIdentifierEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = GetSignInExpSignUpIdentifierEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExpSignUpIdentifierEnum: %v", v)
	}
}

type GetSignInExpIdentifierEmailOrPhone string

const (
	GetSignInExpIdentifierEmailOrPhoneEmailOrPhone GetSignInExpIdentifierEmailOrPhone = "emailOrPhone"
)

func (e GetSignInExpIdentifierEmailOrPhone) ToPointer() *GetSignInExpIdentifierEmailOrPhone {
	return &e
}
func (e *GetSignInExpIdentifierEmailOrPhone) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "emailOrPhone":
		*e = GetSignInExpIdentifierEmailOrPhone(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExpIdentifierEmailOrPhone: %v", v)
	}
}

type GetSignInExpIdentifierSecondaryIdentifierEnum string

const (
	GetSignInExpIdentifierSecondaryIdentifierEnumUsername GetSignInExpIdentifierSecondaryIdentifierEnum = "username"
	GetSignInExpIdentifierSecondaryIdentifierEnumEmail    GetSignInExpIdentifierSecondaryIdentifierEnum = "email"
	GetSignInExpIdentifierSecondaryIdentifierEnumPhone    GetSignInExpIdentifierSecondaryIdentifierEnum = "phone"
)

func (e GetSignInExpIdentifierSecondaryIdentifierEnum) ToPointer() *GetSignInExpIdentifierSecondaryIdentifierEnum {
	return &e
}
func (e *GetSignInExpIdentifierSecondaryIdentifierEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = GetSignInExpIdentifierSecondaryIdentifierEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExpIdentifierSecondaryIdentifierEnum: %v", v)
	}
}

type GetSignInExpIdentifierUnionType string

const (
	GetSignInExpIdentifierUnionTypeGetSignInExpIdentifierSecondaryIdentifierEnum GetSignInExpIdentifierUnionType = "GetSignInExp_identifier_secondaryIdentifier_enum"
	GetSignInExpIdentifierUnionTypeGetSignInExpIdentifierEmailOrPhone            GetSignInExpIdentifierUnionType = "GetSignInExp_identifier_EmailOrPhone"
)

type GetSignInExpIdentifierUnion struct {
	GetSignInExpIdentifierSecondaryIdentifierEnum *GetSignInExpIdentifierSecondaryIdentifierEnum `queryParam:"inline"`
	GetSignInExpIdentifierEmailOrPhone            *GetSignInExpIdentifierEmailOrPhone            `queryParam:"inline"`

	Type GetSignInExpIdentifierUnionType
}

func CreateGetSignInExpIdentifierUnionGetSignInExpIdentifierSecondaryIdentifierEnum(getSignInExpIdentifierSecondaryIdentifierEnum GetSignInExpIdentifierSecondaryIdentifierEnum) GetSignInExpIdentifierUnion {
	typ := GetSignInExpIdentifierUnionTypeGetSignInExpIdentifierSecondaryIdentifierEnum

	return GetSignInExpIdentifierUnion{
		GetSignInExpIdentifierSecondaryIdentifierEnum: &getSignInExpIdentifierSecondaryIdentifierEnum,
		Type: typ,
	}
}

func CreateGetSignInExpIdentifierUnionGetSignInExpIdentifierEmailOrPhone(getSignInExpIdentifierEmailOrPhone GetSignInExpIdentifierEmailOrPhone) GetSignInExpIdentifierUnion {
	typ := GetSignInExpIdentifierUnionTypeGetSignInExpIdentifierEmailOrPhone

	return GetSignInExpIdentifierUnion{
		GetSignInExpIdentifierEmailOrPhone: &getSignInExpIdentifierEmailOrPhone,
		Type:                               typ,
	}
}

func (u *GetSignInExpIdentifierUnion) UnmarshalJSON(data []byte) error {

	var getSignInExpIdentifierSecondaryIdentifierEnum GetSignInExpIdentifierSecondaryIdentifierEnum = GetSignInExpIdentifierSecondaryIdentifierEnum("")
	if err := utils.UnmarshalJSON(data, &getSignInExpIdentifierSecondaryIdentifierEnum, "", true, true); err == nil {
		u.GetSignInExpIdentifierSecondaryIdentifierEnum = &getSignInExpIdentifierSecondaryIdentifierEnum
		u.Type = GetSignInExpIdentifierUnionTypeGetSignInExpIdentifierSecondaryIdentifierEnum
		return nil
	}

	var getSignInExpIdentifierEmailOrPhone GetSignInExpIdentifierEmailOrPhone = GetSignInExpIdentifierEmailOrPhone("")
	if err := utils.UnmarshalJSON(data, &getSignInExpIdentifierEmailOrPhone, "", true, true); err == nil {
		u.GetSignInExpIdentifierEmailOrPhone = &getSignInExpIdentifierEmailOrPhone
		u.Type = GetSignInExpIdentifierUnionTypeGetSignInExpIdentifierEmailOrPhone
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetSignInExpIdentifierUnion", string(data))
}

func (u GetSignInExpIdentifierUnion) MarshalJSON() ([]byte, error) {
	if u.GetSignInExpIdentifierSecondaryIdentifierEnum != nil {
		return utils.MarshalJSON(u.GetSignInExpIdentifierSecondaryIdentifierEnum, "", true)
	}

	if u.GetSignInExpIdentifierEmailOrPhone != nil {
		return utils.MarshalJSON(u.GetSignInExpIdentifierEmailOrPhone, "", true)
	}

	return nil, errors.New("could not marshal union type GetSignInExpIdentifierUnion: all fields are null")
}

type GetSignInExpSecondaryIdentifier struct {
	Identifier GetSignInExpIdentifierUnion `json:"identifier"`
	Verify     *bool                       `json:"verify,omitempty"`
}

func (o *GetSignInExpSecondaryIdentifier) GetIdentifier() GetSignInExpIdentifierUnion {
	if o == nil {
		return GetSignInExpIdentifierUnion{}
	}
	return o.Identifier
}

func (o *GetSignInExpSecondaryIdentifier) GetVerify() *bool {
	if o == nil {
		return nil
	}
	return o.Verify
}

// GetSignInExpSignUp - Sign-up method settings.
type GetSignInExpSignUp struct {
	// Allowed identifiers when signing-up.
	Identifiers []GetSignInExpSignUpIdentifierEnum `json:"identifiers"`
	// Whether the user is required to set a password when signing-up.
	Password bool `json:"password"`
	// Whether the user is required to verify their email/phone when signing-up.
	Verify bool `json:"verify"`
	// Additional identifiers required during sign-up. Once specified, users will be prompted to provide these identifiers when creating an account.
	SecondaryIdentifiers []GetSignInExpSecondaryIdentifier `json:"secondaryIdentifiers,omitempty"`
}

func (o *GetSignInExpSignUp) GetIdentifiers() []GetSignInExpSignUpIdentifierEnum {
	if o == nil {
		return []GetSignInExpSignUpIdentifierEnum{}
	}
	return o.Identifiers
}

func (o *GetSignInExpSignUp) GetPassword() bool {
	if o == nil {
		return false
	}
	return o.Password
}

func (o *GetSignInExpSignUp) GetVerify() bool {
	if o == nil {
		return false
	}
	return o.Verify
}

func (o *GetSignInExpSignUp) GetSecondaryIdentifiers() []GetSignInExpSecondaryIdentifier {
	if o == nil {
		return nil
	}
	return o.SecondaryIdentifiers
}

type GetSignInExpSocialSignIn struct {
	AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
}

func (o *GetSignInExpSocialSignIn) GetAutomaticAccountLinking() *bool {
	if o == nil {
		return nil
	}
	return o.AutomaticAccountLinking
}

type GetSignInExpSignInMode string

const (
	GetSignInExpSignInModeSignIn            GetSignInExpSignInMode = "SignIn"
	GetSignInExpSignInModeRegister          GetSignInExpSignInMode = "Register"
	GetSignInExpSignInModeSignInAndRegister GetSignInExpSignInMode = "SignInAndRegister"
)

func (e GetSignInExpSignInMode) ToPointer() *GetSignInExpSignInMode {
	return &e
}
func (e *GetSignInExpSignInMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SignIn":
		fallthrough
	case "Register":
		fallthrough
	case "SignInAndRegister":
		*e = GetSignInExpSignInMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExpSignInMode: %v", v)
	}
}

type GetSignInExpCustomUIAssets struct {
	ID        string  `json:"id"`
	CreatedAt float64 `json:"createdAt"`
}

func (o *GetSignInExpCustomUIAssets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSignInExpCustomUIAssets) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type GetSignInExpLength struct {
	Min *float64 `default:"8" json:"min"`
	Max *float64 `default:"256" json:"max"`
}

func (g GetSignInExpLength) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSignInExpLength) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSignInExpLength) GetMin() *float64 {
	if o == nil {
		return nil
	}
	return o.Min
}

func (o *GetSignInExpLength) GetMax() *float64 {
	if o == nil {
		return nil
	}
	return o.Max
}

type GetSignInExpCharacterTypes struct {
	Min *float64 `default:"1" json:"min"`
}

func (g GetSignInExpCharacterTypes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSignInExpCharacterTypes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSignInExpCharacterTypes) GetMin() *float64 {
	if o == nil {
		return nil
	}
	return o.Min
}

type GetSignInExpRejects struct {
	Pwned                 *bool    `default:"true" json:"pwned"`
	RepetitionAndSequence *bool    `default:"true" json:"repetitionAndSequence"`
	UserInfo              *bool    `default:"true" json:"userInfo"`
	Words                 []string `json:"words"`
}

func (g GetSignInExpRejects) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSignInExpRejects) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSignInExpRejects) GetPwned() *bool {
	if o == nil {
		return nil
	}
	return o.Pwned
}

func (o *GetSignInExpRejects) GetRepetitionAndSequence() *bool {
	if o == nil {
		return nil
	}
	return o.RepetitionAndSequence
}

func (o *GetSignInExpRejects) GetUserInfo() *bool {
	if o == nil {
		return nil
	}
	return o.UserInfo
}

func (o *GetSignInExpRejects) GetWords() []string {
	if o == nil {
		return []string{}
	}
	return o.Words
}

// GetSignInExpPasswordPolicy - Password policies to adjust the password strength requirements.
type GetSignInExpPasswordPolicy struct {
	Length         *GetSignInExpLength         `json:"length,omitempty"`
	CharacterTypes *GetSignInExpCharacterTypes `json:"characterTypes,omitempty"`
	Rejects        *GetSignInExpRejects        `json:"rejects,omitempty"`
}

func (o *GetSignInExpPasswordPolicy) GetLength() *GetSignInExpLength {
	if o == nil {
		return nil
	}
	return o.Length
}

func (o *GetSignInExpPasswordPolicy) GetCharacterTypes() *GetSignInExpCharacterTypes {
	if o == nil {
		return nil
	}
	return o.CharacterTypes
}

func (o *GetSignInExpPasswordPolicy) GetRejects() *GetSignInExpRejects {
	if o == nil {
		return nil
	}
	return o.Rejects
}

type GetSignInExpFactor string

const (
	GetSignInExpFactorTotp       GetSignInExpFactor = "Totp"
	GetSignInExpFactorWebAuthn   GetSignInExpFactor = "WebAuthn"
	GetSignInExpFactorBackupCode GetSignInExpFactor = "BackupCode"
)

func (e GetSignInExpFactor) ToPointer() *GetSignInExpFactor {
	return &e
}
func (e *GetSignInExpFactor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Totp":
		fallthrough
	case "WebAuthn":
		fallthrough
	case "BackupCode":
		*e = GetSignInExpFactor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExpFactor: %v", v)
	}
}

type GetSignInExpPolicy string

const (
	GetSignInExpPolicyUserControlled          GetSignInExpPolicy = "UserControlled"
	GetSignInExpPolicyMandatory               GetSignInExpPolicy = "Mandatory"
	GetSignInExpPolicyPromptOnlyAtSignIn      GetSignInExpPolicy = "PromptOnlyAtSignIn"
	GetSignInExpPolicyPromptAtSignInAndSignUp GetSignInExpPolicy = "PromptAtSignInAndSignUp"
	GetSignInExpPolicyNoPrompt                GetSignInExpPolicy = "NoPrompt"
)

func (e GetSignInExpPolicy) ToPointer() *GetSignInExpPolicy {
	return &e
}
func (e *GetSignInExpPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UserControlled":
		fallthrough
	case "Mandatory":
		fallthrough
	case "PromptOnlyAtSignIn":
		fallthrough
	case "PromptAtSignInAndSignUp":
		fallthrough
	case "NoPrompt":
		*e = GetSignInExpPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExpPolicy: %v", v)
	}
}

type GetSignInExpOrganizationRequiredMfaPolicy string

const (
	GetSignInExpOrganizationRequiredMfaPolicyNoPrompt  GetSignInExpOrganizationRequiredMfaPolicy = "NoPrompt"
	GetSignInExpOrganizationRequiredMfaPolicyMandatory GetSignInExpOrganizationRequiredMfaPolicy = "Mandatory"
)

func (e GetSignInExpOrganizationRequiredMfaPolicy) ToPointer() *GetSignInExpOrganizationRequiredMfaPolicy {
	return &e
}
func (e *GetSignInExpOrganizationRequiredMfaPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NoPrompt":
		fallthrough
	case "Mandatory":
		*e = GetSignInExpOrganizationRequiredMfaPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExpOrganizationRequiredMfaPolicy: %v", v)
	}
}

// GetSignInExpMfa - MFA settings
type GetSignInExpMfa struct {
	Factors                       []GetSignInExpFactor                       `json:"factors"`
	Policy                        GetSignInExpPolicy                         `json:"policy"`
	OrganizationRequiredMfaPolicy *GetSignInExpOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
}

func (o *GetSignInExpMfa) GetFactors() []GetSignInExpFactor {
	if o == nil {
		return []GetSignInExpFactor{}
	}
	return o.Factors
}

func (o *GetSignInExpMfa) GetPolicy() GetSignInExpPolicy {
	if o == nil {
		return GetSignInExpPolicy("")
	}
	return o.Policy
}

func (o *GetSignInExpMfa) GetOrganizationRequiredMfaPolicy() *GetSignInExpOrganizationRequiredMfaPolicy {
	if o == nil {
		return nil
	}
	return o.OrganizationRequiredMfaPolicy
}

type GetSignInExpCaptchaPolicy struct {
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *GetSignInExpCaptchaPolicy) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// GetSignInExpSentinelPolicy - Custom sentinel policy settings. Use this field to customize the user lockout policy. The default value is 100 failed attempts within one hour. The user will be locked out for 60 minutes after exceeding the limit.
type GetSignInExpSentinelPolicy struct {
	MaxAttempts     *float64 `json:"maxAttempts,omitempty"`
	LockoutDuration *float64 `json:"lockoutDuration,omitempty"`
}

func (o *GetSignInExpSentinelPolicy) GetMaxAttempts() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAttempts
}

func (o *GetSignInExpSentinelPolicy) GetLockoutDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.LockoutDuration
}

// GetSignInExpResponseBody - Default sign-in experience settings.
type GetSignInExpResponseBody struct {
	TenantID string `json:"tenantId"`
	ID       string `json:"id"`
	// The primary branding color for the sign-in page (both light/dark mode).
	Color    GetSignInExpColor    `json:"color"`
	Branding GetSignInExpBranding `json:"branding"`
	// The language detection policy for the sign-in page.
	LanguageInfo       GetSignInExpLanguageInfo       `json:"languageInfo"`
	TermsOfUseURL      *string                        `json:"termsOfUseUrl"`
	PrivacyPolicyURL   *string                        `json:"privacyPolicyUrl"`
	AgreeToTermsPolicy GetSignInExpAgreeToTermsPolicy `json:"agreeToTermsPolicy"`
	// Sign-in method settings.
	SignIn GetSignInExpSignIn `json:"signIn"`
	// Sign-up method settings.
	SignUp       GetSignInExpSignUp       `json:"signUp"`
	SocialSignIn GetSignInExpSocialSignIn `json:"socialSignIn"`
	// Enabled social sign-in connectors, will displayed on the sign-in page.
	SocialSignInConnectorTargets []string               `json:"socialSignInConnectorTargets"`
	SignInMode                   GetSignInExpSignInMode `json:"signInMode"`
	CustomCSS                    *string                `json:"customCss"`
	// Custom content to display on experience flow pages. the page pathname will be the config key, the content will be the config value.
	CustomContent  map[string]string           `json:"customContent"`
	CustomUIAssets *GetSignInExpCustomUIAssets `json:"customUiAssets"`
	// Password policies to adjust the password strength requirements.
	PasswordPolicy GetSignInExpPasswordPolicy `json:"passwordPolicy"`
	// MFA settings
	Mfa                 GetSignInExpMfa `json:"mfa"`
	SingleSignOnEnabled bool            `json:"singleSignOnEnabled"`
	// The support email address to display on the error pages.
	SupportEmail *string `json:"supportEmail"`
	// The support website URL to display on the error pages.
	SupportWebsiteURL *string `json:"supportWebsiteUrl"`
	// The fallback URL to redirect users when the sign-in session does not exist or unknown. Client should initiates a new authentication flow after the redirection.
	UnknownSessionRedirectURL *string                   `json:"unknownSessionRedirectUrl"`
	CaptchaPolicy             GetSignInExpCaptchaPolicy `json:"captchaPolicy"`
	// Custom sentinel policy settings. Use this field to customize the user lockout policy. The default value is 100 failed attempts within one hour. The user will be locked out for 60 minutes after exceeding the limit.
	SentinelPolicy GetSignInExpSentinelPolicy `json:"sentinelPolicy"`
}

func (o *GetSignInExpResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *GetSignInExpResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSignInExpResponseBody) GetColor() GetSignInExpColor {
	if o == nil {
		return GetSignInExpColor{}
	}
	return o.Color
}

func (o *GetSignInExpResponseBody) GetBranding() GetSignInExpBranding {
	if o == nil {
		return GetSignInExpBranding{}
	}
	return o.Branding
}

func (o *GetSignInExpResponseBody) GetLanguageInfo() GetSignInExpLanguageInfo {
	if o == nil {
		return GetSignInExpLanguageInfo{}
	}
	return o.LanguageInfo
}

func (o *GetSignInExpResponseBody) GetTermsOfUseURL() *string {
	if o == nil {
		return nil
	}
	return o.TermsOfUseURL
}

func (o *GetSignInExpResponseBody) GetPrivacyPolicyURL() *string {
	if o == nil {
		return nil
	}
	return o.PrivacyPolicyURL
}

func (o *GetSignInExpResponseBody) GetAgreeToTermsPolicy() GetSignInExpAgreeToTermsPolicy {
	if o == nil {
		return GetSignInExpAgreeToTermsPolicy("")
	}
	return o.AgreeToTermsPolicy
}

func (o *GetSignInExpResponseBody) GetSignIn() GetSignInExpSignIn {
	if o == nil {
		return GetSignInExpSignIn{}
	}
	return o.SignIn
}

func (o *GetSignInExpResponseBody) GetSignUp() GetSignInExpSignUp {
	if o == nil {
		return GetSignInExpSignUp{}
	}
	return o.SignUp
}

func (o *GetSignInExpResponseBody) GetSocialSignIn() GetSignInExpSocialSignIn {
	if o == nil {
		return GetSignInExpSocialSignIn{}
	}
	return o.SocialSignIn
}

func (o *GetSignInExpResponseBody) GetSocialSignInConnectorTargets() []string {
	if o == nil {
		return []string{}
	}
	return o.SocialSignInConnectorTargets
}

func (o *GetSignInExpResponseBody) GetSignInMode() GetSignInExpSignInMode {
	if o == nil {
		return GetSignInExpSignInMode("")
	}
	return o.SignInMode
}

func (o *GetSignInExpResponseBody) GetCustomCSS() *string {
	if o == nil {
		return nil
	}
	return o.CustomCSS
}

func (o *GetSignInExpResponseBody) GetCustomContent() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.CustomContent
}

func (o *GetSignInExpResponseBody) GetCustomUIAssets() *GetSignInExpCustomUIAssets {
	if o == nil {
		return nil
	}
	return o.CustomUIAssets
}

func (o *GetSignInExpResponseBody) GetPasswordPolicy() GetSignInExpPasswordPolicy {
	if o == nil {
		return GetSignInExpPasswordPolicy{}
	}
	return o.PasswordPolicy
}

func (o *GetSignInExpResponseBody) GetMfa() GetSignInExpMfa {
	if o == nil {
		return GetSignInExpMfa{}
	}
	return o.Mfa
}

func (o *GetSignInExpResponseBody) GetSingleSignOnEnabled() bool {
	if o == nil {
		return false
	}
	return o.SingleSignOnEnabled
}

func (o *GetSignInExpResponseBody) GetSupportEmail() *string {
	if o == nil {
		return nil
	}
	return o.SupportEmail
}

func (o *GetSignInExpResponseBody) GetSupportWebsiteURL() *string {
	if o == nil {
		return nil
	}
	return o.SupportWebsiteURL
}

func (o *GetSignInExpResponseBody) GetUnknownSessionRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.UnknownSessionRedirectURL
}

func (o *GetSignInExpResponseBody) GetCaptchaPolicy() GetSignInExpCaptchaPolicy {
	if o == nil {
		return GetSignInExpCaptchaPolicy{}
	}
	return o.CaptchaPolicy
}

func (o *GetSignInExpResponseBody) GetSentinelPolicy() GetSignInExpSentinelPolicy {
	if o == nil {
		return GetSignInExpSentinelPolicy{}
	}
	return o.SentinelPolicy
}

type GetSignInExpResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Default sign-in experience settings.
	Object *GetSignInExpResponseBody
}

func (o *GetSignInExpResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSignInExpResponse) GetObject() *GetSignInExpResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
