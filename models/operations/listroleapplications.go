// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListRoleApplicationsRequest struct {
	// The unique identifier of the role.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
	// Search query parameters.
	SearchParams map[string]string `queryParam:"style=form,explode=true,name=search_params"`
}

func (l ListRoleApplicationsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListRoleApplicationsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListRoleApplicationsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListRoleApplicationsRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListRoleApplicationsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListRoleApplicationsRequest) GetSearchParams() map[string]string {
	if o == nil {
		return nil
	}
	return o.SearchParams
}

type ListRoleApplicationsType string

const (
	ListRoleApplicationsTypeNative           ListRoleApplicationsType = "Native"
	ListRoleApplicationsTypeSpa              ListRoleApplicationsType = "SPA"
	ListRoleApplicationsTypeTraditional      ListRoleApplicationsType = "Traditional"
	ListRoleApplicationsTypeMachineToMachine ListRoleApplicationsType = "MachineToMachine"
	ListRoleApplicationsTypeProtected        ListRoleApplicationsType = "Protected"
	ListRoleApplicationsTypeSaml             ListRoleApplicationsType = "SAML"
)

func (e ListRoleApplicationsType) ToPointer() *ListRoleApplicationsType {
	return &e
}
func (e *ListRoleApplicationsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "SPA":
		fallthrough
	case "Traditional":
		fallthrough
	case "MachineToMachine":
		fallthrough
	case "Protected":
		fallthrough
	case "SAML":
		*e = ListRoleApplicationsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRoleApplicationsType: %v", v)
	}
}

// ListRoleApplicationsRedirectUris2 - Validator function
type ListRoleApplicationsRedirectUris2 struct {
}

// ListRoleApplicationsRedirectUris1 - Validator function
type ListRoleApplicationsRedirectUris1 struct {
}

type ListRoleApplicationsRedirectUrisUnionType string

const (
	ListRoleApplicationsRedirectUrisUnionTypeListRoleApplicationsRedirectUris1 ListRoleApplicationsRedirectUrisUnionType = "ListRoleApplications_redirectUris_1"
	ListRoleApplicationsRedirectUrisUnionTypeListRoleApplicationsRedirectUris2 ListRoleApplicationsRedirectUrisUnionType = "ListRoleApplications_redirectUris_2"
)

type ListRoleApplicationsRedirectUrisUnion struct {
	ListRoleApplicationsRedirectUris1 *ListRoleApplicationsRedirectUris1 `queryParam:"inline"`
	ListRoleApplicationsRedirectUris2 *ListRoleApplicationsRedirectUris2 `queryParam:"inline"`

	Type ListRoleApplicationsRedirectUrisUnionType
}

func CreateListRoleApplicationsRedirectUrisUnionListRoleApplicationsRedirectUris1(listRoleApplicationsRedirectUris1 ListRoleApplicationsRedirectUris1) ListRoleApplicationsRedirectUrisUnion {
	typ := ListRoleApplicationsRedirectUrisUnionTypeListRoleApplicationsRedirectUris1

	return ListRoleApplicationsRedirectUrisUnion{
		ListRoleApplicationsRedirectUris1: &listRoleApplicationsRedirectUris1,
		Type:                              typ,
	}
}

func CreateListRoleApplicationsRedirectUrisUnionListRoleApplicationsRedirectUris2(listRoleApplicationsRedirectUris2 ListRoleApplicationsRedirectUris2) ListRoleApplicationsRedirectUrisUnion {
	typ := ListRoleApplicationsRedirectUrisUnionTypeListRoleApplicationsRedirectUris2

	return ListRoleApplicationsRedirectUrisUnion{
		ListRoleApplicationsRedirectUris2: &listRoleApplicationsRedirectUris2,
		Type:                              typ,
	}
}

func (u *ListRoleApplicationsRedirectUrisUnion) UnmarshalJSON(data []byte) error {

	var listRoleApplicationsRedirectUris1 ListRoleApplicationsRedirectUris1 = ListRoleApplicationsRedirectUris1{}
	if err := utils.UnmarshalJSON(data, &listRoleApplicationsRedirectUris1, "", true, true); err == nil {
		u.ListRoleApplicationsRedirectUris1 = &listRoleApplicationsRedirectUris1
		u.Type = ListRoleApplicationsRedirectUrisUnionTypeListRoleApplicationsRedirectUris1
		return nil
	}

	var listRoleApplicationsRedirectUris2 ListRoleApplicationsRedirectUris2 = ListRoleApplicationsRedirectUris2{}
	if err := utils.UnmarshalJSON(data, &listRoleApplicationsRedirectUris2, "", true, true); err == nil {
		u.ListRoleApplicationsRedirectUris2 = &listRoleApplicationsRedirectUris2
		u.Type = ListRoleApplicationsRedirectUrisUnionTypeListRoleApplicationsRedirectUris2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListRoleApplicationsRedirectUrisUnion", string(data))
}

func (u ListRoleApplicationsRedirectUrisUnion) MarshalJSON() ([]byte, error) {
	if u.ListRoleApplicationsRedirectUris1 != nil {
		return utils.MarshalJSON(u.ListRoleApplicationsRedirectUris1, "", true)
	}

	if u.ListRoleApplicationsRedirectUris2 != nil {
		return utils.MarshalJSON(u.ListRoleApplicationsRedirectUris2, "", true)
	}

	return nil, errors.New("could not marshal union type ListRoleApplicationsRedirectUrisUnion: all fields are null")
}

type ListRoleApplicationsOidcClientMetadata struct {
	RedirectUris                     []ListRoleApplicationsRedirectUrisUnion `json:"redirectUris"`
	PostLogoutRedirectUris           []string                                `json:"postLogoutRedirectUris"`
	BackchannelLogoutURI             *string                                 `json:"backchannelLogoutUri,omitempty"`
	BackchannelLogoutSessionRequired *bool                                   `json:"backchannelLogoutSessionRequired,omitempty"`
	LogoURI                          *string                                 `json:"logoUri,omitempty"`
}

func (o *ListRoleApplicationsOidcClientMetadata) GetRedirectUris() []ListRoleApplicationsRedirectUrisUnion {
	if o == nil {
		return []ListRoleApplicationsRedirectUrisUnion{}
	}
	return o.RedirectUris
}

func (o *ListRoleApplicationsOidcClientMetadata) GetPostLogoutRedirectUris() []string {
	if o == nil {
		return []string{}
	}
	return o.PostLogoutRedirectUris
}

func (o *ListRoleApplicationsOidcClientMetadata) GetBackchannelLogoutURI() *string {
	if o == nil {
		return nil
	}
	return o.BackchannelLogoutURI
}

func (o *ListRoleApplicationsOidcClientMetadata) GetBackchannelLogoutSessionRequired() *bool {
	if o == nil {
		return nil
	}
	return o.BackchannelLogoutSessionRequired
}

func (o *ListRoleApplicationsOidcClientMetadata) GetLogoURI() *string {
	if o == nil {
		return nil
	}
	return o.LogoURI
}

type ListRoleApplicationsCustomClientMetadata struct {
	CorsAllowedOrigins      []string `json:"corsAllowedOrigins,omitempty"`
	IDTokenTTL              *float64 `json:"idTokenTtl,omitempty"`
	RefreshTokenTTL         *float64 `json:"refreshTokenTtl,omitempty"`
	RefreshTokenTTLInDays   *float64 `json:"refreshTokenTtlInDays,omitempty"`
	TenantID                *string  `json:"tenantId,omitempty"`
	AlwaysIssueRefreshToken *bool    `json:"alwaysIssueRefreshToken,omitempty"`
	RotateRefreshToken      *bool    `json:"rotateRefreshToken,omitempty"`
}

func (o *ListRoleApplicationsCustomClientMetadata) GetCorsAllowedOrigins() []string {
	if o == nil {
		return nil
	}
	return o.CorsAllowedOrigins
}

func (o *ListRoleApplicationsCustomClientMetadata) GetIDTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.IDTokenTTL
}

func (o *ListRoleApplicationsCustomClientMetadata) GetRefreshTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTL
}

func (o *ListRoleApplicationsCustomClientMetadata) GetRefreshTokenTTLInDays() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTLInDays
}

func (o *ListRoleApplicationsCustomClientMetadata) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *ListRoleApplicationsCustomClientMetadata) GetAlwaysIssueRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysIssueRefreshToken
}

func (o *ListRoleApplicationsCustomClientMetadata) GetRotateRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.RotateRefreshToken
}

type ListRoleApplicationsPageRule struct {
	Path string `json:"path"`
}

func (o *ListRoleApplicationsPageRule) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type ListRoleApplicationsStatus string

const (
	ListRoleApplicationsStatusPendingVerification ListRoleApplicationsStatus = "PendingVerification"
	ListRoleApplicationsStatusPendingSsl          ListRoleApplicationsStatus = "PendingSsl"
	ListRoleApplicationsStatusActive              ListRoleApplicationsStatus = "Active"
	ListRoleApplicationsStatusError               ListRoleApplicationsStatus = "Error"
)

func (e ListRoleApplicationsStatus) ToPointer() *ListRoleApplicationsStatus {
	return &e
}
func (e *ListRoleApplicationsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PendingVerification":
		fallthrough
	case "PendingSsl":
		fallthrough
	case "Active":
		fallthrough
	case "Error":
		*e = ListRoleApplicationsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRoleApplicationsStatus: %v", v)
	}
}

type ListRoleApplicationsDNSRecord struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

func (o *ListRoleApplicationsDNSRecord) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListRoleApplicationsDNSRecord) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ListRoleApplicationsDNSRecord) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListRoleApplicationsValidationError struct {
	Message string `json:"message"`
}

func (o *ListRoleApplicationsValidationError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type ListRoleApplicationsSsl struct {
	Status           string                                `json:"status"`
	ValidationErrors []ListRoleApplicationsValidationError `json:"validation_errors,omitempty"`
}

func (o *ListRoleApplicationsSsl) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *ListRoleApplicationsSsl) GetValidationErrors() []ListRoleApplicationsValidationError {
	if o == nil {
		return nil
	}
	return o.ValidationErrors
}

type ListRoleApplicationsCloudflareData struct {
	ID                 string                  `json:"id"`
	Status             string                  `json:"status"`
	Ssl                ListRoleApplicationsSsl `json:"ssl"`
	VerificationErrors []string                `json:"verification_errors,omitempty"`
}

func (o *ListRoleApplicationsCloudflareData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListRoleApplicationsCloudflareData) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *ListRoleApplicationsCloudflareData) GetSsl() ListRoleApplicationsSsl {
	if o == nil {
		return ListRoleApplicationsSsl{}
	}
	return o.Ssl
}

func (o *ListRoleApplicationsCloudflareData) GetVerificationErrors() []string {
	if o == nil {
		return nil
	}
	return o.VerificationErrors
}

type ListRoleApplicationsCustomDomain struct {
	Domain         string                              `json:"domain"`
	Status         ListRoleApplicationsStatus          `json:"status"`
	ErrorMessage   *string                             `json:"errorMessage"`
	DNSRecords     []ListRoleApplicationsDNSRecord     `json:"dnsRecords"`
	CloudflareData *ListRoleApplicationsCloudflareData `json:"cloudflareData"`
}

func (o *ListRoleApplicationsCustomDomain) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *ListRoleApplicationsCustomDomain) GetStatus() ListRoleApplicationsStatus {
	if o == nil {
		return ListRoleApplicationsStatus("")
	}
	return o.Status
}

func (o *ListRoleApplicationsCustomDomain) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *ListRoleApplicationsCustomDomain) GetDNSRecords() []ListRoleApplicationsDNSRecord {
	if o == nil {
		return []ListRoleApplicationsDNSRecord{}
	}
	return o.DNSRecords
}

func (o *ListRoleApplicationsCustomDomain) GetCloudflareData() *ListRoleApplicationsCloudflareData {
	if o == nil {
		return nil
	}
	return o.CloudflareData
}

type ListRoleApplicationsProtectedAppMetadata struct {
	Host            string                             `json:"host"`
	Origin          string                             `json:"origin"`
	SessionDuration float64                            `json:"sessionDuration"`
	PageRules       []ListRoleApplicationsPageRule     `json:"pageRules"`
	CustomDomains   []ListRoleApplicationsCustomDomain `json:"customDomains,omitempty"`
}

func (o *ListRoleApplicationsProtectedAppMetadata) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *ListRoleApplicationsProtectedAppMetadata) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

func (o *ListRoleApplicationsProtectedAppMetadata) GetSessionDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.SessionDuration
}

func (o *ListRoleApplicationsProtectedAppMetadata) GetPageRules() []ListRoleApplicationsPageRule {
	if o == nil {
		return []ListRoleApplicationsPageRule{}
	}
	return o.PageRules
}

func (o *ListRoleApplicationsProtectedAppMetadata) GetCustomDomains() []ListRoleApplicationsCustomDomain {
	if o == nil {
		return nil
	}
	return o.CustomDomains
}

// ListRoleApplicationsCustomData - arbitrary
type ListRoleApplicationsCustomData struct {
}

type ListRoleApplicationsResponseBody struct {
	TenantID             string                                    `json:"tenantId"`
	ID                   string                                    `json:"id"`
	Name                 string                                    `json:"name"`
	Secret               string                                    `json:"secret"`
	Description          *string                                   `json:"description"`
	Type                 ListRoleApplicationsType                  `json:"type"`
	OidcClientMetadata   ListRoleApplicationsOidcClientMetadata    `json:"oidcClientMetadata"`
	CustomClientMetadata ListRoleApplicationsCustomClientMetadata  `json:"customClientMetadata"`
	ProtectedAppMetadata *ListRoleApplicationsProtectedAppMetadata `json:"protectedAppMetadata"`
	// arbitrary
	CustomData   ListRoleApplicationsCustomData `json:"customData"`
	IsThirdParty bool                           `json:"isThirdParty"`
	CreatedAt    float64                        `json:"createdAt"`
}

func (o *ListRoleApplicationsResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListRoleApplicationsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListRoleApplicationsResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListRoleApplicationsResponseBody) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *ListRoleApplicationsResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListRoleApplicationsResponseBody) GetType() ListRoleApplicationsType {
	if o == nil {
		return ListRoleApplicationsType("")
	}
	return o.Type
}

func (o *ListRoleApplicationsResponseBody) GetOidcClientMetadata() ListRoleApplicationsOidcClientMetadata {
	if o == nil {
		return ListRoleApplicationsOidcClientMetadata{}
	}
	return o.OidcClientMetadata
}

func (o *ListRoleApplicationsResponseBody) GetCustomClientMetadata() ListRoleApplicationsCustomClientMetadata {
	if o == nil {
		return ListRoleApplicationsCustomClientMetadata{}
	}
	return o.CustomClientMetadata
}

func (o *ListRoleApplicationsResponseBody) GetProtectedAppMetadata() *ListRoleApplicationsProtectedAppMetadata {
	if o == nil {
		return nil
	}
	return o.ProtectedAppMetadata
}

func (o *ListRoleApplicationsResponseBody) GetCustomData() ListRoleApplicationsCustomData {
	if o == nil {
		return ListRoleApplicationsCustomData{}
	}
	return o.CustomData
}

func (o *ListRoleApplicationsResponseBody) GetIsThirdParty() bool {
	if o == nil {
		return false
	}
	return o.IsThirdParty
}

func (o *ListRoleApplicationsResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type ListRoleApplicationsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// An array of applications that have the role assigned.
	ResponseBodies []ListRoleApplicationsResponseBody
}

func (o *ListRoleApplicationsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListRoleApplicationsResponse) GetResponseBodies() []ListRoleApplicationsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
