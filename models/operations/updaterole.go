// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type UpdateRoleRequestBody struct {
	// The name of the role. It should be unique within the tenant.
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	IsDefault   *bool   `json:"isDefault,omitempty"`
}

func (o *UpdateRoleRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateRoleRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateRoleRequestBody) GetIsDefault() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefault
}

type UpdateRoleRequest struct {
	// The unique identifier of the role.
	ID          string                `pathParam:"style=simple,explode=false,name=id"`
	RequestBody UpdateRoleRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateRoleRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateRoleRequest) GetRequestBody() UpdateRoleRequestBody {
	if o == nil {
		return UpdateRoleRequestBody{}
	}
	return o.RequestBody
}

type UpdateRoleType string

const (
	UpdateRoleTypeUser             UpdateRoleType = "User"
	UpdateRoleTypeMachineToMachine UpdateRoleType = "MachineToMachine"
)

func (e UpdateRoleType) ToPointer() *UpdateRoleType {
	return &e
}
func (e *UpdateRoleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "MachineToMachine":
		*e = UpdateRoleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateRoleType: %v", v)
	}
}

// UpdateRoleResponseBody - The updated role.
type UpdateRoleResponseBody struct {
	TenantID    string         `json:"tenantId"`
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Type        UpdateRoleType `json:"type"`
	IsDefault   bool           `json:"isDefault"`
}

func (o *UpdateRoleResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpdateRoleResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateRoleResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateRoleResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdateRoleResponseBody) GetType() UpdateRoleType {
	if o == nil {
		return UpdateRoleType("")
	}
	return o.Type
}

func (o *UpdateRoleResponseBody) GetIsDefault() bool {
	if o == nil {
		return false
	}
	return o.IsDefault
}

type UpdateRoleResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated role.
	Object *UpdateRoleResponseBody
}

func (o *UpdateRoleResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateRoleResponse) GetObject() *UpdateRoleResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
