// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// PasswordAlgorithm - The hash algorithm used for the password. It should be one of the supported algorithms: argon2, md5, sha1, sha256. Should the encryption algorithm differ from argon2, it will automatically be upgraded to argon2 upon the user's next sign-in.
type PasswordAlgorithm string

const (
	PasswordAlgorithmArgon2i  PasswordAlgorithm = "Argon2i"
	PasswordAlgorithmArgon2id PasswordAlgorithm = "Argon2id"
	PasswordAlgorithmArgon2d  PasswordAlgorithm = "Argon2d"
	PasswordAlgorithmSha1     PasswordAlgorithm = "SHA1"
	PasswordAlgorithmSha256   PasswordAlgorithm = "SHA256"
	PasswordAlgorithmMd5      PasswordAlgorithm = "MD5"
	PasswordAlgorithmBcrypt   PasswordAlgorithm = "Bcrypt"
	PasswordAlgorithmLegacy   PasswordAlgorithm = "Legacy"
)

func (e PasswordAlgorithm) ToPointer() *PasswordAlgorithm {
	return &e
}
func (e *PasswordAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Argon2i":
		fallthrough
	case "Argon2id":
		fallthrough
	case "Argon2d":
		fallthrough
	case "SHA1":
		fallthrough
	case "SHA256":
		fallthrough
	case "MD5":
		fallthrough
	case "Bcrypt":
		fallthrough
	case "Legacy":
		*e = PasswordAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordAlgorithm: %v", v)
	}
}

// CreateUserCustomDataRequest - arbitrary
type CreateUserCustomDataRequest struct {
}

type CreateUserAddressRequest struct {
	Formatted     *string `json:"formatted,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
	Locality      *string `json:"locality,omitempty"`
	Region        *string `json:"region,omitempty"`
	PostalCode    *string `json:"postalCode,omitempty"`
	Country       *string `json:"country,omitempty"`
}

func (o *CreateUserAddressRequest) GetFormatted() *string {
	if o == nil {
		return nil
	}
	return o.Formatted
}

func (o *CreateUserAddressRequest) GetStreetAddress() *string {
	if o == nil {
		return nil
	}
	return o.StreetAddress
}

func (o *CreateUserAddressRequest) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *CreateUserAddressRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreateUserAddressRequest) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreateUserAddressRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

type CreateUserProfileRequest struct {
	FamilyName        *string                   `json:"familyName,omitempty"`
	GivenName         *string                   `json:"givenName,omitempty"`
	MiddleName        *string                   `json:"middleName,omitempty"`
	Nickname          *string                   `json:"nickname,omitempty"`
	PreferredUsername *string                   `json:"preferredUsername,omitempty"`
	Profile           *string                   `json:"profile,omitempty"`
	Website           *string                   `json:"website,omitempty"`
	Gender            *string                   `json:"gender,omitempty"`
	Birthdate         *string                   `json:"birthdate,omitempty"`
	Zoneinfo          *string                   `json:"zoneinfo,omitempty"`
	Locale            *string                   `json:"locale,omitempty"`
	Address           *CreateUserAddressRequest `json:"address,omitempty"`
}

func (o *CreateUserProfileRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreateUserProfileRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreateUserProfileRequest) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *CreateUserProfileRequest) GetNickname() *string {
	if o == nil {
		return nil
	}
	return o.Nickname
}

func (o *CreateUserProfileRequest) GetPreferredUsername() *string {
	if o == nil {
		return nil
	}
	return o.PreferredUsername
}

func (o *CreateUserProfileRequest) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *CreateUserProfileRequest) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *CreateUserProfileRequest) GetGender() *string {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *CreateUserProfileRequest) GetBirthdate() *string {
	if o == nil {
		return nil
	}
	return o.Birthdate
}

func (o *CreateUserProfileRequest) GetZoneinfo() *string {
	if o == nil {
		return nil
	}
	return o.Zoneinfo
}

func (o *CreateUserProfileRequest) GetLocale() *string {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreateUserProfileRequest) GetAddress() *CreateUserAddressRequest {
	if o == nil {
		return nil
	}
	return o.Address
}

// CreateUserRequest - User data to create a new user. All properties are optional.
type CreateUserRequest struct {
	// Primary phone number for the user. It should be unique across all users.
	PrimaryPhone *string `json:"primaryPhone,omitempty"`
	// Primary email address for the user. It should be unique across all users.
	PrimaryEmail *string `json:"primaryEmail,omitempty"`
	// Username for the user. It should be unique across all users.
	Username *string `json:"username,omitempty"`
	// Plain text password for the user.
	Password *string `json:"password,omitempty"`
	// In case you already have the password digests and not the passwords, you can use them for the newly created user via this property. The value should be generated with one of the supported algorithms. The algorithm can be specified using the `passwordAlgorithm` property.
	PasswordDigest *string `json:"passwordDigest,omitempty"`
	// The hash algorithm used for the password. It should be one of the supported algorithms: argon2, md5, sha1, sha256. Should the encryption algorithm differ from argon2, it will automatically be upgraded to argon2 upon the user's next sign-in.
	PasswordAlgorithm *PasswordAlgorithm `json:"passwordAlgorithm,omitempty"`
	Name              *string            `json:"name,omitempty"`
	Avatar            *string            `json:"avatar,omitempty"`
	// arbitrary
	CustomData *CreateUserCustomDataRequest `json:"customData,omitempty"`
	Profile    *CreateUserProfileRequest    `json:"profile,omitempty"`
}

func (o *CreateUserRequest) GetPrimaryPhone() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryPhone
}

func (o *CreateUserRequest) GetPrimaryEmail() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryEmail
}

func (o *CreateUserRequest) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *CreateUserRequest) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreateUserRequest) GetPasswordDigest() *string {
	if o == nil {
		return nil
	}
	return o.PasswordDigest
}

func (o *CreateUserRequest) GetPasswordAlgorithm() *PasswordAlgorithm {
	if o == nil {
		return nil
	}
	return o.PasswordAlgorithm
}

func (o *CreateUserRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateUserRequest) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *CreateUserRequest) GetCustomData() *CreateUserCustomDataRequest {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *CreateUserRequest) GetProfile() *CreateUserProfileRequest {
	if o == nil {
		return nil
	}
	return o.Profile
}

// CreateUserCustomDataResponse - arbitrary
type CreateUserCustomDataResponse struct {
}

// CreateUserDetails - arbitrary
type CreateUserDetails struct {
}

type CreateUserIdentities struct {
	UserID string `json:"userId"`
	// arbitrary
	Details *CreateUserDetails `json:"details,omitempty"`
}

func (o *CreateUserIdentities) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateUserIdentities) GetDetails() *CreateUserDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

type CreateUserAddressResponse struct {
	Formatted     *string `json:"formatted,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
	Locality      *string `json:"locality,omitempty"`
	Region        *string `json:"region,omitempty"`
	PostalCode    *string `json:"postalCode,omitempty"`
	Country       *string `json:"country,omitempty"`
}

func (o *CreateUserAddressResponse) GetFormatted() *string {
	if o == nil {
		return nil
	}
	return o.Formatted
}

func (o *CreateUserAddressResponse) GetStreetAddress() *string {
	if o == nil {
		return nil
	}
	return o.StreetAddress
}

func (o *CreateUserAddressResponse) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *CreateUserAddressResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreateUserAddressResponse) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreateUserAddressResponse) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

type CreateUserProfileResponse struct {
	FamilyName        *string                    `json:"familyName,omitempty"`
	GivenName         *string                    `json:"givenName,omitempty"`
	MiddleName        *string                    `json:"middleName,omitempty"`
	Nickname          *string                    `json:"nickname,omitempty"`
	PreferredUsername *string                    `json:"preferredUsername,omitempty"`
	Profile           *string                    `json:"profile,omitempty"`
	Website           *string                    `json:"website,omitempty"`
	Gender            *string                    `json:"gender,omitempty"`
	Birthdate         *string                    `json:"birthdate,omitempty"`
	Zoneinfo          *string                    `json:"zoneinfo,omitempty"`
	Locale            *string                    `json:"locale,omitempty"`
	Address           *CreateUserAddressResponse `json:"address,omitempty"`
}

func (o *CreateUserProfileResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreateUserProfileResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreateUserProfileResponse) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *CreateUserProfileResponse) GetNickname() *string {
	if o == nil {
		return nil
	}
	return o.Nickname
}

func (o *CreateUserProfileResponse) GetPreferredUsername() *string {
	if o == nil {
		return nil
	}
	return o.PreferredUsername
}

func (o *CreateUserProfileResponse) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *CreateUserProfileResponse) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *CreateUserProfileResponse) GetGender() *string {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *CreateUserProfileResponse) GetBirthdate() *string {
	if o == nil {
		return nil
	}
	return o.Birthdate
}

func (o *CreateUserProfileResponse) GetZoneinfo() *string {
	if o == nil {
		return nil
	}
	return o.Zoneinfo
}

func (o *CreateUserProfileResponse) GetLocale() *string {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreateUserProfileResponse) GetAddress() *CreateUserAddressResponse {
	if o == nil {
		return nil
	}
	return o.Address
}

// CreateUserDetail - arbitrary
type CreateUserDetail struct {
}

type CreateUserSsoIdentity struct {
	TenantID   string `json:"tenantId"`
	ID         string `json:"id"`
	UserID     string `json:"userId"`
	Issuer     string `json:"issuer"`
	IdentityID string `json:"identityId"`
	// arbitrary
	Detail         CreateUserDetail `json:"detail"`
	CreatedAt      float64          `json:"createdAt"`
	SsoConnectorID string           `json:"ssoConnectorId"`
}

func (o *CreateUserSsoIdentity) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *CreateUserSsoIdentity) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateUserSsoIdentity) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateUserSsoIdentity) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateUserSsoIdentity) GetIdentityID() string {
	if o == nil {
		return ""
	}
	return o.IdentityID
}

func (o *CreateUserSsoIdentity) GetDetail() CreateUserDetail {
	if o == nil {
		return CreateUserDetail{}
	}
	return o.Detail
}

func (o *CreateUserSsoIdentity) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateUserSsoIdentity) GetSsoConnectorID() string {
	if o == nil {
		return ""
	}
	return o.SsoConnectorID
}

// CreateUserResponseBody - User data for the newly created user.
type CreateUserResponseBody struct {
	ID           string  `json:"id"`
	Username     *string `json:"username"`
	PrimaryEmail *string `json:"primaryEmail"`
	PrimaryPhone *string `json:"primaryPhone"`
	Name         *string `json:"name"`
	Avatar       *string `json:"avatar"`
	// arbitrary
	CustomData    CreateUserCustomDataResponse    `json:"customData"`
	Identities    map[string]CreateUserIdentities `json:"identities"`
	LastSignInAt  *float64                        `json:"lastSignInAt"`
	CreatedAt     float64                         `json:"createdAt"`
	UpdatedAt     float64                         `json:"updatedAt"`
	Profile       CreateUserProfileResponse       `json:"profile"`
	ApplicationID *string                         `json:"applicationId"`
	IsSuspended   bool                            `json:"isSuspended"`
	HasPassword   *bool                           `json:"hasPassword,omitempty"`
	SsoIdentities []CreateUserSsoIdentity         `json:"ssoIdentities,omitempty"`
}

func (o *CreateUserResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateUserResponseBody) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *CreateUserResponseBody) GetPrimaryEmail() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryEmail
}

func (o *CreateUserResponseBody) GetPrimaryPhone() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryPhone
}

func (o *CreateUserResponseBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateUserResponseBody) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *CreateUserResponseBody) GetCustomData() CreateUserCustomDataResponse {
	if o == nil {
		return CreateUserCustomDataResponse{}
	}
	return o.CustomData
}

func (o *CreateUserResponseBody) GetIdentities() map[string]CreateUserIdentities {
	if o == nil {
		return map[string]CreateUserIdentities{}
	}
	return o.Identities
}

func (o *CreateUserResponseBody) GetLastSignInAt() *float64 {
	if o == nil {
		return nil
	}
	return o.LastSignInAt
}

func (o *CreateUserResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateUserResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateUserResponseBody) GetProfile() CreateUserProfileResponse {
	if o == nil {
		return CreateUserProfileResponse{}
	}
	return o.Profile
}

func (o *CreateUserResponseBody) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *CreateUserResponseBody) GetIsSuspended() bool {
	if o == nil {
		return false
	}
	return o.IsSuspended
}

func (o *CreateUserResponseBody) GetHasPassword() *bool {
	if o == nil {
		return nil
	}
	return o.HasPassword
}

func (o *CreateUserResponseBody) GetSsoIdentities() []CreateUserSsoIdentity {
	if o == nil {
		return nil
	}
	return o.SsoIdentities
}

type CreateUserResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// User data for the newly created user.
	Object *CreateUserResponseBody
}

func (o *CreateUserResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateUserResponse) GetObject() *CreateUserResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
