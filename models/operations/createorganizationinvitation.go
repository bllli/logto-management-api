// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type MessagePayload struct {
	Code   *string `json:"code,omitempty"`
	Link   *string `json:"link,omitempty"`
	Locale *string `json:"locale,omitempty"`
}

func (o *MessagePayload) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *MessagePayload) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *MessagePayload) GetLocale() *string {
	if o == nil {
		return nil
	}
	return o.Locale
}

type MessagePayloadUnionType string

const (
	MessagePayloadUnionTypeMessagePayload MessagePayloadUnionType = "messagePayload"
	MessagePayloadUnionTypeBoolean        MessagePayloadUnionType = "boolean"
)

// MessagePayloadUnion - The message payload for the "OrganizationInvitation" template to use when sending the invitation via email. If it is `false`, the invitation will not be sent via email.
type MessagePayloadUnion struct {
	MessagePayload *MessagePayload `queryParam:"inline"`
	Boolean        *bool           `queryParam:"inline"`

	Type MessagePayloadUnionType
}

func CreateMessagePayloadUnionMessagePayload(messagePayload MessagePayload) MessagePayloadUnion {
	typ := MessagePayloadUnionTypeMessagePayload

	return MessagePayloadUnion{
		MessagePayload: &messagePayload,
		Type:           typ,
	}
}

func CreateMessagePayloadUnionBoolean(boolean bool) MessagePayloadUnion {
	typ := MessagePayloadUnionTypeBoolean

	return MessagePayloadUnion{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *MessagePayloadUnion) UnmarshalJSON(data []byte) error {

	var messagePayload MessagePayload = MessagePayload{}
	if err := utils.UnmarshalJSON(data, &messagePayload, "", true, true); err == nil {
		u.MessagePayload = &messagePayload
		u.Type = MessagePayloadUnionTypeMessagePayload
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = MessagePayloadUnionTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MessagePayloadUnion", string(data))
}

func (u MessagePayloadUnion) MarshalJSON() ([]byte, error) {
	if u.MessagePayload != nil {
		return utils.MarshalJSON(u.MessagePayload, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type MessagePayloadUnion: all fields are null")
}

// CreateOrganizationInvitationRequest - The organization invitation to create.
type CreateOrganizationInvitationRequest struct {
	// The ID of the user who is inviting the user to join the organization.
	InviterID *string `json:"inviterId,omitempty"`
	// The email address of the user to invite to join the organization.
	Invitee string `json:"invitee"`
	// The ID of the organization to invite the user to join.
	OrganizationID string `json:"organizationId"`
	// The epoch time in milliseconds when the invitation expires.
	ExpiresAt float64 `json:"expiresAt"`
	// The IDs of the organization roles to assign to the user when they accept the invitation.
	OrganizationRoleIds []string `json:"organizationRoleIds,omitempty"`
	// The message payload for the "OrganizationInvitation" template to use when sending the invitation via email. If it is `false`, the invitation will not be sent via email.
	MessagePayload MessagePayloadUnion `json:"messagePayload"`
}

func (o *CreateOrganizationInvitationRequest) GetInviterID() *string {
	if o == nil {
		return nil
	}
	return o.InviterID
}

func (o *CreateOrganizationInvitationRequest) GetInvitee() string {
	if o == nil {
		return ""
	}
	return o.Invitee
}

func (o *CreateOrganizationInvitationRequest) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *CreateOrganizationInvitationRequest) GetExpiresAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresAt
}

func (o *CreateOrganizationInvitationRequest) GetOrganizationRoleIds() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationRoleIds
}

func (o *CreateOrganizationInvitationRequest) GetMessagePayload() MessagePayloadUnion {
	if o == nil {
		return MessagePayloadUnion{}
	}
	return o.MessagePayload
}

type CreateOrganizationInvitationStatus string

const (
	CreateOrganizationInvitationStatusPending  CreateOrganizationInvitationStatus = "Pending"
	CreateOrganizationInvitationStatusAccepted CreateOrganizationInvitationStatus = "Accepted"
	CreateOrganizationInvitationStatusExpired  CreateOrganizationInvitationStatus = "Expired"
	CreateOrganizationInvitationStatusRevoked  CreateOrganizationInvitationStatus = "Revoked"
)

func (e CreateOrganizationInvitationStatus) ToPointer() *CreateOrganizationInvitationStatus {
	return &e
}
func (e *CreateOrganizationInvitationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Pending":
		fallthrough
	case "Accepted":
		fallthrough
	case "Expired":
		fallthrough
	case "Revoked":
		*e = CreateOrganizationInvitationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrganizationInvitationStatus: %v", v)
	}
}

type CreateOrganizationInvitationOrganizationRole struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *CreateOrganizationInvitationOrganizationRole) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateOrganizationInvitationOrganizationRole) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// CreateOrganizationInvitationResponseBody - The organization invitation was created successfully.
type CreateOrganizationInvitationResponseBody struct {
	TenantID          string                                         `json:"tenantId"`
	ID                string                                         `json:"id"`
	InviterID         *string                                        `json:"inviterId"`
	Invitee           string                                         `json:"invitee"`
	AcceptedUserID    *string                                        `json:"acceptedUserId"`
	OrganizationID    string                                         `json:"organizationId"`
	Status            CreateOrganizationInvitationStatus             `json:"status"`
	CreatedAt         float64                                        `json:"createdAt"`
	UpdatedAt         float64                                        `json:"updatedAt"`
	ExpiresAt         float64                                        `json:"expiresAt"`
	OrganizationRoles []CreateOrganizationInvitationOrganizationRole `json:"organizationRoles"`
}

func (o *CreateOrganizationInvitationResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *CreateOrganizationInvitationResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateOrganizationInvitationResponseBody) GetInviterID() *string {
	if o == nil {
		return nil
	}
	return o.InviterID
}

func (o *CreateOrganizationInvitationResponseBody) GetInvitee() string {
	if o == nil {
		return ""
	}
	return o.Invitee
}

func (o *CreateOrganizationInvitationResponseBody) GetAcceptedUserID() *string {
	if o == nil {
		return nil
	}
	return o.AcceptedUserID
}

func (o *CreateOrganizationInvitationResponseBody) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *CreateOrganizationInvitationResponseBody) GetStatus() CreateOrganizationInvitationStatus {
	if o == nil {
		return CreateOrganizationInvitationStatus("")
	}
	return o.Status
}

func (o *CreateOrganizationInvitationResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateOrganizationInvitationResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateOrganizationInvitationResponseBody) GetExpiresAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresAt
}

func (o *CreateOrganizationInvitationResponseBody) GetOrganizationRoles() []CreateOrganizationInvitationOrganizationRole {
	if o == nil {
		return []CreateOrganizationInvitationOrganizationRole{}
	}
	return o.OrganizationRoles
}

type CreateOrganizationInvitationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The organization invitation was created successfully.
	Object *CreateOrganizationInvitationResponseBody
}

func (o *CreateOrganizationInvitationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateOrganizationInvitationResponse) GetObject() *CreateOrganizationInvitationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
