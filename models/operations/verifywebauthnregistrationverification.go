// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type VerifyWebAuthnRegistrationVerificationTransport string

const (
	VerifyWebAuthnRegistrationVerificationTransportUsb       VerifyWebAuthnRegistrationVerificationTransport = "usb"
	VerifyWebAuthnRegistrationVerificationTransportNfc       VerifyWebAuthnRegistrationVerificationTransport = "nfc"
	VerifyWebAuthnRegistrationVerificationTransportBle       VerifyWebAuthnRegistrationVerificationTransport = "ble"
	VerifyWebAuthnRegistrationVerificationTransportInternal  VerifyWebAuthnRegistrationVerificationTransport = "internal"
	VerifyWebAuthnRegistrationVerificationTransportCable     VerifyWebAuthnRegistrationVerificationTransport = "cable"
	VerifyWebAuthnRegistrationVerificationTransportHybrid    VerifyWebAuthnRegistrationVerificationTransport = "hybrid"
	VerifyWebAuthnRegistrationVerificationTransportSmartCard VerifyWebAuthnRegistrationVerificationTransport = "smart-card"
)

func (e VerifyWebAuthnRegistrationVerificationTransport) ToPointer() *VerifyWebAuthnRegistrationVerificationTransport {
	return &e
}
func (e *VerifyWebAuthnRegistrationVerificationTransport) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "usb":
		fallthrough
	case "nfc":
		fallthrough
	case "ble":
		fallthrough
	case "internal":
		fallthrough
	case "cable":
		fallthrough
	case "hybrid":
		fallthrough
	case "smart-card":
		*e = VerifyWebAuthnRegistrationVerificationTransport(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerifyWebAuthnRegistrationVerificationTransport: %v", v)
	}
}

type ExperienceVerifyWebAuthnRegistrationVerificationResponse struct {
	ClientDataJSON     string                                            `json:"clientDataJSON"`
	AttestationObject  string                                            `json:"attestationObject"`
	AuthenticatorData  *string                                           `json:"authenticatorData,omitempty"`
	Transports         []VerifyWebAuthnRegistrationVerificationTransport `json:"transports,omitempty"`
	PublicKeyAlgorithm *float64                                          `json:"publicKeyAlgorithm,omitempty"`
	PublicKey          *string                                           `json:"publicKey,omitempty"`
}

func (o *ExperienceVerifyWebAuthnRegistrationVerificationResponse) GetClientDataJSON() string {
	if o == nil {
		return ""
	}
	return o.ClientDataJSON
}

func (o *ExperienceVerifyWebAuthnRegistrationVerificationResponse) GetAttestationObject() string {
	if o == nil {
		return ""
	}
	return o.AttestationObject
}

func (o *ExperienceVerifyWebAuthnRegistrationVerificationResponse) GetAuthenticatorData() *string {
	if o == nil {
		return nil
	}
	return o.AuthenticatorData
}

func (o *ExperienceVerifyWebAuthnRegistrationVerificationResponse) GetTransports() []VerifyWebAuthnRegistrationVerificationTransport {
	if o == nil {
		return nil
	}
	return o.Transports
}

func (o *ExperienceVerifyWebAuthnRegistrationVerificationResponse) GetPublicKeyAlgorithm() *float64 {
	if o == nil {
		return nil
	}
	return o.PublicKeyAlgorithm
}

func (o *ExperienceVerifyWebAuthnRegistrationVerificationResponse) GetPublicKey() *string {
	if o == nil {
		return nil
	}
	return o.PublicKey
}

type VerifyWebAuthnRegistrationVerificationAuthenticatorAttachment string

const (
	VerifyWebAuthnRegistrationVerificationAuthenticatorAttachmentCrossPlatform VerifyWebAuthnRegistrationVerificationAuthenticatorAttachment = "cross-platform"
	VerifyWebAuthnRegistrationVerificationAuthenticatorAttachmentPlatform      VerifyWebAuthnRegistrationVerificationAuthenticatorAttachment = "platform"
)

func (e VerifyWebAuthnRegistrationVerificationAuthenticatorAttachment) ToPointer() *VerifyWebAuthnRegistrationVerificationAuthenticatorAttachment {
	return &e
}
func (e *VerifyWebAuthnRegistrationVerificationAuthenticatorAttachment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cross-platform":
		fallthrough
	case "platform":
		*e = VerifyWebAuthnRegistrationVerificationAuthenticatorAttachment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerifyWebAuthnRegistrationVerificationAuthenticatorAttachment: %v", v)
	}
}

type VerifyWebAuthnRegistrationVerificationCrepProps struct {
	Rk *bool `json:"rk,omitempty"`
}

func (o *VerifyWebAuthnRegistrationVerificationCrepProps) GetRk() *bool {
	if o == nil {
		return nil
	}
	return o.Rk
}

type VerifyWebAuthnRegistrationVerificationClientExtensionResults struct {
	Appid            *bool                                            `json:"appid,omitempty"`
	CrepProps        *VerifyWebAuthnRegistrationVerificationCrepProps `json:"crepProps,omitempty"`
	HmacCreateSecret *bool                                            `json:"hmacCreateSecret,omitempty"`
}

func (o *VerifyWebAuthnRegistrationVerificationClientExtensionResults) GetAppid() *bool {
	if o == nil {
		return nil
	}
	return o.Appid
}

func (o *VerifyWebAuthnRegistrationVerificationClientExtensionResults) GetCrepProps() *VerifyWebAuthnRegistrationVerificationCrepProps {
	if o == nil {
		return nil
	}
	return o.CrepProps
}

func (o *VerifyWebAuthnRegistrationVerificationClientExtensionResults) GetHmacCreateSecret() *bool {
	if o == nil {
		return nil
	}
	return o.HmacCreateSecret
}

// VerifyWebAuthnRegistrationVerificationPayload - The WebAuthn attestation response from the user's WebAuthn credential.
type VerifyWebAuthnRegistrationVerificationPayload struct {
	Type                    string                                                         `json:"type"`
	ID                      string                                                         `json:"id"`
	RawID                   string                                                         `json:"rawId"`
	Response                ExperienceVerifyWebAuthnRegistrationVerificationResponse       `json:"response"`
	AuthenticatorAttachment *VerifyWebAuthnRegistrationVerificationAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
	ClientExtensionResults  VerifyWebAuthnRegistrationVerificationClientExtensionResults   `json:"clientExtensionResults"`
}

func (o *VerifyWebAuthnRegistrationVerificationPayload) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *VerifyWebAuthnRegistrationVerificationPayload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *VerifyWebAuthnRegistrationVerificationPayload) GetRawID() string {
	if o == nil {
		return ""
	}
	return o.RawID
}

func (o *VerifyWebAuthnRegistrationVerificationPayload) GetResponse() ExperienceVerifyWebAuthnRegistrationVerificationResponse {
	if o == nil {
		return ExperienceVerifyWebAuthnRegistrationVerificationResponse{}
	}
	return o.Response
}

func (o *VerifyWebAuthnRegistrationVerificationPayload) GetAuthenticatorAttachment() *VerifyWebAuthnRegistrationVerificationAuthenticatorAttachment {
	if o == nil {
		return nil
	}
	return o.AuthenticatorAttachment
}

func (o *VerifyWebAuthnRegistrationVerificationPayload) GetClientExtensionResults() VerifyWebAuthnRegistrationVerificationClientExtensionResults {
	if o == nil {
		return VerifyWebAuthnRegistrationVerificationClientExtensionResults{}
	}
	return o.ClientExtensionResults
}

type VerifyWebAuthnRegistrationVerificationRequest struct {
	// The verification ID of the WebAuthn registration record.
	VerificationID string `json:"verificationId"`
	// The WebAuthn attestation response from the user's WebAuthn credential.
	Payload VerifyWebAuthnRegistrationVerificationPayload `json:"payload"`
}

func (o *VerifyWebAuthnRegistrationVerificationRequest) GetVerificationID() string {
	if o == nil {
		return ""
	}
	return o.VerificationID
}

func (o *VerifyWebAuthnRegistrationVerificationRequest) GetPayload() VerifyWebAuthnRegistrationVerificationPayload {
	if o == nil {
		return VerifyWebAuthnRegistrationVerificationPayload{}
	}
	return o.Payload
}

// VerifyWebAuthnRegistrationVerificationResponseBody - The WebAuthn registration has been successfully verified.
type VerifyWebAuthnRegistrationVerificationResponseBody struct {
	// The unique verification ID of the WebAuthn registration record. This `verificationId` is required to bind the WebAuthn credential to the user account via the `Profile` API.
	VerificationID string `json:"verificationId"`
}

func (o *VerifyWebAuthnRegistrationVerificationResponseBody) GetVerificationID() string {
	if o == nil {
		return ""
	}
	return o.VerificationID
}

type VerifyWebAuthnRegistrationVerificationResponseResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The WebAuthn registration has been successfully verified.
	Object *VerifyWebAuthnRegistrationVerificationResponseBody
}

func (o *VerifyWebAuthnRegistrationVerificationResponseResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *VerifyWebAuthnRegistrationVerificationResponseResponse) GetObject() *VerifyWebAuthnRegistrationVerificationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
