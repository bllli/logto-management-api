// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListOrganizationJitSsoConnectorsRequest struct {
	// The unique identifier of the organization.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
}

func (l ListOrganizationJitSsoConnectorsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListOrganizationJitSsoConnectorsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListOrganizationJitSsoConnectorsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListOrganizationJitSsoConnectorsRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListOrganizationJitSsoConnectorsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

// ListOrganizationJitSsoConnectorsConfig - arbitrary
type ListOrganizationJitSsoConnectorsConfig struct {
}

type ListOrganizationJitSsoConnectorsBranding struct {
	DisplayName *string `json:"displayName,omitempty"`
	Logo        *string `json:"logo,omitempty"`
	DarkLogo    *string `json:"darkLogo,omitempty"`
}

func (o *ListOrganizationJitSsoConnectorsBranding) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *ListOrganizationJitSsoConnectorsBranding) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *ListOrganizationJitSsoConnectorsBranding) GetDarkLogo() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogo
}

type ListOrganizationJitSsoConnectorsResponseBody struct {
	TenantID      string `json:"tenantId"`
	ID            string `json:"id"`
	ProviderName  string `json:"providerName"`
	ConnectorName string `json:"connectorName"`
	// arbitrary
	Config      ListOrganizationJitSsoConnectorsConfig   `json:"config"`
	Domains     []string                                 `json:"domains"`
	Branding    ListOrganizationJitSsoConnectorsBranding `json:"branding"`
	SyncProfile bool                                     `json:"syncProfile"`
	CreatedAt   float64                                  `json:"createdAt"`
}

func (o *ListOrganizationJitSsoConnectorsResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListOrganizationJitSsoConnectorsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListOrganizationJitSsoConnectorsResponseBody) GetProviderName() string {
	if o == nil {
		return ""
	}
	return o.ProviderName
}

func (o *ListOrganizationJitSsoConnectorsResponseBody) GetConnectorName() string {
	if o == nil {
		return ""
	}
	return o.ConnectorName
}

func (o *ListOrganizationJitSsoConnectorsResponseBody) GetConfig() ListOrganizationJitSsoConnectorsConfig {
	if o == nil {
		return ListOrganizationJitSsoConnectorsConfig{}
	}
	return o.Config
}

func (o *ListOrganizationJitSsoConnectorsResponseBody) GetDomains() []string {
	if o == nil {
		return []string{}
	}
	return o.Domains
}

func (o *ListOrganizationJitSsoConnectorsResponseBody) GetBranding() ListOrganizationJitSsoConnectorsBranding {
	if o == nil {
		return ListOrganizationJitSsoConnectorsBranding{}
	}
	return o.Branding
}

func (o *ListOrganizationJitSsoConnectorsResponseBody) GetSyncProfile() bool {
	if o == nil {
		return false
	}
	return o.SyncProfile
}

func (o *ListOrganizationJitSsoConnectorsResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type ListOrganizationJitSsoConnectorsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of SSO connectors.
	ResponseBodies []ListOrganizationJitSsoConnectorsResponseBody
}

func (o *ListOrganizationJitSsoConnectorsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListOrganizationJitSsoConnectorsResponse) GetResponseBodies() []ListOrganizationJitSsoConnectorsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
