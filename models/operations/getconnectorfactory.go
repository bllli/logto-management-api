// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type GetConnectorFactoryRequest struct {
	// The unique identifier of the connector factory.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetConnectorFactoryRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetConnectorFactoryType string

const (
	GetConnectorFactoryTypeEmail  GetConnectorFactoryType = "Email"
	GetConnectorFactoryTypeSms    GetConnectorFactoryType = "Sms"
	GetConnectorFactoryTypeSocial GetConnectorFactoryType = "Social"
)

func (e GetConnectorFactoryType) ToPointer() *GetConnectorFactoryType {
	return &e
}
func (e *GetConnectorFactoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Email":
		fallthrough
	case "Sms":
		fallthrough
	case "Social":
		*e = GetConnectorFactoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectorFactoryType: %v", v)
	}
}

// GetConnectorFactoryName - Validator function
type GetConnectorFactoryName struct {
}

// GetConnectorFactoryDescription - Validator function
type GetConnectorFactoryDescription struct {
}

type GetConnectorFactoryFormItemType string

const (
	GetConnectorFactoryFormItemTypeText          GetConnectorFactoryFormItemType = "Text"
	GetConnectorFactoryFormItemTypeNumber        GetConnectorFactoryFormItemType = "Number"
	GetConnectorFactoryFormItemTypeMultilineText GetConnectorFactoryFormItemType = "MultilineText"
	GetConnectorFactoryFormItemTypeSwitch        GetConnectorFactoryFormItemType = "Switch"
	GetConnectorFactoryFormItemTypeJSON          GetConnectorFactoryFormItemType = "Json"
)

func (e GetConnectorFactoryFormItemType) ToPointer() *GetConnectorFactoryFormItemType {
	return &e
}
func (e *GetConnectorFactoryFormItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Text":
		fallthrough
	case "Number":
		fallthrough
	case "MultilineText":
		fallthrough
	case "Switch":
		fallthrough
	case "Json":
		*e = GetConnectorFactoryFormItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectorFactoryFormItemType: %v", v)
	}
}

type GetConnectorFactoryShowCondition3 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *GetConnectorFactoryShowCondition3) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *GetConnectorFactoryShowCondition3) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type GetConnectorFactoryFormItem3 struct {
	Type           GetConnectorFactoryFormItemType     `json:"type"`
	Key            string                              `json:"key"`
	Label          string                              `json:"label"`
	Placeholder    *string                             `json:"placeholder,omitempty"`
	Required       *bool                               `json:"required,omitempty"`
	DefaultValue   any                                 `json:"defaultValue,omitempty"`
	ShowConditions []GetConnectorFactoryShowCondition3 `json:"showConditions,omitempty"`
	Description    *string                             `json:"description,omitempty"`
	Tooltip        *string                             `json:"tooltip,omitempty"`
	IsConfidential *bool                               `json:"isConfidential,omitempty"`
}

func (o *GetConnectorFactoryFormItem3) GetType() GetConnectorFactoryFormItemType {
	if o == nil {
		return GetConnectorFactoryFormItemType("")
	}
	return o.Type
}

func (o *GetConnectorFactoryFormItem3) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetConnectorFactoryFormItem3) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *GetConnectorFactoryFormItem3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *GetConnectorFactoryFormItem3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *GetConnectorFactoryFormItem3) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *GetConnectorFactoryFormItem3) GetShowConditions() []GetConnectorFactoryShowCondition3 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *GetConnectorFactoryFormItem3) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetConnectorFactoryFormItem3) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *GetConnectorFactoryFormItem3) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type GetConnectorFactorySelectItem2 struct {
	Value string `json:"value"`
}

func (o *GetConnectorFactorySelectItem2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetConnectorFactoryShowCondition2 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *GetConnectorFactoryShowCondition2) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *GetConnectorFactoryShowCondition2) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type GetConnectorFactoryFormItem2 struct {
	Type           string                              `json:"type"`
	SelectItems    []GetConnectorFactorySelectItem2    `json:"selectItems"`
	Key            string                              `json:"key"`
	Label          string                              `json:"label"`
	Placeholder    *string                             `json:"placeholder,omitempty"`
	Required       *bool                               `json:"required,omitempty"`
	DefaultValue   any                                 `json:"defaultValue,omitempty"`
	ShowConditions []GetConnectorFactoryShowCondition2 `json:"showConditions,omitempty"`
	Description    *string                             `json:"description,omitempty"`
	Tooltip        *string                             `json:"tooltip,omitempty"`
	IsConfidential *bool                               `json:"isConfidential,omitempty"`
}

func (o *GetConnectorFactoryFormItem2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetConnectorFactoryFormItem2) GetSelectItems() []GetConnectorFactorySelectItem2 {
	if o == nil {
		return []GetConnectorFactorySelectItem2{}
	}
	return o.SelectItems
}

func (o *GetConnectorFactoryFormItem2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetConnectorFactoryFormItem2) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *GetConnectorFactoryFormItem2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *GetConnectorFactoryFormItem2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *GetConnectorFactoryFormItem2) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *GetConnectorFactoryFormItem2) GetShowConditions() []GetConnectorFactoryShowCondition2 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *GetConnectorFactoryFormItem2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetConnectorFactoryFormItem2) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *GetConnectorFactoryFormItem2) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type GetConnectorFactorySelectItem1 struct {
	Value string `json:"value"`
	Title string `json:"title"`
}

func (o *GetConnectorFactorySelectItem1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetConnectorFactorySelectItem1) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type GetConnectorFactoryShowCondition1 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *GetConnectorFactoryShowCondition1) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *GetConnectorFactoryShowCondition1) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type GetConnectorFactoryFormItem1 struct {
	Type           string                              `json:"type"`
	SelectItems    []GetConnectorFactorySelectItem1    `json:"selectItems"`
	Key            string                              `json:"key"`
	Label          string                              `json:"label"`
	Placeholder    *string                             `json:"placeholder,omitempty"`
	Required       *bool                               `json:"required,omitempty"`
	DefaultValue   any                                 `json:"defaultValue,omitempty"`
	ShowConditions []GetConnectorFactoryShowCondition1 `json:"showConditions,omitempty"`
	Description    *string                             `json:"description,omitempty"`
	Tooltip        *string                             `json:"tooltip,omitempty"`
	IsConfidential *bool                               `json:"isConfidential,omitempty"`
}

func (o *GetConnectorFactoryFormItem1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetConnectorFactoryFormItem1) GetSelectItems() []GetConnectorFactorySelectItem1 {
	if o == nil {
		return []GetConnectorFactorySelectItem1{}
	}
	return o.SelectItems
}

func (o *GetConnectorFactoryFormItem1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetConnectorFactoryFormItem1) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *GetConnectorFactoryFormItem1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *GetConnectorFactoryFormItem1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *GetConnectorFactoryFormItem1) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *GetConnectorFactoryFormItem1) GetShowConditions() []GetConnectorFactoryShowCondition1 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *GetConnectorFactoryFormItem1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetConnectorFactoryFormItem1) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *GetConnectorFactoryFormItem1) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type GetConnectorFactoryFormItemUnionType string

const (
	GetConnectorFactoryFormItemUnionTypeGetConnectorFactoryFormItem1 GetConnectorFactoryFormItemUnionType = "GetConnectorFactory_formItem_1"
	GetConnectorFactoryFormItemUnionTypeGetConnectorFactoryFormItem2 GetConnectorFactoryFormItemUnionType = "GetConnectorFactory_formItem_2"
	GetConnectorFactoryFormItemUnionTypeGetConnectorFactoryFormItem3 GetConnectorFactoryFormItemUnionType = "GetConnectorFactory_formItem_3"
)

type GetConnectorFactoryFormItemUnion struct {
	GetConnectorFactoryFormItem1 *GetConnectorFactoryFormItem1 `queryParam:"inline"`
	GetConnectorFactoryFormItem2 *GetConnectorFactoryFormItem2 `queryParam:"inline"`
	GetConnectorFactoryFormItem3 *GetConnectorFactoryFormItem3 `queryParam:"inline"`

	Type GetConnectorFactoryFormItemUnionType
}

func CreateGetConnectorFactoryFormItemUnionGetConnectorFactoryFormItem1(getConnectorFactoryFormItem1 GetConnectorFactoryFormItem1) GetConnectorFactoryFormItemUnion {
	typ := GetConnectorFactoryFormItemUnionTypeGetConnectorFactoryFormItem1

	return GetConnectorFactoryFormItemUnion{
		GetConnectorFactoryFormItem1: &getConnectorFactoryFormItem1,
		Type:                         typ,
	}
}

func CreateGetConnectorFactoryFormItemUnionGetConnectorFactoryFormItem2(getConnectorFactoryFormItem2 GetConnectorFactoryFormItem2) GetConnectorFactoryFormItemUnion {
	typ := GetConnectorFactoryFormItemUnionTypeGetConnectorFactoryFormItem2

	return GetConnectorFactoryFormItemUnion{
		GetConnectorFactoryFormItem2: &getConnectorFactoryFormItem2,
		Type:                         typ,
	}
}

func CreateGetConnectorFactoryFormItemUnionGetConnectorFactoryFormItem3(getConnectorFactoryFormItem3 GetConnectorFactoryFormItem3) GetConnectorFactoryFormItemUnion {
	typ := GetConnectorFactoryFormItemUnionTypeGetConnectorFactoryFormItem3

	return GetConnectorFactoryFormItemUnion{
		GetConnectorFactoryFormItem3: &getConnectorFactoryFormItem3,
		Type:                         typ,
	}
}

func (u *GetConnectorFactoryFormItemUnion) UnmarshalJSON(data []byte) error {

	var getConnectorFactoryFormItem3 GetConnectorFactoryFormItem3 = GetConnectorFactoryFormItem3{}
	if err := utils.UnmarshalJSON(data, &getConnectorFactoryFormItem3, "", true, true); err == nil {
		u.GetConnectorFactoryFormItem3 = &getConnectorFactoryFormItem3
		u.Type = GetConnectorFactoryFormItemUnionTypeGetConnectorFactoryFormItem3
		return nil
	}

	var getConnectorFactoryFormItem1 GetConnectorFactoryFormItem1 = GetConnectorFactoryFormItem1{}
	if err := utils.UnmarshalJSON(data, &getConnectorFactoryFormItem1, "", true, true); err == nil {
		u.GetConnectorFactoryFormItem1 = &getConnectorFactoryFormItem1
		u.Type = GetConnectorFactoryFormItemUnionTypeGetConnectorFactoryFormItem1
		return nil
	}

	var getConnectorFactoryFormItem2 GetConnectorFactoryFormItem2 = GetConnectorFactoryFormItem2{}
	if err := utils.UnmarshalJSON(data, &getConnectorFactoryFormItem2, "", true, true); err == nil {
		u.GetConnectorFactoryFormItem2 = &getConnectorFactoryFormItem2
		u.Type = GetConnectorFactoryFormItemUnionTypeGetConnectorFactoryFormItem2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetConnectorFactoryFormItemUnion", string(data))
}

func (u GetConnectorFactoryFormItemUnion) MarshalJSON() ([]byte, error) {
	if u.GetConnectorFactoryFormItem1 != nil {
		return utils.MarshalJSON(u.GetConnectorFactoryFormItem1, "", true)
	}

	if u.GetConnectorFactoryFormItem2 != nil {
		return utils.MarshalJSON(u.GetConnectorFactoryFormItem2, "", true)
	}

	if u.GetConnectorFactoryFormItem3 != nil {
		return utils.MarshalJSON(u.GetConnectorFactoryFormItem3, "", true)
	}

	return nil, errors.New("could not marshal union type GetConnectorFactoryFormItemUnion: all fields are null")
}

type GetConnectorFactoryPlatform string

const (
	GetConnectorFactoryPlatformNative    GetConnectorFactoryPlatform = "Native"
	GetConnectorFactoryPlatformUniversal GetConnectorFactoryPlatform = "Universal"
	GetConnectorFactoryPlatformWeb       GetConnectorFactoryPlatform = "Web"
)

func (e GetConnectorFactoryPlatform) ToPointer() *GetConnectorFactoryPlatform {
	return &e
}
func (e *GetConnectorFactoryPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "Universal":
		fallthrough
	case "Web":
		*e = GetConnectorFactoryPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectorFactoryPlatform: %v", v)
	}
}

// GetConnectorFactoryResponseBody - Connector factory data.
type GetConnectorFactoryResponseBody struct {
	Type   GetConnectorFactoryType `json:"type"`
	IsDemo *bool                   `json:"isDemo,omitempty"`
	ID     string                  `json:"id"`
	Target string                  `json:"target"`
	// Validator function
	Name GetConnectorFactoryName `json:"name"`
	// Validator function
	Description    GetConnectorFactoryDescription     `json:"description"`
	Logo           string                             `json:"logo"`
	LogoDark       *string                            `json:"logoDark"`
	Readme         string                             `json:"readme"`
	ConfigTemplate *string                            `json:"configTemplate,omitempty"`
	FormItems      []GetConnectorFactoryFormItemUnion `json:"formItems,omitempty"`
	CustomData     map[string]any                     `json:"customData,omitempty"`
	FromEmail      *string                            `json:"fromEmail,omitempty"`
	Platform       *GetConnectorFactoryPlatform       `json:"platform"`
	IsStandard     *bool                              `json:"isStandard,omitempty"`
}

func (o *GetConnectorFactoryResponseBody) GetType() GetConnectorFactoryType {
	if o == nil {
		return GetConnectorFactoryType("")
	}
	return o.Type
}

func (o *GetConnectorFactoryResponseBody) GetIsDemo() *bool {
	if o == nil {
		return nil
	}
	return o.IsDemo
}

func (o *GetConnectorFactoryResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConnectorFactoryResponseBody) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *GetConnectorFactoryResponseBody) GetName() GetConnectorFactoryName {
	if o == nil {
		return GetConnectorFactoryName{}
	}
	return o.Name
}

func (o *GetConnectorFactoryResponseBody) GetDescription() GetConnectorFactoryDescription {
	if o == nil {
		return GetConnectorFactoryDescription{}
	}
	return o.Description
}

func (o *GetConnectorFactoryResponseBody) GetLogo() string {
	if o == nil {
		return ""
	}
	return o.Logo
}

func (o *GetConnectorFactoryResponseBody) GetLogoDark() *string {
	if o == nil {
		return nil
	}
	return o.LogoDark
}

func (o *GetConnectorFactoryResponseBody) GetReadme() string {
	if o == nil {
		return ""
	}
	return o.Readme
}

func (o *GetConnectorFactoryResponseBody) GetConfigTemplate() *string {
	if o == nil {
		return nil
	}
	return o.ConfigTemplate
}

func (o *GetConnectorFactoryResponseBody) GetFormItems() []GetConnectorFactoryFormItemUnion {
	if o == nil {
		return nil
	}
	return o.FormItems
}

func (o *GetConnectorFactoryResponseBody) GetCustomData() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *GetConnectorFactoryResponseBody) GetFromEmail() *string {
	if o == nil {
		return nil
	}
	return o.FromEmail
}

func (o *GetConnectorFactoryResponseBody) GetPlatform() *GetConnectorFactoryPlatform {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *GetConnectorFactoryResponseBody) GetIsStandard() *bool {
	if o == nil {
		return nil
	}
	return o.IsStandard
}

type GetConnectorFactoryResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Connector factory data.
	Object *GetConnectorFactoryResponseBody
}

func (o *GetConnectorFactoryResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetConnectorFactoryResponse) GetObject() *GetConnectorFactoryResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
