// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListOrganizationApplicationRolesRequest struct {
	// The unique identifier of the organization.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The unique identifier of the application.
	ApplicationID string `pathParam:"style=simple,explode=false,name=applicationId"`
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
}

func (l ListOrganizationApplicationRolesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListOrganizationApplicationRolesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListOrganizationApplicationRolesRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListOrganizationApplicationRolesRequest) GetApplicationID() string {
	if o == nil {
		return ""
	}
	return o.ApplicationID
}

func (o *ListOrganizationApplicationRolesRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListOrganizationApplicationRolesRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type ListOrganizationApplicationRolesType string

const (
	ListOrganizationApplicationRolesTypeUser             ListOrganizationApplicationRolesType = "User"
	ListOrganizationApplicationRolesTypeMachineToMachine ListOrganizationApplicationRolesType = "MachineToMachine"
)

func (e ListOrganizationApplicationRolesType) ToPointer() *ListOrganizationApplicationRolesType {
	return &e
}
func (e *ListOrganizationApplicationRolesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "MachineToMachine":
		*e = ListOrganizationApplicationRolesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListOrganizationApplicationRolesType: %v", v)
	}
}

type ListOrganizationApplicationRolesResponseBody struct {
	TenantID    string                               `json:"tenantId"`
	ID          string                               `json:"id"`
	Name        string                               `json:"name"`
	Description *string                              `json:"description"`
	Type        ListOrganizationApplicationRolesType `json:"type"`
}

func (o *ListOrganizationApplicationRolesResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListOrganizationApplicationRolesResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListOrganizationApplicationRolesResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListOrganizationApplicationRolesResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListOrganizationApplicationRolesResponseBody) GetType() ListOrganizationApplicationRolesType {
	if o == nil {
		return ListOrganizationApplicationRolesType("")
	}
	return o.Type
}

type ListOrganizationApplicationRolesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of roles.
	ResponseBodies []ListOrganizationApplicationRolesResponseBody
}

func (o *ListOrganizationApplicationRolesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListOrganizationApplicationRolesResponse) GetResponseBodies() []ListOrganizationApplicationRolesResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
