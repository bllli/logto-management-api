// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type UpdateHookSigningKeyRequest struct {
	// The unique identifier of the hook.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *UpdateHookSigningKeyRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type UpdateHookSigningKeyEvent string

const (
	UpdateHookSigningKeyEventPostRegister                  UpdateHookSigningKeyEvent = "PostRegister"
	UpdateHookSigningKeyEventPostSignIn                    UpdateHookSigningKeyEvent = "PostSignIn"
	UpdateHookSigningKeyEventPostResetPassword             UpdateHookSigningKeyEvent = "PostResetPassword"
	UpdateHookSigningKeyEventUserCreated                   UpdateHookSigningKeyEvent = "User.Created"
	UpdateHookSigningKeyEventUserDeleted                   UpdateHookSigningKeyEvent = "User.Deleted"
	UpdateHookSigningKeyEventUserDataUpdated               UpdateHookSigningKeyEvent = "User.Data.Updated"
	UpdateHookSigningKeyEventUserSuspensionStatusUpdated   UpdateHookSigningKeyEvent = "User.SuspensionStatus.Updated"
	UpdateHookSigningKeyEventRoleCreated                   UpdateHookSigningKeyEvent = "Role.Created"
	UpdateHookSigningKeyEventRoleDeleted                   UpdateHookSigningKeyEvent = "Role.Deleted"
	UpdateHookSigningKeyEventRoleDataUpdated               UpdateHookSigningKeyEvent = "Role.Data.Updated"
	UpdateHookSigningKeyEventRoleScopesUpdated             UpdateHookSigningKeyEvent = "Role.Scopes.Updated"
	UpdateHookSigningKeyEventScopeCreated                  UpdateHookSigningKeyEvent = "Scope.Created"
	UpdateHookSigningKeyEventScopeDeleted                  UpdateHookSigningKeyEvent = "Scope.Deleted"
	UpdateHookSigningKeyEventScopeDataUpdated              UpdateHookSigningKeyEvent = "Scope.Data.Updated"
	UpdateHookSigningKeyEventOrganizationCreated           UpdateHookSigningKeyEvent = "Organization.Created"
	UpdateHookSigningKeyEventOrganizationDeleted           UpdateHookSigningKeyEvent = "Organization.Deleted"
	UpdateHookSigningKeyEventOrganizationDataUpdated       UpdateHookSigningKeyEvent = "Organization.Data.Updated"
	UpdateHookSigningKeyEventOrganizationMembershipUpdated UpdateHookSigningKeyEvent = "Organization.Membership.Updated"
	UpdateHookSigningKeyEventOrganizationRoleCreated       UpdateHookSigningKeyEvent = "OrganizationRole.Created"
	UpdateHookSigningKeyEventOrganizationRoleDeleted       UpdateHookSigningKeyEvent = "OrganizationRole.Deleted"
	UpdateHookSigningKeyEventOrganizationRoleDataUpdated   UpdateHookSigningKeyEvent = "OrganizationRole.Data.Updated"
	UpdateHookSigningKeyEventOrganizationRoleScopesUpdated UpdateHookSigningKeyEvent = "OrganizationRole.Scopes.Updated"
	UpdateHookSigningKeyEventOrganizationScopeCreated      UpdateHookSigningKeyEvent = "OrganizationScope.Created"
	UpdateHookSigningKeyEventOrganizationScopeDeleted      UpdateHookSigningKeyEvent = "OrganizationScope.Deleted"
	UpdateHookSigningKeyEventOrganizationScopeDataUpdated  UpdateHookSigningKeyEvent = "OrganizationScope.Data.Updated"
)

func (e UpdateHookSigningKeyEvent) ToPointer() *UpdateHookSigningKeyEvent {
	return &e
}
func (e *UpdateHookSigningKeyEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PostRegister":
		fallthrough
	case "PostSignIn":
		fallthrough
	case "PostResetPassword":
		fallthrough
	case "User.Created":
		fallthrough
	case "User.Deleted":
		fallthrough
	case "User.Data.Updated":
		fallthrough
	case "User.SuspensionStatus.Updated":
		fallthrough
	case "Role.Created":
		fallthrough
	case "Role.Deleted":
		fallthrough
	case "Role.Data.Updated":
		fallthrough
	case "Role.Scopes.Updated":
		fallthrough
	case "Scope.Created":
		fallthrough
	case "Scope.Deleted":
		fallthrough
	case "Scope.Data.Updated":
		fallthrough
	case "Organization.Created":
		fallthrough
	case "Organization.Deleted":
		fallthrough
	case "Organization.Data.Updated":
		fallthrough
	case "Organization.Membership.Updated":
		fallthrough
	case "OrganizationRole.Created":
		fallthrough
	case "OrganizationRole.Deleted":
		fallthrough
	case "OrganizationRole.Data.Updated":
		fallthrough
	case "OrganizationRole.Scopes.Updated":
		fallthrough
	case "OrganizationScope.Created":
		fallthrough
	case "OrganizationScope.Deleted":
		fallthrough
	case "OrganizationScope.Data.Updated":
		*e = UpdateHookSigningKeyEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateHookSigningKeyEvent: %v", v)
	}
}

type UpdateHookSigningKeyConfig struct {
	URL     string            `json:"url"`
	Headers map[string]string `json:"headers,omitempty"`
	Retries *float64          `json:"retries,omitempty"`
}

func (o *UpdateHookSigningKeyConfig) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateHookSigningKeyConfig) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *UpdateHookSigningKeyConfig) GetRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

// UpdateHookSigningKeyResponseBody - The signing key for the hook was updated successfully.
type UpdateHookSigningKeyResponseBody struct {
	TenantID   string                      `json:"tenantId"`
	ID         string                      `json:"id"`
	Name       string                      `json:"name"`
	Event      *UpdateHookSigningKeyEvent  `json:"event"`
	Events     []UpdateHookSigningKeyEvent `json:"events"`
	Config     UpdateHookSigningKeyConfig  `json:"config"`
	SigningKey string                      `json:"signingKey"`
	Enabled    bool                        `json:"enabled"`
	CreatedAt  float64                     `json:"createdAt"`
}

func (o *UpdateHookSigningKeyResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpdateHookSigningKeyResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateHookSigningKeyResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateHookSigningKeyResponseBody) GetEvent() *UpdateHookSigningKeyEvent {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *UpdateHookSigningKeyResponseBody) GetEvents() []UpdateHookSigningKeyEvent {
	if o == nil {
		return []UpdateHookSigningKeyEvent{}
	}
	return o.Events
}

func (o *UpdateHookSigningKeyResponseBody) GetConfig() UpdateHookSigningKeyConfig {
	if o == nil {
		return UpdateHookSigningKeyConfig{}
	}
	return o.Config
}

func (o *UpdateHookSigningKeyResponseBody) GetSigningKey() string {
	if o == nil {
		return ""
	}
	return o.SigningKey
}

func (o *UpdateHookSigningKeyResponseBody) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *UpdateHookSigningKeyResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type UpdateHookSigningKeyResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The signing key for the hook was updated successfully.
	Object *UpdateHookSigningKeyResponseBody
}

func (o *UpdateHookSigningKeyResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateHookSigningKeyResponse) GetObject() *UpdateHookSigningKeyResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
