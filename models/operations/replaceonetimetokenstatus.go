// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// ReplaceOneTimeTokenStatusStatusRequest - The new status of the one-time token.
type ReplaceOneTimeTokenStatusStatusRequest string

const (
	ReplaceOneTimeTokenStatusStatusRequestActive   ReplaceOneTimeTokenStatusStatusRequest = "active"
	ReplaceOneTimeTokenStatusStatusRequestConsumed ReplaceOneTimeTokenStatusStatusRequest = "consumed"
	ReplaceOneTimeTokenStatusStatusRequestRevoked  ReplaceOneTimeTokenStatusStatusRequest = "revoked"
	ReplaceOneTimeTokenStatusStatusRequestExpired  ReplaceOneTimeTokenStatusStatusRequest = "expired"
)

func (e ReplaceOneTimeTokenStatusStatusRequest) ToPointer() *ReplaceOneTimeTokenStatusStatusRequest {
	return &e
}
func (e *ReplaceOneTimeTokenStatusStatusRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "consumed":
		fallthrough
	case "revoked":
		fallthrough
	case "expired":
		*e = ReplaceOneTimeTokenStatusStatusRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReplaceOneTimeTokenStatusStatusRequest: %v", v)
	}
}

type ReplaceOneTimeTokenStatusRequestBody struct {
	// The new status of the one-time token.
	Status ReplaceOneTimeTokenStatusStatusRequest `json:"status"`
}

func (o *ReplaceOneTimeTokenStatusRequestBody) GetStatus() ReplaceOneTimeTokenStatusStatusRequest {
	if o == nil {
		return ReplaceOneTimeTokenStatusStatusRequest("")
	}
	return o.Status
}

type ReplaceOneTimeTokenStatusRequest struct {
	// The unique identifier of the one time token.
	ID          string                               `pathParam:"style=simple,explode=false,name=id"`
	RequestBody ReplaceOneTimeTokenStatusRequestBody `request:"mediaType=application/json"`
}

func (o *ReplaceOneTimeTokenStatusRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReplaceOneTimeTokenStatusRequest) GetRequestBody() ReplaceOneTimeTokenStatusRequestBody {
	if o == nil {
		return ReplaceOneTimeTokenStatusRequestBody{}
	}
	return o.RequestBody
}

type ReplaceOneTimeTokenStatusContext struct {
	JitOrganizationIds []string `json:"jitOrganizationIds,omitempty"`
}

func (o *ReplaceOneTimeTokenStatusContext) GetJitOrganizationIds() []string {
	if o == nil {
		return nil
	}
	return o.JitOrganizationIds
}

type ReplaceOneTimeTokenStatusStatusResponse string

const (
	ReplaceOneTimeTokenStatusStatusResponseActive   ReplaceOneTimeTokenStatusStatusResponse = "active"
	ReplaceOneTimeTokenStatusStatusResponseConsumed ReplaceOneTimeTokenStatusStatusResponse = "consumed"
	ReplaceOneTimeTokenStatusStatusResponseRevoked  ReplaceOneTimeTokenStatusStatusResponse = "revoked"
	ReplaceOneTimeTokenStatusStatusResponseExpired  ReplaceOneTimeTokenStatusStatusResponse = "expired"
)

func (e ReplaceOneTimeTokenStatusStatusResponse) ToPointer() *ReplaceOneTimeTokenStatusStatusResponse {
	return &e
}
func (e *ReplaceOneTimeTokenStatusStatusResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "consumed":
		fallthrough
	case "revoked":
		fallthrough
	case "expired":
		*e = ReplaceOneTimeTokenStatusStatusResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReplaceOneTimeTokenStatusStatusResponse: %v", v)
	}
}

// ReplaceOneTimeTokenStatusResponseBody - The one-time token status was updated successfully.
type ReplaceOneTimeTokenStatusResponseBody struct {
	TenantID  string                                  `json:"tenantId"`
	ID        string                                  `json:"id"`
	Email     string                                  `json:"email"`
	Token     string                                  `json:"token"`
	Context   ReplaceOneTimeTokenStatusContext        `json:"context"`
	Status    ReplaceOneTimeTokenStatusStatusResponse `json:"status"`
	CreatedAt float64                                 `json:"createdAt"`
	ExpiresAt float64                                 `json:"expiresAt"`
}

func (o *ReplaceOneTimeTokenStatusResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ReplaceOneTimeTokenStatusResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReplaceOneTimeTokenStatusResponseBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *ReplaceOneTimeTokenStatusResponseBody) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *ReplaceOneTimeTokenStatusResponseBody) GetContext() ReplaceOneTimeTokenStatusContext {
	if o == nil {
		return ReplaceOneTimeTokenStatusContext{}
	}
	return o.Context
}

func (o *ReplaceOneTimeTokenStatusResponseBody) GetStatus() ReplaceOneTimeTokenStatusStatusResponse {
	if o == nil {
		return ReplaceOneTimeTokenStatusStatusResponse("")
	}
	return o.Status
}

func (o *ReplaceOneTimeTokenStatusResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ReplaceOneTimeTokenStatusResponseBody) GetExpiresAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresAt
}

type ReplaceOneTimeTokenStatusResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The one-time token status was updated successfully.
	Object *ReplaceOneTimeTokenStatusResponseBody
}

func (o *ReplaceOneTimeTokenStatusResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ReplaceOneTimeTokenStatusResponse) GetObject() *ReplaceOneTimeTokenStatusResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
