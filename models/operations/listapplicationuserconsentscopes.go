// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type ListApplicationUserConsentScopesRequest struct {
	// The unique identifier of the application.
	ApplicationID string `pathParam:"style=simple,explode=false,name=applicationId"`
}

func (o *ListApplicationUserConsentScopesRequest) GetApplicationID() string {
	if o == nil {
		return ""
	}
	return o.ApplicationID
}

type ListApplicationUserConsentScopesOrganizationScope struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (o *ListApplicationUserConsentScopesOrganizationScope) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListApplicationUserConsentScopesOrganizationScope) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListApplicationUserConsentScopesOrganizationScope) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type ListApplicationUserConsentScopesResourceScopeResource struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	Indicator string `json:"indicator"`
}

func (o *ListApplicationUserConsentScopesResourceScopeResource) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListApplicationUserConsentScopesResourceScopeResource) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListApplicationUserConsentScopesResourceScopeResource) GetIndicator() string {
	if o == nil {
		return ""
	}
	return o.Indicator
}

type ResourceScopeScope struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (o *ResourceScopeScope) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResourceScopeScope) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ResourceScopeScope) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type ListApplicationUserConsentScopesResourceScope struct {
	Resource ListApplicationUserConsentScopesResourceScopeResource `json:"resource"`
	Scopes   []ResourceScopeScope                                  `json:"scopes"`
}

func (o *ListApplicationUserConsentScopesResourceScope) GetResource() ListApplicationUserConsentScopesResourceScopeResource {
	if o == nil {
		return ListApplicationUserConsentScopesResourceScopeResource{}
	}
	return o.Resource
}

func (o *ListApplicationUserConsentScopesResourceScope) GetScopes() []ResourceScopeScope {
	if o == nil {
		return []ResourceScopeScope{}
	}
	return o.Scopes
}

type OrganizationResourceScopeResource struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	Indicator string `json:"indicator"`
}

func (o *OrganizationResourceScopeResource) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OrganizationResourceScopeResource) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OrganizationResourceScopeResource) GetIndicator() string {
	if o == nil {
		return ""
	}
	return o.Indicator
}

type OrganizationResourceScopeScope struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (o *OrganizationResourceScopeScope) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OrganizationResourceScopeScope) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OrganizationResourceScopeScope) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type OrganizationResourceScope struct {
	Resource OrganizationResourceScopeResource `json:"resource"`
	Scopes   []OrganizationResourceScopeScope  `json:"scopes"`
}

func (o *OrganizationResourceScope) GetResource() OrganizationResourceScopeResource {
	if o == nil {
		return OrganizationResourceScopeResource{}
	}
	return o.Resource
}

func (o *OrganizationResourceScope) GetScopes() []OrganizationResourceScopeScope {
	if o == nil {
		return []OrganizationResourceScopeScope{}
	}
	return o.Scopes
}

type ListApplicationUserConsentScopesUserScope string

const (
	ListApplicationUserConsentScopesUserScopeProfile                        ListApplicationUserConsentScopesUserScope = "profile"
	ListApplicationUserConsentScopesUserScopeEmail                          ListApplicationUserConsentScopesUserScope = "email"
	ListApplicationUserConsentScopesUserScopePhone                          ListApplicationUserConsentScopesUserScope = "phone"
	ListApplicationUserConsentScopesUserScopeAddress                        ListApplicationUserConsentScopesUserScope = "address"
	ListApplicationUserConsentScopesUserScopeCustomData                     ListApplicationUserConsentScopesUserScope = "custom_data"
	ListApplicationUserConsentScopesUserScopeIdentities                     ListApplicationUserConsentScopesUserScope = "identities"
	ListApplicationUserConsentScopesUserScopeRoles                          ListApplicationUserConsentScopesUserScope = "roles"
	ListApplicationUserConsentScopesUserScopeUrnLogtoScopeOrganizations     ListApplicationUserConsentScopesUserScope = "urn:logto:scope:organizations"
	ListApplicationUserConsentScopesUserScopeUrnLogtoScopeOrganizationRoles ListApplicationUserConsentScopesUserScope = "urn:logto:scope:organization_roles"
)

func (e ListApplicationUserConsentScopesUserScope) ToPointer() *ListApplicationUserConsentScopesUserScope {
	return &e
}
func (e *ListApplicationUserConsentScopesUserScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "profile":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		fallthrough
	case "address":
		fallthrough
	case "custom_data":
		fallthrough
	case "identities":
		fallthrough
	case "roles":
		fallthrough
	case "urn:logto:scope:organizations":
		fallthrough
	case "urn:logto:scope:organization_roles":
		*e = ListApplicationUserConsentScopesUserScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListApplicationUserConsentScopesUserScope: %v", v)
	}
}

// ListApplicationUserConsentScopesResponseBody - All the user consent scopes of the application are listed successfully
type ListApplicationUserConsentScopesResponseBody struct {
	// A list of organization scope details assigned to the application.
	OrganizationScopes []ListApplicationUserConsentScopesOrganizationScope `json:"organizationScopes"`
	// A list of resource scope details grouped by resource id assigned to the application.
	ResourceScopes []ListApplicationUserConsentScopesResourceScope `json:"resourceScopes"`
	// A list of organization resource scope details grouped by resource id assigned to the application.
	OrganizationResourceScopes []OrganizationResourceScope `json:"organizationResourceScopes"`
	// A list of user scope enum value assigned to the application.
	UserScopes []ListApplicationUserConsentScopesUserScope `json:"userScopes"`
}

func (o *ListApplicationUserConsentScopesResponseBody) GetOrganizationScopes() []ListApplicationUserConsentScopesOrganizationScope {
	if o == nil {
		return []ListApplicationUserConsentScopesOrganizationScope{}
	}
	return o.OrganizationScopes
}

func (o *ListApplicationUserConsentScopesResponseBody) GetResourceScopes() []ListApplicationUserConsentScopesResourceScope {
	if o == nil {
		return []ListApplicationUserConsentScopesResourceScope{}
	}
	return o.ResourceScopes
}

func (o *ListApplicationUserConsentScopesResponseBody) GetOrganizationResourceScopes() []OrganizationResourceScope {
	if o == nil {
		return []OrganizationResourceScope{}
	}
	return o.OrganizationResourceScopes
}

func (o *ListApplicationUserConsentScopesResponseBody) GetUserScopes() []ListApplicationUserConsentScopesUserScope {
	if o == nil {
		return []ListApplicationUserConsentScopesUserScope{}
	}
	return o.UserScopes
}

type ListApplicationUserConsentScopesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// All the user consent scopes of the application are listed successfully
	Object *ListApplicationUserConsentScopesResponseBody
}

func (o *ListApplicationUserConsentScopesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListApplicationUserConsentScopesResponse) GetObject() *ListApplicationUserConsentScopesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
