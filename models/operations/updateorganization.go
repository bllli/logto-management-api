// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/bllli/logto-management-api/models/components"
)

// UpdateOrganizationCustomDataRequest - arbitrary
type UpdateOrganizationCustomDataRequest struct {
}

type UpdateOrganizationBrandingRequest struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *UpdateOrganizationBrandingRequest) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *UpdateOrganizationBrandingRequest) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *UpdateOrganizationBrandingRequest) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *UpdateOrganizationBrandingRequest) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

type UpdateOrganizationRequestBody struct {
	TenantID *string `json:"tenantId,omitempty"`
	ID       *string `json:"id,omitempty"`
	// The updated name of the organization.
	Name *string `json:"name,omitempty"`
	// The updated description of the organization.
	Description *string `json:"description,omitempty"`
	// arbitrary
	CustomData    *UpdateOrganizationCustomDataRequest `json:"customData,omitempty"`
	IsMfaRequired *bool                                `json:"isMfaRequired,omitempty"`
	Branding      *UpdateOrganizationBrandingRequest   `json:"branding,omitempty"`
	CreatedAt     *float64                             `json:"createdAt,omitempty"`
}

func (o *UpdateOrganizationRequestBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *UpdateOrganizationRequestBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateOrganizationRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateOrganizationRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateOrganizationRequestBody) GetCustomData() *UpdateOrganizationCustomDataRequest {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *UpdateOrganizationRequestBody) GetIsMfaRequired() *bool {
	if o == nil {
		return nil
	}
	return o.IsMfaRequired
}

func (o *UpdateOrganizationRequestBody) GetBranding() *UpdateOrganizationBrandingRequest {
	if o == nil {
		return nil
	}
	return o.Branding
}

func (o *UpdateOrganizationRequestBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

type UpdateOrganizationRequest struct {
	// The unique identifier of the organization.
	ID          string                        `pathParam:"style=simple,explode=false,name=id"`
	RequestBody UpdateOrganizationRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateOrganizationRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateOrganizationRequest) GetRequestBody() UpdateOrganizationRequestBody {
	if o == nil {
		return UpdateOrganizationRequestBody{}
	}
	return o.RequestBody
}

// UpdateOrganizationCustomDataResponse - arbitrary
type UpdateOrganizationCustomDataResponse struct {
}

type UpdateOrganizationBrandingResponse struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *UpdateOrganizationBrandingResponse) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *UpdateOrganizationBrandingResponse) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *UpdateOrganizationBrandingResponse) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *UpdateOrganizationBrandingResponse) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

// UpdateOrganizationResponseBody - The organization was updated successfully.
type UpdateOrganizationResponseBody struct {
	TenantID    string  `json:"tenantId"`
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	// arbitrary
	CustomData    UpdateOrganizationCustomDataResponse `json:"customData"`
	IsMfaRequired bool                                 `json:"isMfaRequired"`
	Branding      UpdateOrganizationBrandingResponse   `json:"branding"`
	CreatedAt     float64                              `json:"createdAt"`
}

func (o *UpdateOrganizationResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpdateOrganizationResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateOrganizationResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateOrganizationResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateOrganizationResponseBody) GetCustomData() UpdateOrganizationCustomDataResponse {
	if o == nil {
		return UpdateOrganizationCustomDataResponse{}
	}
	return o.CustomData
}

func (o *UpdateOrganizationResponseBody) GetIsMfaRequired() bool {
	if o == nil {
		return false
	}
	return o.IsMfaRequired
}

func (o *UpdateOrganizationResponseBody) GetBranding() UpdateOrganizationBrandingResponse {
	if o == nil {
		return UpdateOrganizationBrandingResponse{}
	}
	return o.Branding
}

func (o *UpdateOrganizationResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type UpdateOrganizationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The organization was updated successfully.
	Object *UpdateOrganizationResponseBody
}

func (o *UpdateOrganizationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateOrganizationResponse) GetObject() *UpdateOrganizationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
