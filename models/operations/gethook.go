// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type GetHookRequest struct {
	// The unique identifier of the hook.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Whether to include execution stats in the response.
	IncludeExecutionStats *string `queryParam:"style=form,explode=true,name=includeExecutionStats"`
}

func (o *GetHookRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetHookRequest) GetIncludeExecutionStats() *string {
	if o == nil {
		return nil
	}
	return o.IncludeExecutionStats
}

type GetHookEvent string

const (
	GetHookEventPostRegister                  GetHookEvent = "PostRegister"
	GetHookEventPostSignIn                    GetHookEvent = "PostSignIn"
	GetHookEventPostResetPassword             GetHookEvent = "PostResetPassword"
	GetHookEventUserCreated                   GetHookEvent = "User.Created"
	GetHookEventUserDeleted                   GetHookEvent = "User.Deleted"
	GetHookEventUserDataUpdated               GetHookEvent = "User.Data.Updated"
	GetHookEventUserSuspensionStatusUpdated   GetHookEvent = "User.SuspensionStatus.Updated"
	GetHookEventRoleCreated                   GetHookEvent = "Role.Created"
	GetHookEventRoleDeleted                   GetHookEvent = "Role.Deleted"
	GetHookEventRoleDataUpdated               GetHookEvent = "Role.Data.Updated"
	GetHookEventRoleScopesUpdated             GetHookEvent = "Role.Scopes.Updated"
	GetHookEventScopeCreated                  GetHookEvent = "Scope.Created"
	GetHookEventScopeDeleted                  GetHookEvent = "Scope.Deleted"
	GetHookEventScopeDataUpdated              GetHookEvent = "Scope.Data.Updated"
	GetHookEventOrganizationCreated           GetHookEvent = "Organization.Created"
	GetHookEventOrganizationDeleted           GetHookEvent = "Organization.Deleted"
	GetHookEventOrganizationDataUpdated       GetHookEvent = "Organization.Data.Updated"
	GetHookEventOrganizationMembershipUpdated GetHookEvent = "Organization.Membership.Updated"
	GetHookEventOrganizationRoleCreated       GetHookEvent = "OrganizationRole.Created"
	GetHookEventOrganizationRoleDeleted       GetHookEvent = "OrganizationRole.Deleted"
	GetHookEventOrganizationRoleDataUpdated   GetHookEvent = "OrganizationRole.Data.Updated"
	GetHookEventOrganizationRoleScopesUpdated GetHookEvent = "OrganizationRole.Scopes.Updated"
	GetHookEventOrganizationScopeCreated      GetHookEvent = "OrganizationScope.Created"
	GetHookEventOrganizationScopeDeleted      GetHookEvent = "OrganizationScope.Deleted"
	GetHookEventOrganizationScopeDataUpdated  GetHookEvent = "OrganizationScope.Data.Updated"
)

func (e GetHookEvent) ToPointer() *GetHookEvent {
	return &e
}
func (e *GetHookEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PostRegister":
		fallthrough
	case "PostSignIn":
		fallthrough
	case "PostResetPassword":
		fallthrough
	case "User.Created":
		fallthrough
	case "User.Deleted":
		fallthrough
	case "User.Data.Updated":
		fallthrough
	case "User.SuspensionStatus.Updated":
		fallthrough
	case "Role.Created":
		fallthrough
	case "Role.Deleted":
		fallthrough
	case "Role.Data.Updated":
		fallthrough
	case "Role.Scopes.Updated":
		fallthrough
	case "Scope.Created":
		fallthrough
	case "Scope.Deleted":
		fallthrough
	case "Scope.Data.Updated":
		fallthrough
	case "Organization.Created":
		fallthrough
	case "Organization.Deleted":
		fallthrough
	case "Organization.Data.Updated":
		fallthrough
	case "Organization.Membership.Updated":
		fallthrough
	case "OrganizationRole.Created":
		fallthrough
	case "OrganizationRole.Deleted":
		fallthrough
	case "OrganizationRole.Data.Updated":
		fallthrough
	case "OrganizationRole.Scopes.Updated":
		fallthrough
	case "OrganizationScope.Created":
		fallthrough
	case "OrganizationScope.Deleted":
		fallthrough
	case "OrganizationScope.Data.Updated":
		*e = GetHookEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetHookEvent: %v", v)
	}
}

type GetHookConfig struct {
	URL     string            `json:"url"`
	Headers map[string]string `json:"headers,omitempty"`
	Retries *float64          `json:"retries,omitempty"`
}

func (o *GetHookConfig) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetHookConfig) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetHookConfig) GetRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

type GetHookExecutionStats struct {
	SuccessCount float64 `json:"successCount"`
	RequestCount float64 `json:"requestCount"`
}

func (o *GetHookExecutionStats) GetSuccessCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.SuccessCount
}

func (o *GetHookExecutionStats) GetRequestCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestCount
}

// GetHookResponseBody - Details of the hook.
type GetHookResponseBody struct {
	TenantID       string                 `json:"tenantId"`
	ID             string                 `json:"id"`
	Name           string                 `json:"name"`
	Event          *GetHookEvent          `json:"event"`
	Events         []GetHookEvent         `json:"events"`
	Config         GetHookConfig          `json:"config"`
	SigningKey     string                 `json:"signingKey"`
	Enabled        bool                   `json:"enabled"`
	CreatedAt      float64                `json:"createdAt"`
	ExecutionStats *GetHookExecutionStats `json:"executionStats,omitempty"`
}

func (o *GetHookResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *GetHookResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetHookResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetHookResponseBody) GetEvent() *GetHookEvent {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *GetHookResponseBody) GetEvents() []GetHookEvent {
	if o == nil {
		return []GetHookEvent{}
	}
	return o.Events
}

func (o *GetHookResponseBody) GetConfig() GetHookConfig {
	if o == nil {
		return GetHookConfig{}
	}
	return o.Config
}

func (o *GetHookResponseBody) GetSigningKey() string {
	if o == nil {
		return ""
	}
	return o.SigningKey
}

func (o *GetHookResponseBody) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *GetHookResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetHookResponseBody) GetExecutionStats() *GetHookExecutionStats {
	if o == nil {
		return nil
	}
	return o.ExecutionStats
}

type GetHookResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Details of the hook.
	Object *GetHookResponseBody
}

func (o *GetHookResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetHookResponse) GetObject() *GetHookResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
