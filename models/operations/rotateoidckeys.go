// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// RotateOidcKeysKeyType - Private keys are used to sign OIDC JWTs. Cookie keys are used to sign OIDC cookies. For clients, they do not need to know private keys to verify OIDC JWTs; they can use public keys from the JWKS endpoint instead.
type RotateOidcKeysKeyType string

const (
	RotateOidcKeysKeyTypePrivateKeys RotateOidcKeysKeyType = "private-keys"
	RotateOidcKeysKeyTypeCookieKeys  RotateOidcKeysKeyType = "cookie-keys"
)

func (e RotateOidcKeysKeyType) ToPointer() *RotateOidcKeysKeyType {
	return &e
}
func (e *RotateOidcKeysKeyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-keys":
		fallthrough
	case "cookie-keys":
		*e = RotateOidcKeysKeyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RotateOidcKeysKeyType: %v", v)
	}
}

// SigningKeyAlgorithmRequest - The signing key algorithm the new generated private key is using.
//
// Only applicable when `keyType` is `private-keys`.
type SigningKeyAlgorithmRequest string

const (
	SigningKeyAlgorithmRequestRsa SigningKeyAlgorithmRequest = "RSA"
	SigningKeyAlgorithmRequestEc  SigningKeyAlgorithmRequest = "EC"
)

func (e SigningKeyAlgorithmRequest) ToPointer() *SigningKeyAlgorithmRequest {
	return &e
}
func (e *SigningKeyAlgorithmRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RSA":
		fallthrough
	case "EC":
		*e = SigningKeyAlgorithmRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SigningKeyAlgorithmRequest: %v", v)
	}
}

type RotateOidcKeysRequestBody struct {
	// The signing key algorithm the new generated private key is using.
	//
	// Only applicable when `keyType` is `private-keys`.
	SigningKeyAlgorithm *SigningKeyAlgorithmRequest `json:"signingKeyAlgorithm,omitempty"`
}

func (o *RotateOidcKeysRequestBody) GetSigningKeyAlgorithm() *SigningKeyAlgorithmRequest {
	if o == nil {
		return nil
	}
	return o.SigningKeyAlgorithm
}

type RotateOidcKeysRequest struct {
	// Private keys are used to sign OIDC JWTs. Cookie keys are used to sign OIDC cookies. For clients, they do not need to know private keys to verify OIDC JWTs; they can use public keys from the JWKS endpoint instead.
	KeyType     RotateOidcKeysKeyType     `pathParam:"style=simple,explode=false,name=keyType"`
	RequestBody RotateOidcKeysRequestBody `request:"mediaType=application/json"`
}

func (o *RotateOidcKeysRequest) GetKeyType() RotateOidcKeysKeyType {
	if o == nil {
		return RotateOidcKeysKeyType("")
	}
	return o.KeyType
}

func (o *RotateOidcKeysRequest) GetRequestBody() RotateOidcKeysRequestBody {
	if o == nil {
		return RotateOidcKeysRequestBody{}
	}
	return o.RequestBody
}

type RotateOidcKeysSigningKeyAlgorithmResponse string

const (
	RotateOidcKeysSigningKeyAlgorithmResponseRsa RotateOidcKeysSigningKeyAlgorithmResponse = "RSA"
	RotateOidcKeysSigningKeyAlgorithmResponseEc  RotateOidcKeysSigningKeyAlgorithmResponse = "EC"
)

func (e RotateOidcKeysSigningKeyAlgorithmResponse) ToPointer() *RotateOidcKeysSigningKeyAlgorithmResponse {
	return &e
}
func (e *RotateOidcKeysSigningKeyAlgorithmResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RSA":
		fallthrough
	case "EC":
		*e = RotateOidcKeysSigningKeyAlgorithmResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RotateOidcKeysSigningKeyAlgorithmResponse: %v", v)
	}
}

type RotateOidcKeysResponseBody struct {
	ID                  string                                     `json:"id"`
	CreatedAt           float64                                    `json:"createdAt"`
	SigningKeyAlgorithm *RotateOidcKeysSigningKeyAlgorithmResponse `json:"signingKeyAlgorithm,omitempty"`
}

func (o *RotateOidcKeysResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RotateOidcKeysResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *RotateOidcKeysResponseBody) GetSigningKeyAlgorithm() *RotateOidcKeysSigningKeyAlgorithmResponse {
	if o == nil {
		return nil
	}
	return o.SigningKeyAlgorithm
}

type RotateOidcKeysResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// An array of OIDC signing keys after rotation.
	ResponseBodies []RotateOidcKeysResponseBody
}

func (o *RotateOidcKeysResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RotateOidcKeysResponse) GetResponseBodies() []RotateOidcKeysResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
