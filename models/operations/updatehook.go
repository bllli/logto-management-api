// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// UpdateHookEventRequest - Use `events` instead.
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type UpdateHookEventRequest string

const (
	UpdateHookEventRequestPostRegister                  UpdateHookEventRequest = "PostRegister"
	UpdateHookEventRequestPostSignIn                    UpdateHookEventRequest = "PostSignIn"
	UpdateHookEventRequestPostResetPassword             UpdateHookEventRequest = "PostResetPassword"
	UpdateHookEventRequestUserCreated                   UpdateHookEventRequest = "User.Created"
	UpdateHookEventRequestUserDeleted                   UpdateHookEventRequest = "User.Deleted"
	UpdateHookEventRequestUserDataUpdated               UpdateHookEventRequest = "User.Data.Updated"
	UpdateHookEventRequestUserSuspensionStatusUpdated   UpdateHookEventRequest = "User.SuspensionStatus.Updated"
	UpdateHookEventRequestRoleCreated                   UpdateHookEventRequest = "Role.Created"
	UpdateHookEventRequestRoleDeleted                   UpdateHookEventRequest = "Role.Deleted"
	UpdateHookEventRequestRoleDataUpdated               UpdateHookEventRequest = "Role.Data.Updated"
	UpdateHookEventRequestRoleScopesUpdated             UpdateHookEventRequest = "Role.Scopes.Updated"
	UpdateHookEventRequestScopeCreated                  UpdateHookEventRequest = "Scope.Created"
	UpdateHookEventRequestScopeDeleted                  UpdateHookEventRequest = "Scope.Deleted"
	UpdateHookEventRequestScopeDataUpdated              UpdateHookEventRequest = "Scope.Data.Updated"
	UpdateHookEventRequestOrganizationCreated           UpdateHookEventRequest = "Organization.Created"
	UpdateHookEventRequestOrganizationDeleted           UpdateHookEventRequest = "Organization.Deleted"
	UpdateHookEventRequestOrganizationDataUpdated       UpdateHookEventRequest = "Organization.Data.Updated"
	UpdateHookEventRequestOrganizationMembershipUpdated UpdateHookEventRequest = "Organization.Membership.Updated"
	UpdateHookEventRequestOrganizationRoleCreated       UpdateHookEventRequest = "OrganizationRole.Created"
	UpdateHookEventRequestOrganizationRoleDeleted       UpdateHookEventRequest = "OrganizationRole.Deleted"
	UpdateHookEventRequestOrganizationRoleDataUpdated   UpdateHookEventRequest = "OrganizationRole.Data.Updated"
	UpdateHookEventRequestOrganizationRoleScopesUpdated UpdateHookEventRequest = "OrganizationRole.Scopes.Updated"
	UpdateHookEventRequestOrganizationScopeCreated      UpdateHookEventRequest = "OrganizationScope.Created"
	UpdateHookEventRequestOrganizationScopeDeleted      UpdateHookEventRequest = "OrganizationScope.Deleted"
	UpdateHookEventRequestOrganizationScopeDataUpdated  UpdateHookEventRequest = "OrganizationScope.Data.Updated"
)

func (e UpdateHookEventRequest) ToPointer() *UpdateHookEventRequest {
	return &e
}
func (e *UpdateHookEventRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PostRegister":
		fallthrough
	case "PostSignIn":
		fallthrough
	case "PostResetPassword":
		fallthrough
	case "User.Created":
		fallthrough
	case "User.Deleted":
		fallthrough
	case "User.Data.Updated":
		fallthrough
	case "User.SuspensionStatus.Updated":
		fallthrough
	case "Role.Created":
		fallthrough
	case "Role.Deleted":
		fallthrough
	case "Role.Data.Updated":
		fallthrough
	case "Role.Scopes.Updated":
		fallthrough
	case "Scope.Created":
		fallthrough
	case "Scope.Deleted":
		fallthrough
	case "Scope.Data.Updated":
		fallthrough
	case "Organization.Created":
		fallthrough
	case "Organization.Deleted":
		fallthrough
	case "Organization.Data.Updated":
		fallthrough
	case "Organization.Membership.Updated":
		fallthrough
	case "OrganizationRole.Created":
		fallthrough
	case "OrganizationRole.Deleted":
		fallthrough
	case "OrganizationRole.Data.Updated":
		fallthrough
	case "OrganizationRole.Scopes.Updated":
		fallthrough
	case "OrganizationScope.Created":
		fallthrough
	case "OrganizationScope.Deleted":
		fallthrough
	case "OrganizationScope.Data.Updated":
		*e = UpdateHookEventRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateHookEventRequest: %v", v)
	}
}

type UpdateHookConfigRequest struct {
	URL     string            `json:"url"`
	Headers map[string]string `json:"headers,omitempty"`
	// Now the retry times is fixed to 3. Keep for backward compatibility.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Retries *float64 `json:"retries,omitempty"`
}

func (o *UpdateHookConfigRequest) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateHookConfigRequest) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *UpdateHookConfigRequest) GetRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

type UpdateHookRequestBody struct {
	TenantID *string `json:"tenantId,omitempty"`
	// The updated name of the hook.
	Name *string `json:"name,omitempty"`
	// Use `events` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Event *UpdateHookEventRequest `json:"event,omitempty"`
	// An array of updated hook events.
	Events    []UpdateHookEventRequest `json:"events,omitempty"`
	Config    *UpdateHookConfigRequest `json:"config,omitempty"`
	Enabled   *bool                    `json:"enabled,omitempty"`
	CreatedAt *float64                 `json:"createdAt,omitempty"`
}

func (o *UpdateHookRequestBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *UpdateHookRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateHookRequestBody) GetEvent() *UpdateHookEventRequest {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *UpdateHookRequestBody) GetEvents() []UpdateHookEventRequest {
	if o == nil {
		return nil
	}
	return o.Events
}

func (o *UpdateHookRequestBody) GetConfig() *UpdateHookConfigRequest {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *UpdateHookRequestBody) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UpdateHookRequestBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

type UpdateHookRequest struct {
	// The unique identifier of the hook.
	ID          string                `pathParam:"style=simple,explode=false,name=id"`
	RequestBody UpdateHookRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateHookRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateHookRequest) GetRequestBody() UpdateHookRequestBody {
	if o == nil {
		return UpdateHookRequestBody{}
	}
	return o.RequestBody
}

type UpdateHookEventResponse string

const (
	UpdateHookEventResponsePostRegister                  UpdateHookEventResponse = "PostRegister"
	UpdateHookEventResponsePostSignIn                    UpdateHookEventResponse = "PostSignIn"
	UpdateHookEventResponsePostResetPassword             UpdateHookEventResponse = "PostResetPassword"
	UpdateHookEventResponseUserCreated                   UpdateHookEventResponse = "User.Created"
	UpdateHookEventResponseUserDeleted                   UpdateHookEventResponse = "User.Deleted"
	UpdateHookEventResponseUserDataUpdated               UpdateHookEventResponse = "User.Data.Updated"
	UpdateHookEventResponseUserSuspensionStatusUpdated   UpdateHookEventResponse = "User.SuspensionStatus.Updated"
	UpdateHookEventResponseRoleCreated                   UpdateHookEventResponse = "Role.Created"
	UpdateHookEventResponseRoleDeleted                   UpdateHookEventResponse = "Role.Deleted"
	UpdateHookEventResponseRoleDataUpdated               UpdateHookEventResponse = "Role.Data.Updated"
	UpdateHookEventResponseRoleScopesUpdated             UpdateHookEventResponse = "Role.Scopes.Updated"
	UpdateHookEventResponseScopeCreated                  UpdateHookEventResponse = "Scope.Created"
	UpdateHookEventResponseScopeDeleted                  UpdateHookEventResponse = "Scope.Deleted"
	UpdateHookEventResponseScopeDataUpdated              UpdateHookEventResponse = "Scope.Data.Updated"
	UpdateHookEventResponseOrganizationCreated           UpdateHookEventResponse = "Organization.Created"
	UpdateHookEventResponseOrganizationDeleted           UpdateHookEventResponse = "Organization.Deleted"
	UpdateHookEventResponseOrganizationDataUpdated       UpdateHookEventResponse = "Organization.Data.Updated"
	UpdateHookEventResponseOrganizationMembershipUpdated UpdateHookEventResponse = "Organization.Membership.Updated"
	UpdateHookEventResponseOrganizationRoleCreated       UpdateHookEventResponse = "OrganizationRole.Created"
	UpdateHookEventResponseOrganizationRoleDeleted       UpdateHookEventResponse = "OrganizationRole.Deleted"
	UpdateHookEventResponseOrganizationRoleDataUpdated   UpdateHookEventResponse = "OrganizationRole.Data.Updated"
	UpdateHookEventResponseOrganizationRoleScopesUpdated UpdateHookEventResponse = "OrganizationRole.Scopes.Updated"
	UpdateHookEventResponseOrganizationScopeCreated      UpdateHookEventResponse = "OrganizationScope.Created"
	UpdateHookEventResponseOrganizationScopeDeleted      UpdateHookEventResponse = "OrganizationScope.Deleted"
	UpdateHookEventResponseOrganizationScopeDataUpdated  UpdateHookEventResponse = "OrganizationScope.Data.Updated"
)

func (e UpdateHookEventResponse) ToPointer() *UpdateHookEventResponse {
	return &e
}
func (e *UpdateHookEventResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PostRegister":
		fallthrough
	case "PostSignIn":
		fallthrough
	case "PostResetPassword":
		fallthrough
	case "User.Created":
		fallthrough
	case "User.Deleted":
		fallthrough
	case "User.Data.Updated":
		fallthrough
	case "User.SuspensionStatus.Updated":
		fallthrough
	case "Role.Created":
		fallthrough
	case "Role.Deleted":
		fallthrough
	case "Role.Data.Updated":
		fallthrough
	case "Role.Scopes.Updated":
		fallthrough
	case "Scope.Created":
		fallthrough
	case "Scope.Deleted":
		fallthrough
	case "Scope.Data.Updated":
		fallthrough
	case "Organization.Created":
		fallthrough
	case "Organization.Deleted":
		fallthrough
	case "Organization.Data.Updated":
		fallthrough
	case "Organization.Membership.Updated":
		fallthrough
	case "OrganizationRole.Created":
		fallthrough
	case "OrganizationRole.Deleted":
		fallthrough
	case "OrganizationRole.Data.Updated":
		fallthrough
	case "OrganizationRole.Scopes.Updated":
		fallthrough
	case "OrganizationScope.Created":
		fallthrough
	case "OrganizationScope.Deleted":
		fallthrough
	case "OrganizationScope.Data.Updated":
		*e = UpdateHookEventResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateHookEventResponse: %v", v)
	}
}

type UpdateHookConfigResponse struct {
	URL     string            `json:"url"`
	Headers map[string]string `json:"headers,omitempty"`
	Retries *float64          `json:"retries,omitempty"`
}

func (o *UpdateHookConfigResponse) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateHookConfigResponse) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *UpdateHookConfigResponse) GetRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

// UpdateHookResponseBody - The hook was updated successfully.
type UpdateHookResponseBody struct {
	TenantID   string                    `json:"tenantId"`
	ID         string                    `json:"id"`
	Name       string                    `json:"name"`
	Event      *UpdateHookEventResponse  `json:"event"`
	Events     []UpdateHookEventResponse `json:"events"`
	Config     UpdateHookConfigResponse  `json:"config"`
	SigningKey string                    `json:"signingKey"`
	Enabled    bool                      `json:"enabled"`
	CreatedAt  float64                   `json:"createdAt"`
}

func (o *UpdateHookResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpdateHookResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateHookResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateHookResponseBody) GetEvent() *UpdateHookEventResponse {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *UpdateHookResponseBody) GetEvents() []UpdateHookEventResponse {
	if o == nil {
		return []UpdateHookEventResponse{}
	}
	return o.Events
}

func (o *UpdateHookResponseBody) GetConfig() UpdateHookConfigResponse {
	if o == nil {
		return UpdateHookConfigResponse{}
	}
	return o.Config
}

func (o *UpdateHookResponseBody) GetSigningKey() string {
	if o == nil {
		return ""
	}
	return o.SigningKey
}

func (o *UpdateHookResponseBody) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *UpdateHookResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type UpdateHookResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The hook was updated successfully.
	Object *UpdateHookResponseBody
}

func (o *UpdateHookResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateHookResponse) GetObject() *UpdateHookResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
