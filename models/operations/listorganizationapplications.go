// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListOrganizationApplicationsRequest struct {
	// The unique identifier of the organization.
	ID string  `pathParam:"style=simple,explode=false,name=id"`
	Q  *string `queryParam:"style=form,explode=true,name=q"`
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
}

func (l ListOrganizationApplicationsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListOrganizationApplicationsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListOrganizationApplicationsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListOrganizationApplicationsRequest) GetQ() *string {
	if o == nil {
		return nil
	}
	return o.Q
}

func (o *ListOrganizationApplicationsRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListOrganizationApplicationsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type ListOrganizationApplicationsType string

const (
	ListOrganizationApplicationsTypeNative           ListOrganizationApplicationsType = "Native"
	ListOrganizationApplicationsTypeSpa              ListOrganizationApplicationsType = "SPA"
	ListOrganizationApplicationsTypeTraditional      ListOrganizationApplicationsType = "Traditional"
	ListOrganizationApplicationsTypeMachineToMachine ListOrganizationApplicationsType = "MachineToMachine"
	ListOrganizationApplicationsTypeProtected        ListOrganizationApplicationsType = "Protected"
	ListOrganizationApplicationsTypeSaml             ListOrganizationApplicationsType = "SAML"
)

func (e ListOrganizationApplicationsType) ToPointer() *ListOrganizationApplicationsType {
	return &e
}
func (e *ListOrganizationApplicationsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "SPA":
		fallthrough
	case "Traditional":
		fallthrough
	case "MachineToMachine":
		fallthrough
	case "Protected":
		fallthrough
	case "SAML":
		*e = ListOrganizationApplicationsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListOrganizationApplicationsType: %v", v)
	}
}

// ListOrganizationApplicationsRedirectUris2 - Validator function
type ListOrganizationApplicationsRedirectUris2 struct {
}

// ListOrganizationApplicationsRedirectUris1 - Validator function
type ListOrganizationApplicationsRedirectUris1 struct {
}

type ListOrganizationApplicationsRedirectUrisUnionType string

const (
	ListOrganizationApplicationsRedirectUrisUnionTypeListOrganizationApplicationsRedirectUris1 ListOrganizationApplicationsRedirectUrisUnionType = "ListOrganizationApplications_redirectUris_1"
	ListOrganizationApplicationsRedirectUrisUnionTypeListOrganizationApplicationsRedirectUris2 ListOrganizationApplicationsRedirectUrisUnionType = "ListOrganizationApplications_redirectUris_2"
)

type ListOrganizationApplicationsRedirectUrisUnion struct {
	ListOrganizationApplicationsRedirectUris1 *ListOrganizationApplicationsRedirectUris1 `queryParam:"inline"`
	ListOrganizationApplicationsRedirectUris2 *ListOrganizationApplicationsRedirectUris2 `queryParam:"inline"`

	Type ListOrganizationApplicationsRedirectUrisUnionType
}

func CreateListOrganizationApplicationsRedirectUrisUnionListOrganizationApplicationsRedirectUris1(listOrganizationApplicationsRedirectUris1 ListOrganizationApplicationsRedirectUris1) ListOrganizationApplicationsRedirectUrisUnion {
	typ := ListOrganizationApplicationsRedirectUrisUnionTypeListOrganizationApplicationsRedirectUris1

	return ListOrganizationApplicationsRedirectUrisUnion{
		ListOrganizationApplicationsRedirectUris1: &listOrganizationApplicationsRedirectUris1,
		Type: typ,
	}
}

func CreateListOrganizationApplicationsRedirectUrisUnionListOrganizationApplicationsRedirectUris2(listOrganizationApplicationsRedirectUris2 ListOrganizationApplicationsRedirectUris2) ListOrganizationApplicationsRedirectUrisUnion {
	typ := ListOrganizationApplicationsRedirectUrisUnionTypeListOrganizationApplicationsRedirectUris2

	return ListOrganizationApplicationsRedirectUrisUnion{
		ListOrganizationApplicationsRedirectUris2: &listOrganizationApplicationsRedirectUris2,
		Type: typ,
	}
}

func (u *ListOrganizationApplicationsRedirectUrisUnion) UnmarshalJSON(data []byte) error {

	var listOrganizationApplicationsRedirectUris1 ListOrganizationApplicationsRedirectUris1 = ListOrganizationApplicationsRedirectUris1{}
	if err := utils.UnmarshalJSON(data, &listOrganizationApplicationsRedirectUris1, "", true, true); err == nil {
		u.ListOrganizationApplicationsRedirectUris1 = &listOrganizationApplicationsRedirectUris1
		u.Type = ListOrganizationApplicationsRedirectUrisUnionTypeListOrganizationApplicationsRedirectUris1
		return nil
	}

	var listOrganizationApplicationsRedirectUris2 ListOrganizationApplicationsRedirectUris2 = ListOrganizationApplicationsRedirectUris2{}
	if err := utils.UnmarshalJSON(data, &listOrganizationApplicationsRedirectUris2, "", true, true); err == nil {
		u.ListOrganizationApplicationsRedirectUris2 = &listOrganizationApplicationsRedirectUris2
		u.Type = ListOrganizationApplicationsRedirectUrisUnionTypeListOrganizationApplicationsRedirectUris2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListOrganizationApplicationsRedirectUrisUnion", string(data))
}

func (u ListOrganizationApplicationsRedirectUrisUnion) MarshalJSON() ([]byte, error) {
	if u.ListOrganizationApplicationsRedirectUris1 != nil {
		return utils.MarshalJSON(u.ListOrganizationApplicationsRedirectUris1, "", true)
	}

	if u.ListOrganizationApplicationsRedirectUris2 != nil {
		return utils.MarshalJSON(u.ListOrganizationApplicationsRedirectUris2, "", true)
	}

	return nil, errors.New("could not marshal union type ListOrganizationApplicationsRedirectUrisUnion: all fields are null")
}

type ListOrganizationApplicationsOidcClientMetadata struct {
	RedirectUris                     []ListOrganizationApplicationsRedirectUrisUnion `json:"redirectUris"`
	PostLogoutRedirectUris           []string                                        `json:"postLogoutRedirectUris"`
	BackchannelLogoutURI             *string                                         `json:"backchannelLogoutUri,omitempty"`
	BackchannelLogoutSessionRequired *bool                                           `json:"backchannelLogoutSessionRequired,omitempty"`
	LogoURI                          *string                                         `json:"logoUri,omitempty"`
}

func (o *ListOrganizationApplicationsOidcClientMetadata) GetRedirectUris() []ListOrganizationApplicationsRedirectUrisUnion {
	if o == nil {
		return []ListOrganizationApplicationsRedirectUrisUnion{}
	}
	return o.RedirectUris
}

func (o *ListOrganizationApplicationsOidcClientMetadata) GetPostLogoutRedirectUris() []string {
	if o == nil {
		return []string{}
	}
	return o.PostLogoutRedirectUris
}

func (o *ListOrganizationApplicationsOidcClientMetadata) GetBackchannelLogoutURI() *string {
	if o == nil {
		return nil
	}
	return o.BackchannelLogoutURI
}

func (o *ListOrganizationApplicationsOidcClientMetadata) GetBackchannelLogoutSessionRequired() *bool {
	if o == nil {
		return nil
	}
	return o.BackchannelLogoutSessionRequired
}

func (o *ListOrganizationApplicationsOidcClientMetadata) GetLogoURI() *string {
	if o == nil {
		return nil
	}
	return o.LogoURI
}

type ListOrganizationApplicationsCustomClientMetadata struct {
	CorsAllowedOrigins      []string `json:"corsAllowedOrigins,omitempty"`
	IDTokenTTL              *float64 `json:"idTokenTtl,omitempty"`
	RefreshTokenTTL         *float64 `json:"refreshTokenTtl,omitempty"`
	RefreshTokenTTLInDays   *float64 `json:"refreshTokenTtlInDays,omitempty"`
	TenantID                *string  `json:"tenantId,omitempty"`
	AlwaysIssueRefreshToken *bool    `json:"alwaysIssueRefreshToken,omitempty"`
	RotateRefreshToken      *bool    `json:"rotateRefreshToken,omitempty"`
}

func (o *ListOrganizationApplicationsCustomClientMetadata) GetCorsAllowedOrigins() []string {
	if o == nil {
		return nil
	}
	return o.CorsAllowedOrigins
}

func (o *ListOrganizationApplicationsCustomClientMetadata) GetIDTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.IDTokenTTL
}

func (o *ListOrganizationApplicationsCustomClientMetadata) GetRefreshTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTL
}

func (o *ListOrganizationApplicationsCustomClientMetadata) GetRefreshTokenTTLInDays() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTLInDays
}

func (o *ListOrganizationApplicationsCustomClientMetadata) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *ListOrganizationApplicationsCustomClientMetadata) GetAlwaysIssueRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysIssueRefreshToken
}

func (o *ListOrganizationApplicationsCustomClientMetadata) GetRotateRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.RotateRefreshToken
}

type ListOrganizationApplicationsPageRule struct {
	Path string `json:"path"`
}

func (o *ListOrganizationApplicationsPageRule) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type ListOrganizationApplicationsStatus string

const (
	ListOrganizationApplicationsStatusPendingVerification ListOrganizationApplicationsStatus = "PendingVerification"
	ListOrganizationApplicationsStatusPendingSsl          ListOrganizationApplicationsStatus = "PendingSsl"
	ListOrganizationApplicationsStatusActive              ListOrganizationApplicationsStatus = "Active"
	ListOrganizationApplicationsStatusError               ListOrganizationApplicationsStatus = "Error"
)

func (e ListOrganizationApplicationsStatus) ToPointer() *ListOrganizationApplicationsStatus {
	return &e
}
func (e *ListOrganizationApplicationsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PendingVerification":
		fallthrough
	case "PendingSsl":
		fallthrough
	case "Active":
		fallthrough
	case "Error":
		*e = ListOrganizationApplicationsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListOrganizationApplicationsStatus: %v", v)
	}
}

type ListOrganizationApplicationsDNSRecord struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

func (o *ListOrganizationApplicationsDNSRecord) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListOrganizationApplicationsDNSRecord) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ListOrganizationApplicationsDNSRecord) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListOrganizationApplicationsValidationError struct {
	Message string `json:"message"`
}

func (o *ListOrganizationApplicationsValidationError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type ListOrganizationApplicationsSsl struct {
	Status           string                                        `json:"status"`
	ValidationErrors []ListOrganizationApplicationsValidationError `json:"validation_errors,omitempty"`
}

func (o *ListOrganizationApplicationsSsl) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *ListOrganizationApplicationsSsl) GetValidationErrors() []ListOrganizationApplicationsValidationError {
	if o == nil {
		return nil
	}
	return o.ValidationErrors
}

type ListOrganizationApplicationsCloudflareData struct {
	ID                 string                          `json:"id"`
	Status             string                          `json:"status"`
	Ssl                ListOrganizationApplicationsSsl `json:"ssl"`
	VerificationErrors []string                        `json:"verification_errors,omitempty"`
}

func (o *ListOrganizationApplicationsCloudflareData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListOrganizationApplicationsCloudflareData) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *ListOrganizationApplicationsCloudflareData) GetSsl() ListOrganizationApplicationsSsl {
	if o == nil {
		return ListOrganizationApplicationsSsl{}
	}
	return o.Ssl
}

func (o *ListOrganizationApplicationsCloudflareData) GetVerificationErrors() []string {
	if o == nil {
		return nil
	}
	return o.VerificationErrors
}

type ListOrganizationApplicationsCustomDomain struct {
	Domain         string                                      `json:"domain"`
	Status         ListOrganizationApplicationsStatus          `json:"status"`
	ErrorMessage   *string                                     `json:"errorMessage"`
	DNSRecords     []ListOrganizationApplicationsDNSRecord     `json:"dnsRecords"`
	CloudflareData *ListOrganizationApplicationsCloudflareData `json:"cloudflareData"`
}

func (o *ListOrganizationApplicationsCustomDomain) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *ListOrganizationApplicationsCustomDomain) GetStatus() ListOrganizationApplicationsStatus {
	if o == nil {
		return ListOrganizationApplicationsStatus("")
	}
	return o.Status
}

func (o *ListOrganizationApplicationsCustomDomain) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *ListOrganizationApplicationsCustomDomain) GetDNSRecords() []ListOrganizationApplicationsDNSRecord {
	if o == nil {
		return []ListOrganizationApplicationsDNSRecord{}
	}
	return o.DNSRecords
}

func (o *ListOrganizationApplicationsCustomDomain) GetCloudflareData() *ListOrganizationApplicationsCloudflareData {
	if o == nil {
		return nil
	}
	return o.CloudflareData
}

type ListOrganizationApplicationsProtectedAppMetadata struct {
	Host            string                                     `json:"host"`
	Origin          string                                     `json:"origin"`
	SessionDuration float64                                    `json:"sessionDuration"`
	PageRules       []ListOrganizationApplicationsPageRule     `json:"pageRules"`
	CustomDomains   []ListOrganizationApplicationsCustomDomain `json:"customDomains,omitempty"`
}

func (o *ListOrganizationApplicationsProtectedAppMetadata) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *ListOrganizationApplicationsProtectedAppMetadata) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

func (o *ListOrganizationApplicationsProtectedAppMetadata) GetSessionDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.SessionDuration
}

func (o *ListOrganizationApplicationsProtectedAppMetadata) GetPageRules() []ListOrganizationApplicationsPageRule {
	if o == nil {
		return []ListOrganizationApplicationsPageRule{}
	}
	return o.PageRules
}

func (o *ListOrganizationApplicationsProtectedAppMetadata) GetCustomDomains() []ListOrganizationApplicationsCustomDomain {
	if o == nil {
		return nil
	}
	return o.CustomDomains
}

// ListOrganizationApplicationsCustomData - arbitrary
type ListOrganizationApplicationsCustomData struct {
}

type ListOrganizationApplicationsOrganizationRole struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListOrganizationApplicationsOrganizationRole) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListOrganizationApplicationsOrganizationRole) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListOrganizationApplicationsResponseBody struct {
	TenantID string `json:"tenantId"`
	ID       string `json:"id"`
	Name     string `json:"name"`
	// The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Secret               string                                            `json:"secret"`
	Description          *string                                           `json:"description"`
	Type                 ListOrganizationApplicationsType                  `json:"type"`
	OidcClientMetadata   ListOrganizationApplicationsOidcClientMetadata    `json:"oidcClientMetadata"`
	CustomClientMetadata ListOrganizationApplicationsCustomClientMetadata  `json:"customClientMetadata"`
	ProtectedAppMetadata *ListOrganizationApplicationsProtectedAppMetadata `json:"protectedAppMetadata"`
	// arbitrary
	CustomData        ListOrganizationApplicationsCustomData         `json:"customData"`
	IsThirdParty      bool                                           `json:"isThirdParty"`
	CreatedAt         float64                                        `json:"createdAt"`
	OrganizationRoles []ListOrganizationApplicationsOrganizationRole `json:"organizationRoles"`
}

func (o *ListOrganizationApplicationsResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListOrganizationApplicationsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListOrganizationApplicationsResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListOrganizationApplicationsResponseBody) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *ListOrganizationApplicationsResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListOrganizationApplicationsResponseBody) GetType() ListOrganizationApplicationsType {
	if o == nil {
		return ListOrganizationApplicationsType("")
	}
	return o.Type
}

func (o *ListOrganizationApplicationsResponseBody) GetOidcClientMetadata() ListOrganizationApplicationsOidcClientMetadata {
	if o == nil {
		return ListOrganizationApplicationsOidcClientMetadata{}
	}
	return o.OidcClientMetadata
}

func (o *ListOrganizationApplicationsResponseBody) GetCustomClientMetadata() ListOrganizationApplicationsCustomClientMetadata {
	if o == nil {
		return ListOrganizationApplicationsCustomClientMetadata{}
	}
	return o.CustomClientMetadata
}

func (o *ListOrganizationApplicationsResponseBody) GetProtectedAppMetadata() *ListOrganizationApplicationsProtectedAppMetadata {
	if o == nil {
		return nil
	}
	return o.ProtectedAppMetadata
}

func (o *ListOrganizationApplicationsResponseBody) GetCustomData() ListOrganizationApplicationsCustomData {
	if o == nil {
		return ListOrganizationApplicationsCustomData{}
	}
	return o.CustomData
}

func (o *ListOrganizationApplicationsResponseBody) GetIsThirdParty() bool {
	if o == nil {
		return false
	}
	return o.IsThirdParty
}

func (o *ListOrganizationApplicationsResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListOrganizationApplicationsResponseBody) GetOrganizationRoles() []ListOrganizationApplicationsOrganizationRole {
	if o == nil {
		return []ListOrganizationApplicationsOrganizationRole{}
	}
	return o.OrganizationRoles
}

type ListOrganizationApplicationsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of applications.
	ResponseBodies []ListOrganizationApplicationsResponseBody
}

func (o *ListOrganizationApplicationsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListOrganizationApplicationsResponse) GetResponseBodies() []ListOrganizationApplicationsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
