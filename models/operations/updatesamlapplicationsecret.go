// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/bllli/logto-management-api/models/components"
)

type UpdateSamlApplicationSecretRequestBody struct {
	// Whether the certificate is active.
	Active bool `json:"active"`
}

func (o *UpdateSamlApplicationSecretRequestBody) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

type UpdateSamlApplicationSecretRequest struct {
	// The unique identifier of the saml application.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The unique identifier of the secret.
	SecretID    string                                 `pathParam:"style=simple,explode=false,name=secretId"`
	RequestBody UpdateSamlApplicationSecretRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateSamlApplicationSecretRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateSamlApplicationSecretRequest) GetSecretID() string {
	if o == nil {
		return ""
	}
	return o.SecretID
}

func (o *UpdateSamlApplicationSecretRequest) GetRequestBody() UpdateSamlApplicationSecretRequestBody {
	if o == nil {
		return UpdateSamlApplicationSecretRequestBody{}
	}
	return o.RequestBody
}

type UpdateSamlApplicationSecretSha256 struct {
	Formatted   string `json:"formatted"`
	Unformatted string `json:"unformatted"`
}

func (o *UpdateSamlApplicationSecretSha256) GetFormatted() string {
	if o == nil {
		return ""
	}
	return o.Formatted
}

func (o *UpdateSamlApplicationSecretSha256) GetUnformatted() string {
	if o == nil {
		return ""
	}
	return o.Unformatted
}

type UpdateSamlApplicationSecretFingerprints struct {
	Sha256 UpdateSamlApplicationSecretSha256 `json:"sha256"`
}

func (o *UpdateSamlApplicationSecretFingerprints) GetSha256() UpdateSamlApplicationSecretSha256 {
	if o == nil {
		return UpdateSamlApplicationSecretSha256{}
	}
	return o.Sha256
}

// UpdateSamlApplicationSecretResponseBody - The signing certificate was updated successfully.
type UpdateSamlApplicationSecretResponseBody struct {
	ID           string                                  `json:"id"`
	Certificate  string                                  `json:"certificate"`
	CreatedAt    float64                                 `json:"createdAt"`
	ExpiresAt    float64                                 `json:"expiresAt"`
	Active       bool                                    `json:"active"`
	Fingerprints UpdateSamlApplicationSecretFingerprints `json:"fingerprints"`
}

func (o *UpdateSamlApplicationSecretResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateSamlApplicationSecretResponseBody) GetCertificate() string {
	if o == nil {
		return ""
	}
	return o.Certificate
}

func (o *UpdateSamlApplicationSecretResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateSamlApplicationSecretResponseBody) GetExpiresAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresAt
}

func (o *UpdateSamlApplicationSecretResponseBody) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateSamlApplicationSecretResponseBody) GetFingerprints() UpdateSamlApplicationSecretFingerprints {
	if o == nil {
		return UpdateSamlApplicationSecretFingerprints{}
	}
	return o.Fingerprints
}

type UpdateSamlApplicationSecretResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The signing certificate was updated successfully.
	Object *UpdateSamlApplicationSecretResponseBody
}

func (o *UpdateSamlApplicationSecretResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateSamlApplicationSecretResponse) GetObject() *UpdateSamlApplicationSecretResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
