// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type CreateWebAuthnRegistrationVerificationRp struct {
	Name string  `json:"name"`
	ID   *string `json:"id,omitempty"`
}

func (o *CreateWebAuthnRegistrationVerificationRp) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateWebAuthnRegistrationVerificationRp) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateWebAuthnRegistrationVerificationUser struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	DisplayName string `json:"displayName"`
}

func (o *CreateWebAuthnRegistrationVerificationUser) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateWebAuthnRegistrationVerificationUser) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateWebAuthnRegistrationVerificationUser) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

type CreateWebAuthnRegistrationVerificationPubKeyCredParam struct {
	Type string  `json:"type"`
	Alg  float64 `json:"alg"`
}

func (o *CreateWebAuthnRegistrationVerificationPubKeyCredParam) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateWebAuthnRegistrationVerificationPubKeyCredParam) GetAlg() float64 {
	if o == nil {
		return 0.0
	}
	return o.Alg
}

type CreateWebAuthnRegistrationVerificationTransport string

const (
	CreateWebAuthnRegistrationVerificationTransportUsb       CreateWebAuthnRegistrationVerificationTransport = "usb"
	CreateWebAuthnRegistrationVerificationTransportNfc       CreateWebAuthnRegistrationVerificationTransport = "nfc"
	CreateWebAuthnRegistrationVerificationTransportBle       CreateWebAuthnRegistrationVerificationTransport = "ble"
	CreateWebAuthnRegistrationVerificationTransportInternal  CreateWebAuthnRegistrationVerificationTransport = "internal"
	CreateWebAuthnRegistrationVerificationTransportCable     CreateWebAuthnRegistrationVerificationTransport = "cable"
	CreateWebAuthnRegistrationVerificationTransportHybrid    CreateWebAuthnRegistrationVerificationTransport = "hybrid"
	CreateWebAuthnRegistrationVerificationTransportSmartCard CreateWebAuthnRegistrationVerificationTransport = "smart-card"
)

func (e CreateWebAuthnRegistrationVerificationTransport) ToPointer() *CreateWebAuthnRegistrationVerificationTransport {
	return &e
}
func (e *CreateWebAuthnRegistrationVerificationTransport) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "usb":
		fallthrough
	case "nfc":
		fallthrough
	case "ble":
		fallthrough
	case "internal":
		fallthrough
	case "cable":
		fallthrough
	case "hybrid":
		fallthrough
	case "smart-card":
		*e = CreateWebAuthnRegistrationVerificationTransport(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebAuthnRegistrationVerificationTransport: %v", v)
	}
}

type CreateWebAuthnRegistrationVerificationExcludeCredential struct {
	Type       string                                            `json:"type"`
	ID         string                                            `json:"id"`
	Transports []CreateWebAuthnRegistrationVerificationTransport `json:"transports,omitempty"`
}

func (o *CreateWebAuthnRegistrationVerificationExcludeCredential) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateWebAuthnRegistrationVerificationExcludeCredential) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateWebAuthnRegistrationVerificationExcludeCredential) GetTransports() []CreateWebAuthnRegistrationVerificationTransport {
	if o == nil {
		return nil
	}
	return o.Transports
}

type CreateWebAuthnRegistrationVerificationAuthenticatorAttachment string

const (
	CreateWebAuthnRegistrationVerificationAuthenticatorAttachmentPlatform      CreateWebAuthnRegistrationVerificationAuthenticatorAttachment = "platform"
	CreateWebAuthnRegistrationVerificationAuthenticatorAttachmentCrossPlatform CreateWebAuthnRegistrationVerificationAuthenticatorAttachment = "cross-platform"
)

func (e CreateWebAuthnRegistrationVerificationAuthenticatorAttachment) ToPointer() *CreateWebAuthnRegistrationVerificationAuthenticatorAttachment {
	return &e
}
func (e *CreateWebAuthnRegistrationVerificationAuthenticatorAttachment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "platform":
		fallthrough
	case "cross-platform":
		*e = CreateWebAuthnRegistrationVerificationAuthenticatorAttachment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebAuthnRegistrationVerificationAuthenticatorAttachment: %v", v)
	}
}

type CreateWebAuthnRegistrationVerificationResidentKey string

const (
	CreateWebAuthnRegistrationVerificationResidentKeyDiscouraged CreateWebAuthnRegistrationVerificationResidentKey = "discouraged"
	CreateWebAuthnRegistrationVerificationResidentKeyPreferred   CreateWebAuthnRegistrationVerificationResidentKey = "preferred"
	CreateWebAuthnRegistrationVerificationResidentKeyRequired    CreateWebAuthnRegistrationVerificationResidentKey = "required"
)

func (e CreateWebAuthnRegistrationVerificationResidentKey) ToPointer() *CreateWebAuthnRegistrationVerificationResidentKey {
	return &e
}
func (e *CreateWebAuthnRegistrationVerificationResidentKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "discouraged":
		fallthrough
	case "preferred":
		fallthrough
	case "required":
		*e = CreateWebAuthnRegistrationVerificationResidentKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebAuthnRegistrationVerificationResidentKey: %v", v)
	}
}

type CreateWebAuthnRegistrationVerificationUserVerification string

const (
	CreateWebAuthnRegistrationVerificationUserVerificationRequired    CreateWebAuthnRegistrationVerificationUserVerification = "required"
	CreateWebAuthnRegistrationVerificationUserVerificationPreferred   CreateWebAuthnRegistrationVerificationUserVerification = "preferred"
	CreateWebAuthnRegistrationVerificationUserVerificationDiscouraged CreateWebAuthnRegistrationVerificationUserVerification = "discouraged"
)

func (e CreateWebAuthnRegistrationVerificationUserVerification) ToPointer() *CreateWebAuthnRegistrationVerificationUserVerification {
	return &e
}
func (e *CreateWebAuthnRegistrationVerificationUserVerification) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "required":
		fallthrough
	case "preferred":
		fallthrough
	case "discouraged":
		*e = CreateWebAuthnRegistrationVerificationUserVerification(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebAuthnRegistrationVerificationUserVerification: %v", v)
	}
}

type CreateWebAuthnRegistrationVerificationAuthenticatorSelection struct {
	AuthenticatorAttachment *CreateWebAuthnRegistrationVerificationAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
	RequireResidentKey      *bool                                                          `json:"requireResidentKey,omitempty"`
	ResidentKey             *CreateWebAuthnRegistrationVerificationResidentKey             `json:"residentKey,omitempty"`
	UserVerification        *CreateWebAuthnRegistrationVerificationUserVerification        `json:"userVerification,omitempty"`
}

func (o *CreateWebAuthnRegistrationVerificationAuthenticatorSelection) GetAuthenticatorAttachment() *CreateWebAuthnRegistrationVerificationAuthenticatorAttachment {
	if o == nil {
		return nil
	}
	return o.AuthenticatorAttachment
}

func (o *CreateWebAuthnRegistrationVerificationAuthenticatorSelection) GetRequireResidentKey() *bool {
	if o == nil {
		return nil
	}
	return o.RequireResidentKey
}

func (o *CreateWebAuthnRegistrationVerificationAuthenticatorSelection) GetResidentKey() *CreateWebAuthnRegistrationVerificationResidentKey {
	if o == nil {
		return nil
	}
	return o.ResidentKey
}

func (o *CreateWebAuthnRegistrationVerificationAuthenticatorSelection) GetUserVerification() *CreateWebAuthnRegistrationVerificationUserVerification {
	if o == nil {
		return nil
	}
	return o.UserVerification
}

type CreateWebAuthnRegistrationVerificationAttestation string

const (
	CreateWebAuthnRegistrationVerificationAttestationNone       CreateWebAuthnRegistrationVerificationAttestation = "none"
	CreateWebAuthnRegistrationVerificationAttestationIndirect   CreateWebAuthnRegistrationVerificationAttestation = "indirect"
	CreateWebAuthnRegistrationVerificationAttestationDirect     CreateWebAuthnRegistrationVerificationAttestation = "direct"
	CreateWebAuthnRegistrationVerificationAttestationEnterprise CreateWebAuthnRegistrationVerificationAttestation = "enterprise"
)

func (e CreateWebAuthnRegistrationVerificationAttestation) ToPointer() *CreateWebAuthnRegistrationVerificationAttestation {
	return &e
}
func (e *CreateWebAuthnRegistrationVerificationAttestation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "indirect":
		fallthrough
	case "direct":
		fallthrough
	case "enterprise":
		*e = CreateWebAuthnRegistrationVerificationAttestation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebAuthnRegistrationVerificationAttestation: %v", v)
	}
}

type CreateWebAuthnRegistrationVerificationExtensions struct {
	Appid            *string `json:"appid,omitempty"`
	CredProps        *bool   `json:"credProps,omitempty"`
	HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
}

func (o *CreateWebAuthnRegistrationVerificationExtensions) GetAppid() *string {
	if o == nil {
		return nil
	}
	return o.Appid
}

func (o *CreateWebAuthnRegistrationVerificationExtensions) GetCredProps() *bool {
	if o == nil {
		return nil
	}
	return o.CredProps
}

func (o *CreateWebAuthnRegistrationVerificationExtensions) GetHmacCreateSecret() *bool {
	if o == nil {
		return nil
	}
	return o.HmacCreateSecret
}

// RegistrationOptions - The WebAuthn registration options that the user needs to create a new WebAuthn credential.
type RegistrationOptions struct {
	Rp                     CreateWebAuthnRegistrationVerificationRp                      `json:"rp"`
	User                   CreateWebAuthnRegistrationVerificationUser                    `json:"user"`
	Challenge              string                                                        `json:"challenge"`
	PubKeyCredParams       []CreateWebAuthnRegistrationVerificationPubKeyCredParam       `json:"pubKeyCredParams"`
	Timeout                *float64                                                      `json:"timeout,omitempty"`
	ExcludeCredentials     []CreateWebAuthnRegistrationVerificationExcludeCredential     `json:"excludeCredentials,omitempty"`
	AuthenticatorSelection *CreateWebAuthnRegistrationVerificationAuthenticatorSelection `json:"authenticatorSelection,omitempty"`
	Attestation            *CreateWebAuthnRegistrationVerificationAttestation            `json:"attestation,omitempty"`
	Extensions             *CreateWebAuthnRegistrationVerificationExtensions             `json:"extensions,omitempty"`
}

func (o *RegistrationOptions) GetRp() CreateWebAuthnRegistrationVerificationRp {
	if o == nil {
		return CreateWebAuthnRegistrationVerificationRp{}
	}
	return o.Rp
}

func (o *RegistrationOptions) GetUser() CreateWebAuthnRegistrationVerificationUser {
	if o == nil {
		return CreateWebAuthnRegistrationVerificationUser{}
	}
	return o.User
}

func (o *RegistrationOptions) GetChallenge() string {
	if o == nil {
		return ""
	}
	return o.Challenge
}

func (o *RegistrationOptions) GetPubKeyCredParams() []CreateWebAuthnRegistrationVerificationPubKeyCredParam {
	if o == nil {
		return []CreateWebAuthnRegistrationVerificationPubKeyCredParam{}
	}
	return o.PubKeyCredParams
}

func (o *RegistrationOptions) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *RegistrationOptions) GetExcludeCredentials() []CreateWebAuthnRegistrationVerificationExcludeCredential {
	if o == nil {
		return nil
	}
	return o.ExcludeCredentials
}

func (o *RegistrationOptions) GetAuthenticatorSelection() *CreateWebAuthnRegistrationVerificationAuthenticatorSelection {
	if o == nil {
		return nil
	}
	return o.AuthenticatorSelection
}

func (o *RegistrationOptions) GetAttestation() *CreateWebAuthnRegistrationVerificationAttestation {
	if o == nil {
		return nil
	}
	return o.Attestation
}

func (o *RegistrationOptions) GetExtensions() *CreateWebAuthnRegistrationVerificationExtensions {
	if o == nil {
		return nil
	}
	return o.Extensions
}

// CreateWebAuthnRegistrationVerificationResponseBody - WebAuthn registration successfully created.
type CreateWebAuthnRegistrationVerificationResponseBody struct {
	// The unique verification ID for the WebAuthn registration record. This ID is required to verify the WebAuthn registration challenge.
	VerificationID string `json:"verificationId"`
	// The WebAuthn registration options that the user needs to create a new WebAuthn credential.
	RegistrationOptions RegistrationOptions `json:"registrationOptions"`
}

func (o *CreateWebAuthnRegistrationVerificationResponseBody) GetVerificationID() string {
	if o == nil {
		return ""
	}
	return o.VerificationID
}

func (o *CreateWebAuthnRegistrationVerificationResponseBody) GetRegistrationOptions() RegistrationOptions {
	if o == nil {
		return RegistrationOptions{}
	}
	return o.RegistrationOptions
}

type CreateWebAuthnRegistrationVerificationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// WebAuthn registration successfully created.
	Object *CreateWebAuthnRegistrationVerificationResponseBody
}

func (o *CreateWebAuthnRegistrationVerificationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateWebAuthnRegistrationVerificationResponse) GetObject() *CreateWebAuthnRegistrationVerificationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
