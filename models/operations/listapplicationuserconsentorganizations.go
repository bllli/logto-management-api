// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListApplicationUserConsentOrganizationsRequest struct {
	// The unique identifier of the application.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The unique identifier of the user.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
}

func (l ListApplicationUserConsentOrganizationsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListApplicationUserConsentOrganizationsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListApplicationUserConsentOrganizationsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListApplicationUserConsentOrganizationsRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *ListApplicationUserConsentOrganizationsRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListApplicationUserConsentOrganizationsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type ListApplicationUserConsentOrganizationsBranding struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *ListApplicationUserConsentOrganizationsBranding) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *ListApplicationUserConsentOrganizationsBranding) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *ListApplicationUserConsentOrganizationsBranding) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *ListApplicationUserConsentOrganizationsBranding) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

type ListApplicationUserConsentOrganizationsOrganization struct {
	TenantID    string  `json:"tenantId"`
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	// arbitrary
	CustomData    map[string]any                                  `json:"customData"`
	IsMfaRequired bool                                            `json:"isMfaRequired"`
	Branding      ListApplicationUserConsentOrganizationsBranding `json:"branding"`
	CreatedAt     float64                                         `json:"createdAt"`
}

func (o *ListApplicationUserConsentOrganizationsOrganization) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListApplicationUserConsentOrganizationsOrganization) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListApplicationUserConsentOrganizationsOrganization) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListApplicationUserConsentOrganizationsOrganization) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListApplicationUserConsentOrganizationsOrganization) GetCustomData() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.CustomData
}

func (o *ListApplicationUserConsentOrganizationsOrganization) GetIsMfaRequired() bool {
	if o == nil {
		return false
	}
	return o.IsMfaRequired
}

func (o *ListApplicationUserConsentOrganizationsOrganization) GetBranding() ListApplicationUserConsentOrganizationsBranding {
	if o == nil {
		return ListApplicationUserConsentOrganizationsBranding{}
	}
	return o.Branding
}

func (o *ListApplicationUserConsentOrganizationsOrganization) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

// ListApplicationUserConsentOrganizationsResponseBody - List of organization entities granted by the user for the application.
type ListApplicationUserConsentOrganizationsResponseBody struct {
	// A list of organization entities granted by the user for the application.
	Organizations []ListApplicationUserConsentOrganizationsOrganization `json:"organizations"`
}

func (o *ListApplicationUserConsentOrganizationsResponseBody) GetOrganizations() []ListApplicationUserConsentOrganizationsOrganization {
	if o == nil {
		return []ListApplicationUserConsentOrganizationsOrganization{}
	}
	return o.Organizations
}

type ListApplicationUserConsentOrganizationsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// List of organization entities granted by the user for the application.
	Object *ListApplicationUserConsentOrganizationsResponseBody
}

func (o *ListApplicationUserConsentOrganizationsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListApplicationUserConsentOrganizationsResponse) GetObject() *ListApplicationUserConsentOrganizationsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
