// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

// QueryParamStatus - Filter one-time tokens by status.
type QueryParamStatus string

const (
	QueryParamStatusActive   QueryParamStatus = "active"
	QueryParamStatusConsumed QueryParamStatus = "consumed"
	QueryParamStatusRevoked  QueryParamStatus = "revoked"
	QueryParamStatusExpired  QueryParamStatus = "expired"
)

func (e QueryParamStatus) ToPointer() *QueryParamStatus {
	return &e
}
func (e *QueryParamStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "consumed":
		fallthrough
	case "revoked":
		fallthrough
	case "expired":
		*e = QueryParamStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamStatus: %v", v)
	}
}

type ListOneTimeTokensRequest struct {
	// Filter one-time tokens by email address.
	Email *string `queryParam:"style=form,explode=true,name=email"`
	// Filter one-time tokens by status.
	Status *QueryParamStatus `queryParam:"style=form,explode=true,name=status"`
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
}

func (l ListOneTimeTokensRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListOneTimeTokensRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListOneTimeTokensRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListOneTimeTokensRequest) GetStatus() *QueryParamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListOneTimeTokensRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListOneTimeTokensRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type ListOneTimeTokensContext struct {
	JitOrganizationIds []string `json:"jitOrganizationIds,omitempty"`
}

func (o *ListOneTimeTokensContext) GetJitOrganizationIds() []string {
	if o == nil {
		return nil
	}
	return o.JitOrganizationIds
}

type ListOneTimeTokensStatusResponse string

const (
	ListOneTimeTokensStatusResponseActive   ListOneTimeTokensStatusResponse = "active"
	ListOneTimeTokensStatusResponseConsumed ListOneTimeTokensStatusResponse = "consumed"
	ListOneTimeTokensStatusResponseRevoked  ListOneTimeTokensStatusResponse = "revoked"
	ListOneTimeTokensStatusResponseExpired  ListOneTimeTokensStatusResponse = "expired"
)

func (e ListOneTimeTokensStatusResponse) ToPointer() *ListOneTimeTokensStatusResponse {
	return &e
}
func (e *ListOneTimeTokensStatusResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "consumed":
		fallthrough
	case "revoked":
		fallthrough
	case "expired":
		*e = ListOneTimeTokensStatusResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListOneTimeTokensStatusResponse: %v", v)
	}
}

type ListOneTimeTokensResponseBody struct {
	TenantID  string                          `json:"tenantId"`
	ID        string                          `json:"id"`
	Email     string                          `json:"email"`
	Token     string                          `json:"token"`
	Context   ListOneTimeTokensContext        `json:"context"`
	Status    ListOneTimeTokensStatusResponse `json:"status"`
	CreatedAt float64                         `json:"createdAt"`
	ExpiresAt float64                         `json:"expiresAt"`
}

func (o *ListOneTimeTokensResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListOneTimeTokensResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListOneTimeTokensResponseBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *ListOneTimeTokensResponseBody) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *ListOneTimeTokensResponseBody) GetContext() ListOneTimeTokensContext {
	if o == nil {
		return ListOneTimeTokensContext{}
	}
	return o.Context
}

func (o *ListOneTimeTokensResponseBody) GetStatus() ListOneTimeTokensStatusResponse {
	if o == nil {
		return ListOneTimeTokensStatusResponse("")
	}
	return o.Status
}

func (o *ListOneTimeTokensResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListOneTimeTokensResponseBody) GetExpiresAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresAt
}

type ListOneTimeTokensResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of one-time tokens.
	ResponseBodies []ListOneTimeTokensResponseBody
}

func (o *ListOneTimeTokensResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListOneTimeTokensResponse) GetResponseBodies() []ListOneTimeTokensResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
