// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// CreateHookEventRequest - Use `events` instead.
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type CreateHookEventRequest string

const (
	CreateHookEventRequestPostRegister                  CreateHookEventRequest = "PostRegister"
	CreateHookEventRequestPostSignIn                    CreateHookEventRequest = "PostSignIn"
	CreateHookEventRequestPostResetPassword             CreateHookEventRequest = "PostResetPassword"
	CreateHookEventRequestUserCreated                   CreateHookEventRequest = "User.Created"
	CreateHookEventRequestUserDeleted                   CreateHookEventRequest = "User.Deleted"
	CreateHookEventRequestUserDataUpdated               CreateHookEventRequest = "User.Data.Updated"
	CreateHookEventRequestUserSuspensionStatusUpdated   CreateHookEventRequest = "User.SuspensionStatus.Updated"
	CreateHookEventRequestRoleCreated                   CreateHookEventRequest = "Role.Created"
	CreateHookEventRequestRoleDeleted                   CreateHookEventRequest = "Role.Deleted"
	CreateHookEventRequestRoleDataUpdated               CreateHookEventRequest = "Role.Data.Updated"
	CreateHookEventRequestRoleScopesUpdated             CreateHookEventRequest = "Role.Scopes.Updated"
	CreateHookEventRequestScopeCreated                  CreateHookEventRequest = "Scope.Created"
	CreateHookEventRequestScopeDeleted                  CreateHookEventRequest = "Scope.Deleted"
	CreateHookEventRequestScopeDataUpdated              CreateHookEventRequest = "Scope.Data.Updated"
	CreateHookEventRequestOrganizationCreated           CreateHookEventRequest = "Organization.Created"
	CreateHookEventRequestOrganizationDeleted           CreateHookEventRequest = "Organization.Deleted"
	CreateHookEventRequestOrganizationDataUpdated       CreateHookEventRequest = "Organization.Data.Updated"
	CreateHookEventRequestOrganizationMembershipUpdated CreateHookEventRequest = "Organization.Membership.Updated"
	CreateHookEventRequestOrganizationRoleCreated       CreateHookEventRequest = "OrganizationRole.Created"
	CreateHookEventRequestOrganizationRoleDeleted       CreateHookEventRequest = "OrganizationRole.Deleted"
	CreateHookEventRequestOrganizationRoleDataUpdated   CreateHookEventRequest = "OrganizationRole.Data.Updated"
	CreateHookEventRequestOrganizationRoleScopesUpdated CreateHookEventRequest = "OrganizationRole.Scopes.Updated"
	CreateHookEventRequestOrganizationScopeCreated      CreateHookEventRequest = "OrganizationScope.Created"
	CreateHookEventRequestOrganizationScopeDeleted      CreateHookEventRequest = "OrganizationScope.Deleted"
	CreateHookEventRequestOrganizationScopeDataUpdated  CreateHookEventRequest = "OrganizationScope.Data.Updated"
)

func (e CreateHookEventRequest) ToPointer() *CreateHookEventRequest {
	return &e
}
func (e *CreateHookEventRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PostRegister":
		fallthrough
	case "PostSignIn":
		fallthrough
	case "PostResetPassword":
		fallthrough
	case "User.Created":
		fallthrough
	case "User.Deleted":
		fallthrough
	case "User.Data.Updated":
		fallthrough
	case "User.SuspensionStatus.Updated":
		fallthrough
	case "Role.Created":
		fallthrough
	case "Role.Deleted":
		fallthrough
	case "Role.Data.Updated":
		fallthrough
	case "Role.Scopes.Updated":
		fallthrough
	case "Scope.Created":
		fallthrough
	case "Scope.Deleted":
		fallthrough
	case "Scope.Data.Updated":
		fallthrough
	case "Organization.Created":
		fallthrough
	case "Organization.Deleted":
		fallthrough
	case "Organization.Data.Updated":
		fallthrough
	case "Organization.Membership.Updated":
		fallthrough
	case "OrganizationRole.Created":
		fallthrough
	case "OrganizationRole.Deleted":
		fallthrough
	case "OrganizationRole.Data.Updated":
		fallthrough
	case "OrganizationRole.Scopes.Updated":
		fallthrough
	case "OrganizationScope.Created":
		fallthrough
	case "OrganizationScope.Deleted":
		fallthrough
	case "OrganizationScope.Data.Updated":
		*e = CreateHookEventRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHookEventRequest: %v", v)
	}
}

type CreateHookConfigRequest struct {
	URL     string            `json:"url"`
	Headers map[string]string `json:"headers,omitempty"`
	// Now the retry times is fixed to 3. Keep for backward compatibility.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Retries *float64 `json:"retries,omitempty"`
}

func (o *CreateHookConfigRequest) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateHookConfigRequest) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateHookConfigRequest) GetRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

type CreateHookRequest struct {
	TenantID *string `json:"tenantId,omitempty"`
	// The name of the hook.
	Name *string `json:"name,omitempty"`
	// Use `events` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Event *CreateHookEventRequest `json:"event,omitempty"`
	// An array of hook events.
	Events    []CreateHookEventRequest `json:"events,omitempty"`
	Config    CreateHookConfigRequest  `json:"config"`
	Enabled   *bool                    `json:"enabled,omitempty"`
	CreatedAt *float64                 `json:"createdAt,omitempty"`
}

func (o *CreateHookRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreateHookRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateHookRequest) GetEvent() *CreateHookEventRequest {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *CreateHookRequest) GetEvents() []CreateHookEventRequest {
	if o == nil {
		return nil
	}
	return o.Events
}

func (o *CreateHookRequest) GetConfig() CreateHookConfigRequest {
	if o == nil {
		return CreateHookConfigRequest{}
	}
	return o.Config
}

func (o *CreateHookRequest) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateHookRequest) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

type CreateHookEventResponse string

const (
	CreateHookEventResponsePostRegister                  CreateHookEventResponse = "PostRegister"
	CreateHookEventResponsePostSignIn                    CreateHookEventResponse = "PostSignIn"
	CreateHookEventResponsePostResetPassword             CreateHookEventResponse = "PostResetPassword"
	CreateHookEventResponseUserCreated                   CreateHookEventResponse = "User.Created"
	CreateHookEventResponseUserDeleted                   CreateHookEventResponse = "User.Deleted"
	CreateHookEventResponseUserDataUpdated               CreateHookEventResponse = "User.Data.Updated"
	CreateHookEventResponseUserSuspensionStatusUpdated   CreateHookEventResponse = "User.SuspensionStatus.Updated"
	CreateHookEventResponseRoleCreated                   CreateHookEventResponse = "Role.Created"
	CreateHookEventResponseRoleDeleted                   CreateHookEventResponse = "Role.Deleted"
	CreateHookEventResponseRoleDataUpdated               CreateHookEventResponse = "Role.Data.Updated"
	CreateHookEventResponseRoleScopesUpdated             CreateHookEventResponse = "Role.Scopes.Updated"
	CreateHookEventResponseScopeCreated                  CreateHookEventResponse = "Scope.Created"
	CreateHookEventResponseScopeDeleted                  CreateHookEventResponse = "Scope.Deleted"
	CreateHookEventResponseScopeDataUpdated              CreateHookEventResponse = "Scope.Data.Updated"
	CreateHookEventResponseOrganizationCreated           CreateHookEventResponse = "Organization.Created"
	CreateHookEventResponseOrganizationDeleted           CreateHookEventResponse = "Organization.Deleted"
	CreateHookEventResponseOrganizationDataUpdated       CreateHookEventResponse = "Organization.Data.Updated"
	CreateHookEventResponseOrganizationMembershipUpdated CreateHookEventResponse = "Organization.Membership.Updated"
	CreateHookEventResponseOrganizationRoleCreated       CreateHookEventResponse = "OrganizationRole.Created"
	CreateHookEventResponseOrganizationRoleDeleted       CreateHookEventResponse = "OrganizationRole.Deleted"
	CreateHookEventResponseOrganizationRoleDataUpdated   CreateHookEventResponse = "OrganizationRole.Data.Updated"
	CreateHookEventResponseOrganizationRoleScopesUpdated CreateHookEventResponse = "OrganizationRole.Scopes.Updated"
	CreateHookEventResponseOrganizationScopeCreated      CreateHookEventResponse = "OrganizationScope.Created"
	CreateHookEventResponseOrganizationScopeDeleted      CreateHookEventResponse = "OrganizationScope.Deleted"
	CreateHookEventResponseOrganizationScopeDataUpdated  CreateHookEventResponse = "OrganizationScope.Data.Updated"
)

func (e CreateHookEventResponse) ToPointer() *CreateHookEventResponse {
	return &e
}
func (e *CreateHookEventResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PostRegister":
		fallthrough
	case "PostSignIn":
		fallthrough
	case "PostResetPassword":
		fallthrough
	case "User.Created":
		fallthrough
	case "User.Deleted":
		fallthrough
	case "User.Data.Updated":
		fallthrough
	case "User.SuspensionStatus.Updated":
		fallthrough
	case "Role.Created":
		fallthrough
	case "Role.Deleted":
		fallthrough
	case "Role.Data.Updated":
		fallthrough
	case "Role.Scopes.Updated":
		fallthrough
	case "Scope.Created":
		fallthrough
	case "Scope.Deleted":
		fallthrough
	case "Scope.Data.Updated":
		fallthrough
	case "Organization.Created":
		fallthrough
	case "Organization.Deleted":
		fallthrough
	case "Organization.Data.Updated":
		fallthrough
	case "Organization.Membership.Updated":
		fallthrough
	case "OrganizationRole.Created":
		fallthrough
	case "OrganizationRole.Deleted":
		fallthrough
	case "OrganizationRole.Data.Updated":
		fallthrough
	case "OrganizationRole.Scopes.Updated":
		fallthrough
	case "OrganizationScope.Created":
		fallthrough
	case "OrganizationScope.Deleted":
		fallthrough
	case "OrganizationScope.Data.Updated":
		*e = CreateHookEventResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHookEventResponse: %v", v)
	}
}

type CreateHookConfigResponse struct {
	URL     string            `json:"url"`
	Headers map[string]string `json:"headers,omitempty"`
	Retries *float64          `json:"retries,omitempty"`
}

func (o *CreateHookConfigResponse) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateHookConfigResponse) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateHookConfigResponse) GetRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

// CreateHookResponseBody - The hook was created successfully.
type CreateHookResponseBody struct {
	TenantID   string                    `json:"tenantId"`
	ID         string                    `json:"id"`
	Name       string                    `json:"name"`
	Event      *CreateHookEventResponse  `json:"event"`
	Events     []CreateHookEventResponse `json:"events"`
	Config     CreateHookConfigResponse  `json:"config"`
	SigningKey string                    `json:"signingKey"`
	Enabled    bool                      `json:"enabled"`
	CreatedAt  float64                   `json:"createdAt"`
}

func (o *CreateHookResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *CreateHookResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateHookResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateHookResponseBody) GetEvent() *CreateHookEventResponse {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *CreateHookResponseBody) GetEvents() []CreateHookEventResponse {
	if o == nil {
		return []CreateHookEventResponse{}
	}
	return o.Events
}

func (o *CreateHookResponseBody) GetConfig() CreateHookConfigResponse {
	if o == nil {
		return CreateHookConfigResponse{}
	}
	return o.Config
}

func (o *CreateHookResponseBody) GetSigningKey() string {
	if o == nil {
		return ""
	}
	return o.SigningKey
}

func (o *CreateHookResponseBody) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *CreateHookResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type CreateHookResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The hook was created successfully.
	Object *CreateHookResponseBody
}

func (o *CreateHookResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateHookResponse) GetObject() *CreateHookResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
