// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListHookRecentLogsRequest struct {
	// The unique identifier of the hook.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The log key to filter logs.
	LogKey *string `queryParam:"style=form,explode=true,name=logKey"`
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
}

func (l ListHookRecentLogsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListHookRecentLogsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListHookRecentLogsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListHookRecentLogsRequest) GetLogKey() *string {
	if o == nil {
		return nil
	}
	return o.LogKey
}

func (o *ListHookRecentLogsRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListHookRecentLogsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type ListHookRecentLogsResult string

const (
	ListHookRecentLogsResultSuccess ListHookRecentLogsResult = "Success"
	ListHookRecentLogsResultError   ListHookRecentLogsResult = "Error"
)

func (e ListHookRecentLogsResult) ToPointer() *ListHookRecentLogsResult {
	return &e
}
func (e *ListHookRecentLogsResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Success":
		fallthrough
	case "Error":
		*e = ListHookRecentLogsResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListHookRecentLogsResult: %v", v)
	}
}

type ListHookRecentLogsErrorType string

const (
	ListHookRecentLogsErrorTypeMapOfAny ListHookRecentLogsErrorType = "mapOfAny"
	ListHookRecentLogsErrorTypeStr      ListHookRecentLogsErrorType = "str"
)

type ListHookRecentLogsError struct {
	MapOfAny map[string]any `queryParam:"inline"`
	Str      *string        `queryParam:"inline"`

	Type ListHookRecentLogsErrorType
}

func CreateListHookRecentLogsErrorMapOfAny(mapOfAny map[string]any) ListHookRecentLogsError {
	typ := ListHookRecentLogsErrorTypeMapOfAny

	return ListHookRecentLogsError{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListHookRecentLogsErrorStr(str string) ListHookRecentLogsError {
	typ := ListHookRecentLogsErrorTypeStr

	return ListHookRecentLogsError{
		Str:  &str,
		Type: typ,
	}
}

func (u *ListHookRecentLogsError) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListHookRecentLogsErrorTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ListHookRecentLogsErrorTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListHookRecentLogsError", string(data))
}

func (u ListHookRecentLogsError) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type ListHookRecentLogsError: all fields are null")
}

type ListHookRecentLogsPayload struct {
	Key           string                   `json:"key"`
	Result        ListHookRecentLogsResult `json:"result"`
	Error         *ListHookRecentLogsError `json:"error,omitempty"`
	IP            *string                  `json:"ip,omitempty"`
	UserAgent     *string                  `json:"userAgent,omitempty"`
	UserID        *string                  `json:"userId,omitempty"`
	ApplicationID *string                  `json:"applicationId,omitempty"`
	SessionID     *string                  `json:"sessionId,omitempty"`
	Params        map[string]any           `json:"params,omitempty"`
}

func (o *ListHookRecentLogsPayload) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListHookRecentLogsPayload) GetResult() ListHookRecentLogsResult {
	if o == nil {
		return ListHookRecentLogsResult("")
	}
	return o.Result
}

func (o *ListHookRecentLogsPayload) GetError() *ListHookRecentLogsError {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *ListHookRecentLogsPayload) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *ListHookRecentLogsPayload) GetUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.UserAgent
}

func (o *ListHookRecentLogsPayload) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *ListHookRecentLogsPayload) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *ListHookRecentLogsPayload) GetSessionID() *string {
	if o == nil {
		return nil
	}
	return o.SessionID
}

func (o *ListHookRecentLogsPayload) GetParams() map[string]any {
	if o == nil {
		return nil
	}
	return o.Params
}

type ListHookRecentLogsResponseBody struct {
	ID        string                    `json:"id"`
	Key       string                    `json:"key"`
	Payload   ListHookRecentLogsPayload `json:"payload"`
	CreatedAt float64                   `json:"createdAt"`
}

func (o *ListHookRecentLogsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListHookRecentLogsResponseBody) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListHookRecentLogsResponseBody) GetPayload() ListHookRecentLogsPayload {
	if o == nil {
		return ListHookRecentLogsPayload{}
	}
	return o.Payload
}

func (o *ListHookRecentLogsResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type ListHookRecentLogsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of recent logs for the hook.
	ResponseBodies []ListHookRecentLogsResponseBody
}

func (o *ListHookRecentLogsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListHookRecentLogsResponse) GetResponseBodies() []ListHookRecentLogsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
