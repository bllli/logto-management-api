// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

// CreateConnectorConfigRequest - The connector config object that will be passed to the connector. The config object should be compatible with the connector factory.
type CreateConnectorConfigRequest struct {
}

// CreateConnectorNameRequest - Validator function
type CreateConnectorNameRequest struct {
}

// CreateConnectorMetadataRequest - Custom connector metadata, will be used to overwrite the default connector factory metadata.
type CreateConnectorMetadataRequest struct {
	Target *string `json:"target,omitempty"`
	// Validator function
	Name     *CreateConnectorNameRequest `json:"name,omitempty"`
	Logo     *string                     `json:"logo,omitempty"`
	LogoDark *string                     `json:"logoDark,omitempty"`
}

func (o *CreateConnectorMetadataRequest) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateConnectorMetadataRequest) GetName() *CreateConnectorNameRequest {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateConnectorMetadataRequest) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *CreateConnectorMetadataRequest) GetLogoDark() *string {
	if o == nil {
		return nil
	}
	return o.LogoDark
}

type CreateConnectorRequest struct {
	// The connector config object that will be passed to the connector. The config object should be compatible with the connector factory.
	Config *CreateConnectorConfigRequest `json:"config,omitempty"`
	// The connector factory ID for creating the connector.
	ConnectorID string `json:"connectorId"`
	// Custom connector metadata, will be used to overwrite the default connector factory metadata.
	Metadata *CreateConnectorMetadataRequest `json:"metadata,omitempty"`
	// Whether to sync user profile from the identity provider to Logto at each sign-in. If `false`, the user profile will only be synced when the user is created.
	SyncProfile *bool `json:"syncProfile,omitempty"`
	// The unique ID for the connector. If not provided, a random ID will be generated.
	ID *string `json:"id,omitempty"`
}

func (o *CreateConnectorRequest) GetConfig() *CreateConnectorConfigRequest {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateConnectorRequest) GetConnectorID() string {
	if o == nil {
		return ""
	}
	return o.ConnectorID
}

func (o *CreateConnectorRequest) GetMetadata() *CreateConnectorMetadataRequest {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateConnectorRequest) GetSyncProfile() *bool {
	if o == nil {
		return nil
	}
	return o.SyncProfile
}

func (o *CreateConnectorRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateConnectorConfigResponse - arbitrary
type CreateConnectorConfigResponse struct {
}

// CreateConnectorMetadataNameResponse - Validator function
type CreateConnectorMetadataNameResponse struct {
}

type CreateConnectorMetadataResponse struct {
	Target *string `json:"target,omitempty"`
	// Validator function
	Name     *CreateConnectorMetadataNameResponse `json:"name,omitempty"`
	Logo     *string                              `json:"logo,omitempty"`
	LogoDark *string                              `json:"logoDark,omitempty"`
}

func (o *CreateConnectorMetadataResponse) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateConnectorMetadataResponse) GetName() *CreateConnectorMetadataNameResponse {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateConnectorMetadataResponse) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *CreateConnectorMetadataResponse) GetLogoDark() *string {
	if o == nil {
		return nil
	}
	return o.LogoDark
}

// CreateConnectorNameResponse - Validator function
type CreateConnectorNameResponse struct {
}

// CreateConnectorDescription - Validator function
type CreateConnectorDescription struct {
}

type CreateConnectorFormItemType string

const (
	CreateConnectorFormItemTypeText          CreateConnectorFormItemType = "Text"
	CreateConnectorFormItemTypeNumber        CreateConnectorFormItemType = "Number"
	CreateConnectorFormItemTypeMultilineText CreateConnectorFormItemType = "MultilineText"
	CreateConnectorFormItemTypeSwitch        CreateConnectorFormItemType = "Switch"
	CreateConnectorFormItemTypeJSON          CreateConnectorFormItemType = "Json"
)

func (e CreateConnectorFormItemType) ToPointer() *CreateConnectorFormItemType {
	return &e
}
func (e *CreateConnectorFormItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Text":
		fallthrough
	case "Number":
		fallthrough
	case "MultilineText":
		fallthrough
	case "Switch":
		fallthrough
	case "Json":
		*e = CreateConnectorFormItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConnectorFormItemType: %v", v)
	}
}

type CreateConnectorShowCondition3 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *CreateConnectorShowCondition3) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *CreateConnectorShowCondition3) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type CreateConnectorFormItem3 struct {
	Type           CreateConnectorFormItemType     `json:"type"`
	Key            string                          `json:"key"`
	Label          string                          `json:"label"`
	Placeholder    *string                         `json:"placeholder,omitempty"`
	Required       *bool                           `json:"required,omitempty"`
	DefaultValue   any                             `json:"defaultValue,omitempty"`
	ShowConditions []CreateConnectorShowCondition3 `json:"showConditions,omitempty"`
	Description    *string                         `json:"description,omitempty"`
	Tooltip        *string                         `json:"tooltip,omitempty"`
	IsConfidential *bool                           `json:"isConfidential,omitempty"`
}

func (o *CreateConnectorFormItem3) GetType() CreateConnectorFormItemType {
	if o == nil {
		return CreateConnectorFormItemType("")
	}
	return o.Type
}

func (o *CreateConnectorFormItem3) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateConnectorFormItem3) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *CreateConnectorFormItem3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *CreateConnectorFormItem3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *CreateConnectorFormItem3) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *CreateConnectorFormItem3) GetShowConditions() []CreateConnectorShowCondition3 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *CreateConnectorFormItem3) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateConnectorFormItem3) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *CreateConnectorFormItem3) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type CreateConnectorSelectItem2 struct {
	Value string `json:"value"`
}

func (o *CreateConnectorSelectItem2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateConnectorShowCondition2 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *CreateConnectorShowCondition2) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *CreateConnectorShowCondition2) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type CreateConnectorFormItem2 struct {
	Type           string                          `json:"type"`
	SelectItems    []CreateConnectorSelectItem2    `json:"selectItems"`
	Key            string                          `json:"key"`
	Label          string                          `json:"label"`
	Placeholder    *string                         `json:"placeholder,omitempty"`
	Required       *bool                           `json:"required,omitempty"`
	DefaultValue   any                             `json:"defaultValue,omitempty"`
	ShowConditions []CreateConnectorShowCondition2 `json:"showConditions,omitempty"`
	Description    *string                         `json:"description,omitempty"`
	Tooltip        *string                         `json:"tooltip,omitempty"`
	IsConfidential *bool                           `json:"isConfidential,omitempty"`
}

func (o *CreateConnectorFormItem2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateConnectorFormItem2) GetSelectItems() []CreateConnectorSelectItem2 {
	if o == nil {
		return []CreateConnectorSelectItem2{}
	}
	return o.SelectItems
}

func (o *CreateConnectorFormItem2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateConnectorFormItem2) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *CreateConnectorFormItem2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *CreateConnectorFormItem2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *CreateConnectorFormItem2) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *CreateConnectorFormItem2) GetShowConditions() []CreateConnectorShowCondition2 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *CreateConnectorFormItem2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateConnectorFormItem2) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *CreateConnectorFormItem2) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type CreateConnectorSelectItem1 struct {
	Value string `json:"value"`
	Title string `json:"title"`
}

func (o *CreateConnectorSelectItem1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateConnectorSelectItem1) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type CreateConnectorShowCondition1 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *CreateConnectorShowCondition1) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *CreateConnectorShowCondition1) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type CreateConnectorFormItem1 struct {
	Type           string                          `json:"type"`
	SelectItems    []CreateConnectorSelectItem1    `json:"selectItems"`
	Key            string                          `json:"key"`
	Label          string                          `json:"label"`
	Placeholder    *string                         `json:"placeholder,omitempty"`
	Required       *bool                           `json:"required,omitempty"`
	DefaultValue   any                             `json:"defaultValue,omitempty"`
	ShowConditions []CreateConnectorShowCondition1 `json:"showConditions,omitempty"`
	Description    *string                         `json:"description,omitempty"`
	Tooltip        *string                         `json:"tooltip,omitempty"`
	IsConfidential *bool                           `json:"isConfidential,omitempty"`
}

func (o *CreateConnectorFormItem1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateConnectorFormItem1) GetSelectItems() []CreateConnectorSelectItem1 {
	if o == nil {
		return []CreateConnectorSelectItem1{}
	}
	return o.SelectItems
}

func (o *CreateConnectorFormItem1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateConnectorFormItem1) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *CreateConnectorFormItem1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *CreateConnectorFormItem1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *CreateConnectorFormItem1) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *CreateConnectorFormItem1) GetShowConditions() []CreateConnectorShowCondition1 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *CreateConnectorFormItem1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateConnectorFormItem1) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *CreateConnectorFormItem1) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type CreateConnectorFormItemUnionType string

const (
	CreateConnectorFormItemUnionTypeCreateConnectorFormItem1 CreateConnectorFormItemUnionType = "CreateConnector_formItem_1"
	CreateConnectorFormItemUnionTypeCreateConnectorFormItem2 CreateConnectorFormItemUnionType = "CreateConnector_formItem_2"
	CreateConnectorFormItemUnionTypeCreateConnectorFormItem3 CreateConnectorFormItemUnionType = "CreateConnector_formItem_3"
)

type CreateConnectorFormItemUnion struct {
	CreateConnectorFormItem1 *CreateConnectorFormItem1 `queryParam:"inline"`
	CreateConnectorFormItem2 *CreateConnectorFormItem2 `queryParam:"inline"`
	CreateConnectorFormItem3 *CreateConnectorFormItem3 `queryParam:"inline"`

	Type CreateConnectorFormItemUnionType
}

func CreateCreateConnectorFormItemUnionCreateConnectorFormItem1(createConnectorFormItem1 CreateConnectorFormItem1) CreateConnectorFormItemUnion {
	typ := CreateConnectorFormItemUnionTypeCreateConnectorFormItem1

	return CreateConnectorFormItemUnion{
		CreateConnectorFormItem1: &createConnectorFormItem1,
		Type:                     typ,
	}
}

func CreateCreateConnectorFormItemUnionCreateConnectorFormItem2(createConnectorFormItem2 CreateConnectorFormItem2) CreateConnectorFormItemUnion {
	typ := CreateConnectorFormItemUnionTypeCreateConnectorFormItem2

	return CreateConnectorFormItemUnion{
		CreateConnectorFormItem2: &createConnectorFormItem2,
		Type:                     typ,
	}
}

func CreateCreateConnectorFormItemUnionCreateConnectorFormItem3(createConnectorFormItem3 CreateConnectorFormItem3) CreateConnectorFormItemUnion {
	typ := CreateConnectorFormItemUnionTypeCreateConnectorFormItem3

	return CreateConnectorFormItemUnion{
		CreateConnectorFormItem3: &createConnectorFormItem3,
		Type:                     typ,
	}
}

func (u *CreateConnectorFormItemUnion) UnmarshalJSON(data []byte) error {

	var createConnectorFormItem3 CreateConnectorFormItem3 = CreateConnectorFormItem3{}
	if err := utils.UnmarshalJSON(data, &createConnectorFormItem3, "", true, true); err == nil {
		u.CreateConnectorFormItem3 = &createConnectorFormItem3
		u.Type = CreateConnectorFormItemUnionTypeCreateConnectorFormItem3
		return nil
	}

	var createConnectorFormItem1 CreateConnectorFormItem1 = CreateConnectorFormItem1{}
	if err := utils.UnmarshalJSON(data, &createConnectorFormItem1, "", true, true); err == nil {
		u.CreateConnectorFormItem1 = &createConnectorFormItem1
		u.Type = CreateConnectorFormItemUnionTypeCreateConnectorFormItem1
		return nil
	}

	var createConnectorFormItem2 CreateConnectorFormItem2 = CreateConnectorFormItem2{}
	if err := utils.UnmarshalJSON(data, &createConnectorFormItem2, "", true, true); err == nil {
		u.CreateConnectorFormItem2 = &createConnectorFormItem2
		u.Type = CreateConnectorFormItemUnionTypeCreateConnectorFormItem2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateConnectorFormItemUnion", string(data))
}

func (u CreateConnectorFormItemUnion) MarshalJSON() ([]byte, error) {
	if u.CreateConnectorFormItem1 != nil {
		return utils.MarshalJSON(u.CreateConnectorFormItem1, "", true)
	}

	if u.CreateConnectorFormItem2 != nil {
		return utils.MarshalJSON(u.CreateConnectorFormItem2, "", true)
	}

	if u.CreateConnectorFormItem3 != nil {
		return utils.MarshalJSON(u.CreateConnectorFormItem3, "", true)
	}

	return nil, errors.New("could not marshal union type CreateConnectorFormItemUnion: all fields are null")
}

type CreateConnectorPlatform string

const (
	CreateConnectorPlatformNative    CreateConnectorPlatform = "Native"
	CreateConnectorPlatformUniversal CreateConnectorPlatform = "Universal"
	CreateConnectorPlatformWeb       CreateConnectorPlatform = "Web"
)

func (e CreateConnectorPlatform) ToPointer() *CreateConnectorPlatform {
	return &e
}
func (e *CreateConnectorPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "Universal":
		fallthrough
	case "Web":
		*e = CreateConnectorPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConnectorPlatform: %v", v)
	}
}

type CreateConnectorType string

const (
	CreateConnectorTypeEmail  CreateConnectorType = "Email"
	CreateConnectorTypeSms    CreateConnectorType = "Sms"
	CreateConnectorTypeSocial CreateConnectorType = "Social"
)

func (e CreateConnectorType) ToPointer() *CreateConnectorType {
	return &e
}
func (e *CreateConnectorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Email":
		fallthrough
	case "Sms":
		fallthrough
	case "Social":
		*e = CreateConnectorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConnectorType: %v", v)
	}
}

// CreateConnectorResponseBody - The created connector.
type CreateConnectorResponseBody struct {
	ID          string `json:"id"`
	SyncProfile bool   `json:"syncProfile"`
	// arbitrary
	Config      CreateConnectorConfigResponse   `json:"config"`
	Metadata    CreateConnectorMetadataResponse `json:"metadata"`
	ConnectorID string                          `json:"connectorId"`
	Target      string                          `json:"target"`
	// Validator function
	Name CreateConnectorNameResponse `json:"name"`
	// Validator function
	Description    CreateConnectorDescription     `json:"description"`
	Logo           string                         `json:"logo"`
	LogoDark       *string                        `json:"logoDark"`
	Readme         string                         `json:"readme"`
	ConfigTemplate *string                        `json:"configTemplate,omitempty"`
	FormItems      []CreateConnectorFormItemUnion `json:"formItems,omitempty"`
	CustomData     map[string]any                 `json:"customData,omitempty"`
	FromEmail      *string                        `json:"fromEmail,omitempty"`
	Platform       *CreateConnectorPlatform       `json:"platform"`
	IsStandard     *bool                          `json:"isStandard,omitempty"`
	Type           CreateConnectorType            `json:"type"`
	IsDemo         *bool                          `json:"isDemo,omitempty"`
	ExtraInfo      map[string]any                 `json:"extraInfo,omitempty"`
	Usage          *float64                       `json:"usage,omitempty"`
}

func (o *CreateConnectorResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateConnectorResponseBody) GetSyncProfile() bool {
	if o == nil {
		return false
	}
	return o.SyncProfile
}

func (o *CreateConnectorResponseBody) GetConfig() CreateConnectorConfigResponse {
	if o == nil {
		return CreateConnectorConfigResponse{}
	}
	return o.Config
}

func (o *CreateConnectorResponseBody) GetMetadata() CreateConnectorMetadataResponse {
	if o == nil {
		return CreateConnectorMetadataResponse{}
	}
	return o.Metadata
}

func (o *CreateConnectorResponseBody) GetConnectorID() string {
	if o == nil {
		return ""
	}
	return o.ConnectorID
}

func (o *CreateConnectorResponseBody) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *CreateConnectorResponseBody) GetName() CreateConnectorNameResponse {
	if o == nil {
		return CreateConnectorNameResponse{}
	}
	return o.Name
}

func (o *CreateConnectorResponseBody) GetDescription() CreateConnectorDescription {
	if o == nil {
		return CreateConnectorDescription{}
	}
	return o.Description
}

func (o *CreateConnectorResponseBody) GetLogo() string {
	if o == nil {
		return ""
	}
	return o.Logo
}

func (o *CreateConnectorResponseBody) GetLogoDark() *string {
	if o == nil {
		return nil
	}
	return o.LogoDark
}

func (o *CreateConnectorResponseBody) GetReadme() string {
	if o == nil {
		return ""
	}
	return o.Readme
}

func (o *CreateConnectorResponseBody) GetConfigTemplate() *string {
	if o == nil {
		return nil
	}
	return o.ConfigTemplate
}

func (o *CreateConnectorResponseBody) GetFormItems() []CreateConnectorFormItemUnion {
	if o == nil {
		return nil
	}
	return o.FormItems
}

func (o *CreateConnectorResponseBody) GetCustomData() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *CreateConnectorResponseBody) GetFromEmail() *string {
	if o == nil {
		return nil
	}
	return o.FromEmail
}

func (o *CreateConnectorResponseBody) GetPlatform() *CreateConnectorPlatform {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *CreateConnectorResponseBody) GetIsStandard() *bool {
	if o == nil {
		return nil
	}
	return o.IsStandard
}

func (o *CreateConnectorResponseBody) GetType() CreateConnectorType {
	if o == nil {
		return CreateConnectorType("")
	}
	return o.Type
}

func (o *CreateConnectorResponseBody) GetIsDemo() *bool {
	if o == nil {
		return nil
	}
	return o.IsDemo
}

func (o *CreateConnectorResponseBody) GetExtraInfo() map[string]any {
	if o == nil {
		return nil
	}
	return o.ExtraInfo
}

func (o *CreateConnectorResponseBody) GetUsage() *float64 {
	if o == nil {
		return nil
	}
	return o.Usage
}

type CreateConnectorResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The created connector.
	Object *CreateConnectorResponseBody
}

func (o *CreateConnectorResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateConnectorResponse) GetObject() *CreateConnectorResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
