// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type GetSsoConnectorRequest struct {
	// The unique identifier of the sso connector.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetSsoConnectorRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetSsoConnectorProviderName string

const (
	GetSsoConnectorProviderNameOidc            GetSsoConnectorProviderName = "OIDC"
	GetSsoConnectorProviderNameSaml            GetSsoConnectorProviderName = "SAML"
	GetSsoConnectorProviderNameAzureAd         GetSsoConnectorProviderName = "AzureAD"
	GetSsoConnectorProviderNameGoogleWorkspace GetSsoConnectorProviderName = "GoogleWorkspace"
	GetSsoConnectorProviderNameOkta            GetSsoConnectorProviderName = "Okta"
	GetSsoConnectorProviderNameAzureAdOidc     GetSsoConnectorProviderName = "AzureAdOidc"
)

func (e GetSsoConnectorProviderName) ToPointer() *GetSsoConnectorProviderName {
	return &e
}
func (e *GetSsoConnectorProviderName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OIDC":
		fallthrough
	case "SAML":
		fallthrough
	case "AzureAD":
		fallthrough
	case "GoogleWorkspace":
		fallthrough
	case "Okta":
		fallthrough
	case "AzureAdOidc":
		*e = GetSsoConnectorProviderName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSsoConnectorProviderName: %v", v)
	}
}

type GetSsoConnectorBranding struct {
	DisplayName *string `json:"displayName,omitempty"`
	Logo        *string `json:"logo,omitempty"`
	DarkLogo    *string `json:"darkLogo,omitempty"`
}

func (o *GetSsoConnectorBranding) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *GetSsoConnectorBranding) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *GetSsoConnectorBranding) GetDarkLogo() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogo
}

type GetSsoConnectorProviderType string

const (
	GetSsoConnectorProviderTypeOidc GetSsoConnectorProviderType = "oidc"
	GetSsoConnectorProviderTypeSaml GetSsoConnectorProviderType = "saml"
)

func (e GetSsoConnectorProviderType) ToPointer() *GetSsoConnectorProviderType {
	return &e
}
func (e *GetSsoConnectorProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oidc":
		fallthrough
	case "saml":
		*e = GetSsoConnectorProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSsoConnectorProviderType: %v", v)
	}
}

// GetSsoConnectorResponseBody - The SSO connector data with the given ID.
type GetSsoConnectorResponseBody struct {
	TenantID      string                      `json:"tenantId"`
	ID            string                      `json:"id"`
	ProviderName  GetSsoConnectorProviderName `json:"providerName"`
	ConnectorName string                      `json:"connectorName"`
	// arbitrary
	Config           map[string]any              `json:"config"`
	Domains          []string                    `json:"domains"`
	Branding         GetSsoConnectorBranding     `json:"branding"`
	SyncProfile      bool                        `json:"syncProfile"`
	CreatedAt        float64                     `json:"createdAt"`
	Name             string                      `json:"name"`
	ProviderType     GetSsoConnectorProviderType `json:"providerType"`
	ProviderLogo     string                      `json:"providerLogo"`
	ProviderLogoDark string                      `json:"providerLogoDark"`
	ProviderConfig   map[string]any              `json:"providerConfig,omitempty"`
}

func (o *GetSsoConnectorResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *GetSsoConnectorResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSsoConnectorResponseBody) GetProviderName() GetSsoConnectorProviderName {
	if o == nil {
		return GetSsoConnectorProviderName("")
	}
	return o.ProviderName
}

func (o *GetSsoConnectorResponseBody) GetConnectorName() string {
	if o == nil {
		return ""
	}
	return o.ConnectorName
}

func (o *GetSsoConnectorResponseBody) GetConfig() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Config
}

func (o *GetSsoConnectorResponseBody) GetDomains() []string {
	if o == nil {
		return []string{}
	}
	return o.Domains
}

func (o *GetSsoConnectorResponseBody) GetBranding() GetSsoConnectorBranding {
	if o == nil {
		return GetSsoConnectorBranding{}
	}
	return o.Branding
}

func (o *GetSsoConnectorResponseBody) GetSyncProfile() bool {
	if o == nil {
		return false
	}
	return o.SyncProfile
}

func (o *GetSsoConnectorResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetSsoConnectorResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetSsoConnectorResponseBody) GetProviderType() GetSsoConnectorProviderType {
	if o == nil {
		return GetSsoConnectorProviderType("")
	}
	return o.ProviderType
}

func (o *GetSsoConnectorResponseBody) GetProviderLogo() string {
	if o == nil {
		return ""
	}
	return o.ProviderLogo
}

func (o *GetSsoConnectorResponseBody) GetProviderLogoDark() string {
	if o == nil {
		return ""
	}
	return o.ProviderLogoDark
}

func (o *GetSsoConnectorResponseBody) GetProviderConfig() map[string]any {
	if o == nil {
		return nil
	}
	return o.ProviderConfig
}

type GetSsoConnectorResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The SSO connector data with the given ID.
	Object *GetSsoConnectorResponseBody
}

func (o *GetSsoConnectorResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSsoConnectorResponse) GetObject() *GetSsoConnectorResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
