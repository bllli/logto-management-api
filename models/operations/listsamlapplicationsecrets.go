// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
	"time"
)

type ListSamlApplicationSecretsRequest struct {
	// The unique identifier of the saml application.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *ListSamlApplicationSecretsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListSamlApplicationSecretsSha256 struct {
	Formatted   string `json:"formatted"`
	Unformatted string `json:"unformatted"`
}

func (o *ListSamlApplicationSecretsSha256) GetFormatted() string {
	if o == nil {
		return ""
	}
	return o.Formatted
}

func (o *ListSamlApplicationSecretsSha256) GetUnformatted() string {
	if o == nil {
		return ""
	}
	return o.Unformatted
}

type ListSamlApplicationSecretsFingerprints struct {
	Sha256 ListSamlApplicationSecretsSha256 `json:"sha256"`
}

func (o *ListSamlApplicationSecretsFingerprints) GetSha256() ListSamlApplicationSecretsSha256 {
	if o == nil {
		return ListSamlApplicationSecretsSha256{}
	}
	return o.Sha256
}

type ListSamlApplicationSecretsResponseBody struct {
	// The ID of the signing certificate.
	ID string `json:"id"`
	// The X.509 certificate in PEM format.
	Certificate string  `json:"certificate"`
	CreatedAt   float64 `json:"createdAt"`
	// The expiration time of the certificate.
	ExpiresAt    time.Time                              `json:"expiresAt"`
	Active       bool                                   `json:"active"`
	Fingerprints ListSamlApplicationSecretsFingerprints `json:"fingerprints"`
	// The SHA-256 fingerprint of the certificate.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// Whether this certificate is currently active.
	IsActive *bool `json:"isActive,omitempty"`
}

func (l ListSamlApplicationSecretsResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListSamlApplicationSecretsResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListSamlApplicationSecretsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListSamlApplicationSecretsResponseBody) GetCertificate() string {
	if o == nil {
		return ""
	}
	return o.Certificate
}

func (o *ListSamlApplicationSecretsResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListSamlApplicationSecretsResponseBody) GetExpiresAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ExpiresAt
}

func (o *ListSamlApplicationSecretsResponseBody) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ListSamlApplicationSecretsResponseBody) GetFingerprints() ListSamlApplicationSecretsFingerprints {
	if o == nil {
		return ListSamlApplicationSecretsFingerprints{}
	}
	return o.Fingerprints
}

func (o *ListSamlApplicationSecretsResponseBody) GetFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.Fingerprint
}

func (o *ListSamlApplicationSecretsResponseBody) GetIsActive() *bool {
	if o == nil {
		return nil
	}
	return o.IsActive
}

type ListSamlApplicationSecretsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of signing certificates.
	ResponseBodies []ListSamlApplicationSecretsResponseBody
}

func (o *ListSamlApplicationSecretsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListSamlApplicationSecretsResponse) GetResponseBodies() []ListSamlApplicationSecretsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
