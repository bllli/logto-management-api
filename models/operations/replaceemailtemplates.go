// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// TemplateTypeRequest - The type of the email template, e.g. `SignIn` or `ForgotPassword`
type TemplateTypeRequest string

const (
	TemplateTypeRequestSignIn                   TemplateTypeRequest = "SignIn"
	TemplateTypeRequestRegister                 TemplateTypeRequest = "Register"
	TemplateTypeRequestForgotPassword           TemplateTypeRequest = "ForgotPassword"
	TemplateTypeRequestOrganizationInvitation   TemplateTypeRequest = "OrganizationInvitation"
	TemplateTypeRequestGeneric                  TemplateTypeRequest = "Generic"
	TemplateTypeRequestUserPermissionValidation TemplateTypeRequest = "UserPermissionValidation"
	TemplateTypeRequestBindNewIdentifier        TemplateTypeRequest = "BindNewIdentifier"
)

func (e TemplateTypeRequest) ToPointer() *TemplateTypeRequest {
	return &e
}
func (e *TemplateTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SignIn":
		fallthrough
	case "Register":
		fallthrough
	case "ForgotPassword":
		fallthrough
	case "OrganizationInvitation":
		fallthrough
	case "Generic":
		fallthrough
	case "UserPermissionValidation":
		fallthrough
	case "BindNewIdentifier":
		*e = TemplateTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateTypeRequest: %v", v)
	}
}

// TemplateDetails - The details of the email template.
type TemplateDetails struct {
	// The template of the email subject.
	Subject string `json:"subject"`
	// The template of the email body.
	Content string `json:"content"`
	// The content type of the email body. (Only required by some specific email providers.)
	ContentType *string `json:"contentType,omitempty"`
	// The reply name template of the email. If not provided, the target email address will be used. (The render logic may differ based on the email provider.)
	ReplyTo *string `json:"replyTo,omitempty"`
	// The send from name template of the email. If not provided, the default Logto email address will be used. (The render logic may differ based on the email provider.)
	SendFrom *string `json:"sendFrom,omitempty"`
}

func (o *TemplateDetails) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *TemplateDetails) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *TemplateDetails) GetContentType() *string {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *TemplateDetails) GetReplyTo() *string {
	if o == nil {
		return nil
	}
	return o.ReplyTo
}

func (o *TemplateDetails) GetSendFrom() *string {
	if o == nil {
		return nil
	}
	return o.SendFrom
}

type Template struct {
	// The language tag of the email template, e.g., `en` or `fr`.
	LanguageTag string `json:"languageTag"`
	// The type of the email template, e.g. `SignIn` or `ForgotPassword`
	TemplateType TemplateTypeRequest `json:"templateType"`
	// The details of the email template.
	Details TemplateDetails `json:"details"`
}

func (o *Template) GetLanguageTag() string {
	if o == nil {
		return ""
	}
	return o.LanguageTag
}

func (o *Template) GetTemplateType() TemplateTypeRequest {
	if o == nil {
		return TemplateTypeRequest("")
	}
	return o.TemplateType
}

func (o *Template) GetDetails() TemplateDetails {
	if o == nil {
		return TemplateDetails{}
	}
	return o.Details
}

type ReplaceEmailTemplatesRequest struct {
	Templates []Template `json:"templates"`
}

func (o *ReplaceEmailTemplatesRequest) GetTemplates() []Template {
	if o == nil {
		return []Template{}
	}
	return o.Templates
}

type ReplaceEmailTemplatesTemplateTypeResponse string

const (
	ReplaceEmailTemplatesTemplateTypeResponseSignIn                   ReplaceEmailTemplatesTemplateTypeResponse = "SignIn"
	ReplaceEmailTemplatesTemplateTypeResponseRegister                 ReplaceEmailTemplatesTemplateTypeResponse = "Register"
	ReplaceEmailTemplatesTemplateTypeResponseForgotPassword           ReplaceEmailTemplatesTemplateTypeResponse = "ForgotPassword"
	ReplaceEmailTemplatesTemplateTypeResponseOrganizationInvitation   ReplaceEmailTemplatesTemplateTypeResponse = "OrganizationInvitation"
	ReplaceEmailTemplatesTemplateTypeResponseGeneric                  ReplaceEmailTemplatesTemplateTypeResponse = "Generic"
	ReplaceEmailTemplatesTemplateTypeResponseUserPermissionValidation ReplaceEmailTemplatesTemplateTypeResponse = "UserPermissionValidation"
	ReplaceEmailTemplatesTemplateTypeResponseBindNewIdentifier        ReplaceEmailTemplatesTemplateTypeResponse = "BindNewIdentifier"
)

func (e ReplaceEmailTemplatesTemplateTypeResponse) ToPointer() *ReplaceEmailTemplatesTemplateTypeResponse {
	return &e
}
func (e *ReplaceEmailTemplatesTemplateTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SignIn":
		fallthrough
	case "Register":
		fallthrough
	case "ForgotPassword":
		fallthrough
	case "OrganizationInvitation":
		fallthrough
	case "Generic":
		fallthrough
	case "UserPermissionValidation":
		fallthrough
	case "BindNewIdentifier":
		*e = ReplaceEmailTemplatesTemplateTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReplaceEmailTemplatesTemplateTypeResponse: %v", v)
	}
}

type ReplaceEmailTemplatesDetailsResponse struct {
	Subject     string  `json:"subject"`
	Content     string  `json:"content"`
	ContentType *string `json:"contentType,omitempty"`
	ReplyTo     *string `json:"replyTo,omitempty"`
	SendFrom    *string `json:"sendFrom,omitempty"`
}

func (o *ReplaceEmailTemplatesDetailsResponse) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *ReplaceEmailTemplatesDetailsResponse) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *ReplaceEmailTemplatesDetailsResponse) GetContentType() *string {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *ReplaceEmailTemplatesDetailsResponse) GetReplyTo() *string {
	if o == nil {
		return nil
	}
	return o.ReplyTo
}

func (o *ReplaceEmailTemplatesDetailsResponse) GetSendFrom() *string {
	if o == nil {
		return nil
	}
	return o.SendFrom
}

type ReplaceEmailTemplatesResponseBody struct {
	TenantID     string                                    `json:"tenantId"`
	ID           string                                    `json:"id"`
	LanguageTag  string                                    `json:"languageTag"`
	TemplateType ReplaceEmailTemplatesTemplateTypeResponse `json:"templateType"`
	Details      ReplaceEmailTemplatesDetailsResponse      `json:"details"`
	CreatedAt    float64                                   `json:"createdAt"`
}

func (o *ReplaceEmailTemplatesResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ReplaceEmailTemplatesResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReplaceEmailTemplatesResponseBody) GetLanguageTag() string {
	if o == nil {
		return ""
	}
	return o.LanguageTag
}

func (o *ReplaceEmailTemplatesResponseBody) GetTemplateType() ReplaceEmailTemplatesTemplateTypeResponse {
	if o == nil {
		return ReplaceEmailTemplatesTemplateTypeResponse("")
	}
	return o.TemplateType
}

func (o *ReplaceEmailTemplatesResponseBody) GetDetails() ReplaceEmailTemplatesDetailsResponse {
	if o == nil {
		return ReplaceEmailTemplatesDetailsResponse{}
	}
	return o.Details
}

func (o *ReplaceEmailTemplatesResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type ReplaceEmailTemplatesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The list of newly created or replaced email templates.
	ResponseBodies []ReplaceEmailTemplatesResponseBody
}

func (o *ReplaceEmailTemplatesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ReplaceEmailTemplatesResponse) GetResponseBodies() []ReplaceEmailTemplatesResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
