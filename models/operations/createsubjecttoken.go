// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/bllli/logto-management-api/models/components"
)

// CreateSubjectTokenContext - The additional context to be included in the token, this can be used in custom JWT.
type CreateSubjectTokenContext struct {
}

type CreateSubjectTokenRequest struct {
	// The ID of the user to impersonate.
	UserID string `json:"userId"`
	// The additional context to be included in the token, this can be used in custom JWT.
	Context *CreateSubjectTokenContext `json:"context,omitempty"`
}

func (o *CreateSubjectTokenRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateSubjectTokenRequest) GetContext() *CreateSubjectTokenContext {
	if o == nil {
		return nil
	}
	return o.Context
}

// CreateSubjectTokenResponseBody - The subject token has been created successfully.
type CreateSubjectTokenResponseBody struct {
	SubjectToken string  `json:"subjectToken"`
	ExpiresIn    float64 `json:"expiresIn"`
}

func (o *CreateSubjectTokenResponseBody) GetSubjectToken() string {
	if o == nil {
		return ""
	}
	return o.SubjectToken
}

func (o *CreateSubjectTokenResponseBody) GetExpiresIn() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresIn
}

type CreateSubjectTokenResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The subject token has been created successfully.
	Object *CreateSubjectTokenResponseBody
}

func (o *CreateSubjectTokenResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateSubjectTokenResponse) GetObject() *CreateSubjectTokenResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
