// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListHooksRequest struct {
	// Whether to include execution stats in the response.
	IncludeExecutionStats *string `queryParam:"style=form,explode=true,name=includeExecutionStats"`
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
}

func (l ListHooksRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListHooksRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListHooksRequest) GetIncludeExecutionStats() *string {
	if o == nil {
		return nil
	}
	return o.IncludeExecutionStats
}

func (o *ListHooksRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListHooksRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type ListHooksEvent string

const (
	ListHooksEventPostRegister                  ListHooksEvent = "PostRegister"
	ListHooksEventPostSignIn                    ListHooksEvent = "PostSignIn"
	ListHooksEventPostResetPassword             ListHooksEvent = "PostResetPassword"
	ListHooksEventUserCreated                   ListHooksEvent = "User.Created"
	ListHooksEventUserDeleted                   ListHooksEvent = "User.Deleted"
	ListHooksEventUserDataUpdated               ListHooksEvent = "User.Data.Updated"
	ListHooksEventUserSuspensionStatusUpdated   ListHooksEvent = "User.SuspensionStatus.Updated"
	ListHooksEventRoleCreated                   ListHooksEvent = "Role.Created"
	ListHooksEventRoleDeleted                   ListHooksEvent = "Role.Deleted"
	ListHooksEventRoleDataUpdated               ListHooksEvent = "Role.Data.Updated"
	ListHooksEventRoleScopesUpdated             ListHooksEvent = "Role.Scopes.Updated"
	ListHooksEventScopeCreated                  ListHooksEvent = "Scope.Created"
	ListHooksEventScopeDeleted                  ListHooksEvent = "Scope.Deleted"
	ListHooksEventScopeDataUpdated              ListHooksEvent = "Scope.Data.Updated"
	ListHooksEventOrganizationCreated           ListHooksEvent = "Organization.Created"
	ListHooksEventOrganizationDeleted           ListHooksEvent = "Organization.Deleted"
	ListHooksEventOrganizationDataUpdated       ListHooksEvent = "Organization.Data.Updated"
	ListHooksEventOrganizationMembershipUpdated ListHooksEvent = "Organization.Membership.Updated"
	ListHooksEventOrganizationRoleCreated       ListHooksEvent = "OrganizationRole.Created"
	ListHooksEventOrganizationRoleDeleted       ListHooksEvent = "OrganizationRole.Deleted"
	ListHooksEventOrganizationRoleDataUpdated   ListHooksEvent = "OrganizationRole.Data.Updated"
	ListHooksEventOrganizationRoleScopesUpdated ListHooksEvent = "OrganizationRole.Scopes.Updated"
	ListHooksEventOrganizationScopeCreated      ListHooksEvent = "OrganizationScope.Created"
	ListHooksEventOrganizationScopeDeleted      ListHooksEvent = "OrganizationScope.Deleted"
	ListHooksEventOrganizationScopeDataUpdated  ListHooksEvent = "OrganizationScope.Data.Updated"
)

func (e ListHooksEvent) ToPointer() *ListHooksEvent {
	return &e
}
func (e *ListHooksEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PostRegister":
		fallthrough
	case "PostSignIn":
		fallthrough
	case "PostResetPassword":
		fallthrough
	case "User.Created":
		fallthrough
	case "User.Deleted":
		fallthrough
	case "User.Data.Updated":
		fallthrough
	case "User.SuspensionStatus.Updated":
		fallthrough
	case "Role.Created":
		fallthrough
	case "Role.Deleted":
		fallthrough
	case "Role.Data.Updated":
		fallthrough
	case "Role.Scopes.Updated":
		fallthrough
	case "Scope.Created":
		fallthrough
	case "Scope.Deleted":
		fallthrough
	case "Scope.Data.Updated":
		fallthrough
	case "Organization.Created":
		fallthrough
	case "Organization.Deleted":
		fallthrough
	case "Organization.Data.Updated":
		fallthrough
	case "Organization.Membership.Updated":
		fallthrough
	case "OrganizationRole.Created":
		fallthrough
	case "OrganizationRole.Deleted":
		fallthrough
	case "OrganizationRole.Data.Updated":
		fallthrough
	case "OrganizationRole.Scopes.Updated":
		fallthrough
	case "OrganizationScope.Created":
		fallthrough
	case "OrganizationScope.Deleted":
		fallthrough
	case "OrganizationScope.Data.Updated":
		*e = ListHooksEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListHooksEvent: %v", v)
	}
}

type ListHooksConfig struct {
	URL     string            `json:"url"`
	Headers map[string]string `json:"headers,omitempty"`
	Retries *float64          `json:"retries,omitempty"`
}

func (o *ListHooksConfig) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *ListHooksConfig) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ListHooksConfig) GetRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

type ListHooksExecutionStats struct {
	SuccessCount float64 `json:"successCount"`
	RequestCount float64 `json:"requestCount"`
}

func (o *ListHooksExecutionStats) GetSuccessCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.SuccessCount
}

func (o *ListHooksExecutionStats) GetRequestCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestCount
}

type ListHooksResponseBody struct {
	TenantID       string                   `json:"tenantId"`
	ID             string                   `json:"id"`
	Name           string                   `json:"name"`
	Event          *ListHooksEvent          `json:"event"`
	Events         []ListHooksEvent         `json:"events"`
	Config         ListHooksConfig          `json:"config"`
	SigningKey     string                   `json:"signingKey"`
	Enabled        bool                     `json:"enabled"`
	CreatedAt      float64                  `json:"createdAt"`
	ExecutionStats *ListHooksExecutionStats `json:"executionStats,omitempty"`
}

func (o *ListHooksResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListHooksResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListHooksResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListHooksResponseBody) GetEvent() *ListHooksEvent {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *ListHooksResponseBody) GetEvents() []ListHooksEvent {
	if o == nil {
		return []ListHooksEvent{}
	}
	return o.Events
}

func (o *ListHooksResponseBody) GetConfig() ListHooksConfig {
	if o == nil {
		return ListHooksConfig{}
	}
	return o.Config
}

func (o *ListHooksResponseBody) GetSigningKey() string {
	if o == nil {
		return ""
	}
	return o.SigningKey
}

func (o *ListHooksResponseBody) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *ListHooksResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListHooksResponseBody) GetExecutionStats() *ListHooksExecutionStats {
	if o == nil {
		return nil
	}
	return o.ExecutionStats
}

type ListHooksResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of hooks.
	ResponseBodies []ListHooksResponseBody
}

func (o *ListHooksResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListHooksResponse) GetResponseBodies() []ListHooksResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
