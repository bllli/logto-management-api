// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/bllli/logto-management-api/models/components"
)

type ListUserOrganizationsRequest struct {
	// The unique identifier of the user.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

func (o *ListUserOrganizationsRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type ListUserOrganizationsBranding struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *ListUserOrganizationsBranding) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *ListUserOrganizationsBranding) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *ListUserOrganizationsBranding) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *ListUserOrganizationsBranding) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

type ListUserOrganizationsOrganizationRole struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListUserOrganizationsOrganizationRole) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserOrganizationsOrganizationRole) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListUserOrganizationsResponseBody struct {
	TenantID    string  `json:"tenantId"`
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	// arbitrary
	CustomData        map[string]any                          `json:"customData"`
	IsMfaRequired     bool                                    `json:"isMfaRequired"`
	Branding          ListUserOrganizationsBranding           `json:"branding"`
	CreatedAt         float64                                 `json:"createdAt"`
	OrganizationRoles []ListUserOrganizationsOrganizationRole `json:"organizationRoles"`
}

func (o *ListUserOrganizationsResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListUserOrganizationsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListUserOrganizationsResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListUserOrganizationsResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListUserOrganizationsResponseBody) GetCustomData() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.CustomData
}

func (o *ListUserOrganizationsResponseBody) GetIsMfaRequired() bool {
	if o == nil {
		return false
	}
	return o.IsMfaRequired
}

func (o *ListUserOrganizationsResponseBody) GetBranding() ListUserOrganizationsBranding {
	if o == nil {
		return ListUserOrganizationsBranding{}
	}
	return o.Branding
}

func (o *ListUserOrganizationsResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListUserOrganizationsResponseBody) GetOrganizationRoles() []ListUserOrganizationsOrganizationRole {
	if o == nil {
		return []ListUserOrganizationsOrganizationRole{}
	}
	return o.OrganizationRoles
}

type ListUserOrganizationsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// An array of organizations that the user is a member of.
	ResponseBodies []ListUserOrganizationsResponseBody
}

func (o *ListUserOrganizationsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListUserOrganizationsResponse) GetResponseBodies() []ListUserOrganizationsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
