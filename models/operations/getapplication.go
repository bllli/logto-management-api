// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type GetApplicationRequest struct {
	// The unique identifier of the application.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetApplicationRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetApplicationType string

const (
	GetApplicationTypeNative           GetApplicationType = "Native"
	GetApplicationTypeSpa              GetApplicationType = "SPA"
	GetApplicationTypeTraditional      GetApplicationType = "Traditional"
	GetApplicationTypeMachineToMachine GetApplicationType = "MachineToMachine"
	GetApplicationTypeProtected        GetApplicationType = "Protected"
	GetApplicationTypeSaml             GetApplicationType = "SAML"
)

func (e GetApplicationType) ToPointer() *GetApplicationType {
	return &e
}
func (e *GetApplicationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "SPA":
		fallthrough
	case "Traditional":
		fallthrough
	case "MachineToMachine":
		fallthrough
	case "Protected":
		fallthrough
	case "SAML":
		*e = GetApplicationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetApplicationType: %v", v)
	}
}

// GetApplicationRedirectUris2 - Validator function
type GetApplicationRedirectUris2 struct {
}

// GetApplicationRedirectUris1 - Validator function
type GetApplicationRedirectUris1 struct {
}

type GetApplicationRedirectUrisUnionType string

const (
	GetApplicationRedirectUrisUnionTypeGetApplicationRedirectUris1 GetApplicationRedirectUrisUnionType = "GetApplication_redirectUris_1"
	GetApplicationRedirectUrisUnionTypeGetApplicationRedirectUris2 GetApplicationRedirectUrisUnionType = "GetApplication_redirectUris_2"
)

type GetApplicationRedirectUrisUnion struct {
	GetApplicationRedirectUris1 *GetApplicationRedirectUris1 `queryParam:"inline"`
	GetApplicationRedirectUris2 *GetApplicationRedirectUris2 `queryParam:"inline"`

	Type GetApplicationRedirectUrisUnionType
}

func CreateGetApplicationRedirectUrisUnionGetApplicationRedirectUris1(getApplicationRedirectUris1 GetApplicationRedirectUris1) GetApplicationRedirectUrisUnion {
	typ := GetApplicationRedirectUrisUnionTypeGetApplicationRedirectUris1

	return GetApplicationRedirectUrisUnion{
		GetApplicationRedirectUris1: &getApplicationRedirectUris1,
		Type:                        typ,
	}
}

func CreateGetApplicationRedirectUrisUnionGetApplicationRedirectUris2(getApplicationRedirectUris2 GetApplicationRedirectUris2) GetApplicationRedirectUrisUnion {
	typ := GetApplicationRedirectUrisUnionTypeGetApplicationRedirectUris2

	return GetApplicationRedirectUrisUnion{
		GetApplicationRedirectUris2: &getApplicationRedirectUris2,
		Type:                        typ,
	}
}

func (u *GetApplicationRedirectUrisUnion) UnmarshalJSON(data []byte) error {

	var getApplicationRedirectUris1 GetApplicationRedirectUris1 = GetApplicationRedirectUris1{}
	if err := utils.UnmarshalJSON(data, &getApplicationRedirectUris1, "", true, true); err == nil {
		u.GetApplicationRedirectUris1 = &getApplicationRedirectUris1
		u.Type = GetApplicationRedirectUrisUnionTypeGetApplicationRedirectUris1
		return nil
	}

	var getApplicationRedirectUris2 GetApplicationRedirectUris2 = GetApplicationRedirectUris2{}
	if err := utils.UnmarshalJSON(data, &getApplicationRedirectUris2, "", true, true); err == nil {
		u.GetApplicationRedirectUris2 = &getApplicationRedirectUris2
		u.Type = GetApplicationRedirectUrisUnionTypeGetApplicationRedirectUris2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetApplicationRedirectUrisUnion", string(data))
}

func (u GetApplicationRedirectUrisUnion) MarshalJSON() ([]byte, error) {
	if u.GetApplicationRedirectUris1 != nil {
		return utils.MarshalJSON(u.GetApplicationRedirectUris1, "", true)
	}

	if u.GetApplicationRedirectUris2 != nil {
		return utils.MarshalJSON(u.GetApplicationRedirectUris2, "", true)
	}

	return nil, errors.New("could not marshal union type GetApplicationRedirectUrisUnion: all fields are null")
}

type GetApplicationOidcClientMetadata struct {
	RedirectUris                     []GetApplicationRedirectUrisUnion `json:"redirectUris"`
	PostLogoutRedirectUris           []string                          `json:"postLogoutRedirectUris"`
	BackchannelLogoutURI             *string                           `json:"backchannelLogoutUri,omitempty"`
	BackchannelLogoutSessionRequired *bool                             `json:"backchannelLogoutSessionRequired,omitempty"`
	LogoURI                          *string                           `json:"logoUri,omitempty"`
}

func (o *GetApplicationOidcClientMetadata) GetRedirectUris() []GetApplicationRedirectUrisUnion {
	if o == nil {
		return []GetApplicationRedirectUrisUnion{}
	}
	return o.RedirectUris
}

func (o *GetApplicationOidcClientMetadata) GetPostLogoutRedirectUris() []string {
	if o == nil {
		return []string{}
	}
	return o.PostLogoutRedirectUris
}

func (o *GetApplicationOidcClientMetadata) GetBackchannelLogoutURI() *string {
	if o == nil {
		return nil
	}
	return o.BackchannelLogoutURI
}

func (o *GetApplicationOidcClientMetadata) GetBackchannelLogoutSessionRequired() *bool {
	if o == nil {
		return nil
	}
	return o.BackchannelLogoutSessionRequired
}

func (o *GetApplicationOidcClientMetadata) GetLogoURI() *string {
	if o == nil {
		return nil
	}
	return o.LogoURI
}

type GetApplicationCustomClientMetadata struct {
	CorsAllowedOrigins      []string `json:"corsAllowedOrigins,omitempty"`
	IDTokenTTL              *float64 `json:"idTokenTtl,omitempty"`
	RefreshTokenTTL         *float64 `json:"refreshTokenTtl,omitempty"`
	RefreshTokenTTLInDays   *float64 `json:"refreshTokenTtlInDays,omitempty"`
	TenantID                *string  `json:"tenantId,omitempty"`
	AlwaysIssueRefreshToken *bool    `json:"alwaysIssueRefreshToken,omitempty"`
	RotateRefreshToken      *bool    `json:"rotateRefreshToken,omitempty"`
}

func (o *GetApplicationCustomClientMetadata) GetCorsAllowedOrigins() []string {
	if o == nil {
		return nil
	}
	return o.CorsAllowedOrigins
}

func (o *GetApplicationCustomClientMetadata) GetIDTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.IDTokenTTL
}

func (o *GetApplicationCustomClientMetadata) GetRefreshTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTL
}

func (o *GetApplicationCustomClientMetadata) GetRefreshTokenTTLInDays() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTLInDays
}

func (o *GetApplicationCustomClientMetadata) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *GetApplicationCustomClientMetadata) GetAlwaysIssueRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysIssueRefreshToken
}

func (o *GetApplicationCustomClientMetadata) GetRotateRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.RotateRefreshToken
}

type GetApplicationPageRule struct {
	Path string `json:"path"`
}

func (o *GetApplicationPageRule) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type GetApplicationStatus string

const (
	GetApplicationStatusPendingVerification GetApplicationStatus = "PendingVerification"
	GetApplicationStatusPendingSsl          GetApplicationStatus = "PendingSsl"
	GetApplicationStatusActive              GetApplicationStatus = "Active"
	GetApplicationStatusError               GetApplicationStatus = "Error"
)

func (e GetApplicationStatus) ToPointer() *GetApplicationStatus {
	return &e
}
func (e *GetApplicationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PendingVerification":
		fallthrough
	case "PendingSsl":
		fallthrough
	case "Active":
		fallthrough
	case "Error":
		*e = GetApplicationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetApplicationStatus: %v", v)
	}
}

type GetApplicationDNSRecord struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

func (o *GetApplicationDNSRecord) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetApplicationDNSRecord) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetApplicationDNSRecord) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetApplicationValidationError struct {
	Message string `json:"message"`
}

func (o *GetApplicationValidationError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetApplicationSsl struct {
	Status           string                          `json:"status"`
	ValidationErrors []GetApplicationValidationError `json:"validation_errors,omitempty"`
}

func (o *GetApplicationSsl) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *GetApplicationSsl) GetValidationErrors() []GetApplicationValidationError {
	if o == nil {
		return nil
	}
	return o.ValidationErrors
}

type GetApplicationCloudflareData struct {
	ID                 string            `json:"id"`
	Status             string            `json:"status"`
	Ssl                GetApplicationSsl `json:"ssl"`
	VerificationErrors []string          `json:"verification_errors,omitempty"`
}

func (o *GetApplicationCloudflareData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetApplicationCloudflareData) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *GetApplicationCloudflareData) GetSsl() GetApplicationSsl {
	if o == nil {
		return GetApplicationSsl{}
	}
	return o.Ssl
}

func (o *GetApplicationCloudflareData) GetVerificationErrors() []string {
	if o == nil {
		return nil
	}
	return o.VerificationErrors
}

type GetApplicationCustomDomain struct {
	Domain         string                        `json:"domain"`
	Status         GetApplicationStatus          `json:"status"`
	ErrorMessage   *string                       `json:"errorMessage"`
	DNSRecords     []GetApplicationDNSRecord     `json:"dnsRecords"`
	CloudflareData *GetApplicationCloudflareData `json:"cloudflareData"`
}

func (o *GetApplicationCustomDomain) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetApplicationCustomDomain) GetStatus() GetApplicationStatus {
	if o == nil {
		return GetApplicationStatus("")
	}
	return o.Status
}

func (o *GetApplicationCustomDomain) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *GetApplicationCustomDomain) GetDNSRecords() []GetApplicationDNSRecord {
	if o == nil {
		return []GetApplicationDNSRecord{}
	}
	return o.DNSRecords
}

func (o *GetApplicationCustomDomain) GetCloudflareData() *GetApplicationCloudflareData {
	if o == nil {
		return nil
	}
	return o.CloudflareData
}

type GetApplicationProtectedAppMetadata struct {
	Host            string                       `json:"host"`
	Origin          string                       `json:"origin"`
	SessionDuration float64                      `json:"sessionDuration"`
	PageRules       []GetApplicationPageRule     `json:"pageRules"`
	CustomDomains   []GetApplicationCustomDomain `json:"customDomains,omitempty"`
}

func (o *GetApplicationProtectedAppMetadata) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetApplicationProtectedAppMetadata) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

func (o *GetApplicationProtectedAppMetadata) GetSessionDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.SessionDuration
}

func (o *GetApplicationProtectedAppMetadata) GetPageRules() []GetApplicationPageRule {
	if o == nil {
		return []GetApplicationPageRule{}
	}
	return o.PageRules
}

func (o *GetApplicationProtectedAppMetadata) GetCustomDomains() []GetApplicationCustomDomain {
	if o == nil {
		return nil
	}
	return o.CustomDomains
}

// GetApplicationCustomData - arbitrary
type GetApplicationCustomData struct {
}

// GetApplicationResponseBody - Details of the application.
type GetApplicationResponseBody struct {
	TenantID string `json:"tenantId"`
	ID       string `json:"id"`
	Name     string `json:"name"`
	// The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Secret               string                              `json:"secret"`
	Description          *string                             `json:"description"`
	Type                 GetApplicationType                  `json:"type"`
	OidcClientMetadata   GetApplicationOidcClientMetadata    `json:"oidcClientMetadata"`
	CustomClientMetadata GetApplicationCustomClientMetadata  `json:"customClientMetadata"`
	ProtectedAppMetadata *GetApplicationProtectedAppMetadata `json:"protectedAppMetadata"`
	// arbitrary
	CustomData   GetApplicationCustomData `json:"customData"`
	IsThirdParty bool                     `json:"isThirdParty"`
	CreatedAt    float64                  `json:"createdAt"`
	IsAdmin      bool                     `json:"isAdmin"`
}

func (o *GetApplicationResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *GetApplicationResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetApplicationResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetApplicationResponseBody) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *GetApplicationResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetApplicationResponseBody) GetType() GetApplicationType {
	if o == nil {
		return GetApplicationType("")
	}
	return o.Type
}

func (o *GetApplicationResponseBody) GetOidcClientMetadata() GetApplicationOidcClientMetadata {
	if o == nil {
		return GetApplicationOidcClientMetadata{}
	}
	return o.OidcClientMetadata
}

func (o *GetApplicationResponseBody) GetCustomClientMetadata() GetApplicationCustomClientMetadata {
	if o == nil {
		return GetApplicationCustomClientMetadata{}
	}
	return o.CustomClientMetadata
}

func (o *GetApplicationResponseBody) GetProtectedAppMetadata() *GetApplicationProtectedAppMetadata {
	if o == nil {
		return nil
	}
	return o.ProtectedAppMetadata
}

func (o *GetApplicationResponseBody) GetCustomData() GetApplicationCustomData {
	if o == nil {
		return GetApplicationCustomData{}
	}
	return o.CustomData
}

func (o *GetApplicationResponseBody) GetIsThirdParty() bool {
	if o == nil {
		return false
	}
	return o.IsThirdParty
}

func (o *GetApplicationResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetApplicationResponseBody) GetIsAdmin() bool {
	if o == nil {
		return false
	}
	return o.IsAdmin
}

type GetApplicationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Details of the application.
	Object *GetApplicationResponseBody
}

func (o *GetApplicationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetApplicationResponse) GetObject() *GetApplicationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
