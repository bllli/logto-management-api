// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type GetSignInExperienceConfigRequest struct {
	OrganizationID *string `queryParam:"style=form,explode=true,name=organizationId"`
	AppID          *string `queryParam:"style=form,explode=true,name=appId"`
}

func (o *GetSignInExperienceConfigRequest) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *GetSignInExperienceConfigRequest) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

type GetSignInExperienceConfigColor struct {
	PrimaryColor      string `json:"primaryColor"`
	IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
	DarkPrimaryColor  string `json:"darkPrimaryColor"`
}

func (o *GetSignInExperienceConfigColor) GetPrimaryColor() string {
	if o == nil {
		return ""
	}
	return o.PrimaryColor
}

func (o *GetSignInExperienceConfigColor) GetIsDarkModeEnabled() bool {
	if o == nil {
		return false
	}
	return o.IsDarkModeEnabled
}

func (o *GetSignInExperienceConfigColor) GetDarkPrimaryColor() string {
	if o == nil {
		return ""
	}
	return o.DarkPrimaryColor
}

type GetSignInExperienceConfigBranding struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *GetSignInExperienceConfigBranding) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *GetSignInExperienceConfigBranding) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *GetSignInExperienceConfigBranding) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *GetSignInExperienceConfigBranding) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

type GetSignInExperienceConfigFallbackLanguage string

const (
	GetSignInExperienceConfigFallbackLanguageAfZa  GetSignInExperienceConfigFallbackLanguage = "af-ZA"
	GetSignInExperienceConfigFallbackLanguageAmEt  GetSignInExperienceConfigFallbackLanguage = "am-ET"
	GetSignInExperienceConfigFallbackLanguageAr    GetSignInExperienceConfigFallbackLanguage = "ar"
	GetSignInExperienceConfigFallbackLanguageArAr  GetSignInExperienceConfigFallbackLanguage = "ar-AR"
	GetSignInExperienceConfigFallbackLanguageAsIn  GetSignInExperienceConfigFallbackLanguage = "as-IN"
	GetSignInExperienceConfigFallbackLanguageAzAz  GetSignInExperienceConfigFallbackLanguage = "az-AZ"
	GetSignInExperienceConfigFallbackLanguageBeBy  GetSignInExperienceConfigFallbackLanguage = "be-BY"
	GetSignInExperienceConfigFallbackLanguageBgBg  GetSignInExperienceConfigFallbackLanguage = "bg-BG"
	GetSignInExperienceConfigFallbackLanguageBnIn  GetSignInExperienceConfigFallbackLanguage = "bn-IN"
	GetSignInExperienceConfigFallbackLanguageBrFr  GetSignInExperienceConfigFallbackLanguage = "br-FR"
	GetSignInExperienceConfigFallbackLanguageBsBa  GetSignInExperienceConfigFallbackLanguage = "bs-BA"
	GetSignInExperienceConfigFallbackLanguageCaEs  GetSignInExperienceConfigFallbackLanguage = "ca-ES"
	GetSignInExperienceConfigFallbackLanguageCbIq  GetSignInExperienceConfigFallbackLanguage = "cb-IQ"
	GetSignInExperienceConfigFallbackLanguageCoFr  GetSignInExperienceConfigFallbackLanguage = "co-FR"
	GetSignInExperienceConfigFallbackLanguageCsCz  GetSignInExperienceConfigFallbackLanguage = "cs-CZ"
	GetSignInExperienceConfigFallbackLanguageCxPh  GetSignInExperienceConfigFallbackLanguage = "cx-PH"
	GetSignInExperienceConfigFallbackLanguageCyGb  GetSignInExperienceConfigFallbackLanguage = "cy-GB"
	GetSignInExperienceConfigFallbackLanguageDaDk  GetSignInExperienceConfigFallbackLanguage = "da-DK"
	GetSignInExperienceConfigFallbackLanguageDe    GetSignInExperienceConfigFallbackLanguage = "de"
	GetSignInExperienceConfigFallbackLanguageDeDe  GetSignInExperienceConfigFallbackLanguage = "de-DE"
	GetSignInExperienceConfigFallbackLanguageElGr  GetSignInExperienceConfigFallbackLanguage = "el-GR"
	GetSignInExperienceConfigFallbackLanguageEn    GetSignInExperienceConfigFallbackLanguage = "en"
	GetSignInExperienceConfigFallbackLanguageEnGb  GetSignInExperienceConfigFallbackLanguage = "en-GB"
	GetSignInExperienceConfigFallbackLanguageEnUs  GetSignInExperienceConfigFallbackLanguage = "en-US"
	GetSignInExperienceConfigFallbackLanguageEoEo  GetSignInExperienceConfigFallbackLanguage = "eo-EO"
	GetSignInExperienceConfigFallbackLanguageEs    GetSignInExperienceConfigFallbackLanguage = "es"
	GetSignInExperienceConfigFallbackLanguageEsEs  GetSignInExperienceConfigFallbackLanguage = "es-ES"
	GetSignInExperienceConfigFallbackLanguageEs419 GetSignInExperienceConfigFallbackLanguage = "es-419"
	GetSignInExperienceConfigFallbackLanguageEtEe  GetSignInExperienceConfigFallbackLanguage = "et-EE"
	GetSignInExperienceConfigFallbackLanguageEuEs  GetSignInExperienceConfigFallbackLanguage = "eu-ES"
	GetSignInExperienceConfigFallbackLanguageFaIr  GetSignInExperienceConfigFallbackLanguage = "fa-IR"
	GetSignInExperienceConfigFallbackLanguageFfNg  GetSignInExperienceConfigFallbackLanguage = "ff-NG"
	GetSignInExperienceConfigFallbackLanguageFi    GetSignInExperienceConfigFallbackLanguage = "fi"
	GetSignInExperienceConfigFallbackLanguageFiFi  GetSignInExperienceConfigFallbackLanguage = "fi-FI"
	GetSignInExperienceConfigFallbackLanguageFoFo  GetSignInExperienceConfigFallbackLanguage = "fo-FO"
	GetSignInExperienceConfigFallbackLanguageFr    GetSignInExperienceConfigFallbackLanguage = "fr"
	GetSignInExperienceConfigFallbackLanguageFrCa  GetSignInExperienceConfigFallbackLanguage = "fr-CA"
	GetSignInExperienceConfigFallbackLanguageFrFr  GetSignInExperienceConfigFallbackLanguage = "fr-FR"
	GetSignInExperienceConfigFallbackLanguageFyNl  GetSignInExperienceConfigFallbackLanguage = "fy-NL"
	GetSignInExperienceConfigFallbackLanguageGaIe  GetSignInExperienceConfigFallbackLanguage = "ga-IE"
	GetSignInExperienceConfigFallbackLanguageGlEs  GetSignInExperienceConfigFallbackLanguage = "gl-ES"
	GetSignInExperienceConfigFallbackLanguageGnPy  GetSignInExperienceConfigFallbackLanguage = "gn-PY"
	GetSignInExperienceConfigFallbackLanguageGuIn  GetSignInExperienceConfigFallbackLanguage = "gu-IN"
	GetSignInExperienceConfigFallbackLanguageHaNg  GetSignInExperienceConfigFallbackLanguage = "ha-NG"
	GetSignInExperienceConfigFallbackLanguageHeIl  GetSignInExperienceConfigFallbackLanguage = "he-IL"
	GetSignInExperienceConfigFallbackLanguageHiIn  GetSignInExperienceConfigFallbackLanguage = "hi-IN"
	GetSignInExperienceConfigFallbackLanguageHrHr  GetSignInExperienceConfigFallbackLanguage = "hr-HR"
	GetSignInExperienceConfigFallbackLanguageHtHt  GetSignInExperienceConfigFallbackLanguage = "ht-HT"
	GetSignInExperienceConfigFallbackLanguageHuHu  GetSignInExperienceConfigFallbackLanguage = "hu-HU"
	GetSignInExperienceConfigFallbackLanguageHyAm  GetSignInExperienceConfigFallbackLanguage = "hy-AM"
	GetSignInExperienceConfigFallbackLanguageIDID  GetSignInExperienceConfigFallbackLanguage = "id-ID"
	GetSignInExperienceConfigFallbackLanguageIkUs  GetSignInExperienceConfigFallbackLanguage = "ik-US"
	GetSignInExperienceConfigFallbackLanguageIsIs  GetSignInExperienceConfigFallbackLanguage = "is-IS"
	GetSignInExperienceConfigFallbackLanguageIt    GetSignInExperienceConfigFallbackLanguage = "it"
	GetSignInExperienceConfigFallbackLanguageItIt  GetSignInExperienceConfigFallbackLanguage = "it-IT"
	GetSignInExperienceConfigFallbackLanguageIuCa  GetSignInExperienceConfigFallbackLanguage = "iu-CA"
	GetSignInExperienceConfigFallbackLanguageJa    GetSignInExperienceConfigFallbackLanguage = "ja"
	GetSignInExperienceConfigFallbackLanguageJaJp  GetSignInExperienceConfigFallbackLanguage = "ja-JP"
	GetSignInExperienceConfigFallbackLanguageJaKs  GetSignInExperienceConfigFallbackLanguage = "ja-KS"
	GetSignInExperienceConfigFallbackLanguageJvID  GetSignInExperienceConfigFallbackLanguage = "jv-ID"
	GetSignInExperienceConfigFallbackLanguageKaGe  GetSignInExperienceConfigFallbackLanguage = "ka-GE"
	GetSignInExperienceConfigFallbackLanguageKkKz  GetSignInExperienceConfigFallbackLanguage = "kk-KZ"
	GetSignInExperienceConfigFallbackLanguageKmKh  GetSignInExperienceConfigFallbackLanguage = "km-KH"
	GetSignInExperienceConfigFallbackLanguageKnIn  GetSignInExperienceConfigFallbackLanguage = "kn-IN"
	GetSignInExperienceConfigFallbackLanguageKo    GetSignInExperienceConfigFallbackLanguage = "ko"
	GetSignInExperienceConfigFallbackLanguageKoKr  GetSignInExperienceConfigFallbackLanguage = "ko-KR"
	GetSignInExperienceConfigFallbackLanguageKuTr  GetSignInExperienceConfigFallbackLanguage = "ku-TR"
	GetSignInExperienceConfigFallbackLanguageKyKg  GetSignInExperienceConfigFallbackLanguage = "ky-KG"
	GetSignInExperienceConfigFallbackLanguageLoLa  GetSignInExperienceConfigFallbackLanguage = "lo-LA"
	GetSignInExperienceConfigFallbackLanguageLtLt  GetSignInExperienceConfigFallbackLanguage = "lt-LT"
	GetSignInExperienceConfigFallbackLanguageLvLv  GetSignInExperienceConfigFallbackLanguage = "lv-LV"
	GetSignInExperienceConfigFallbackLanguageMgMg  GetSignInExperienceConfigFallbackLanguage = "mg-MG"
	GetSignInExperienceConfigFallbackLanguageMkMk  GetSignInExperienceConfigFallbackLanguage = "mk-MK"
	GetSignInExperienceConfigFallbackLanguageMlIn  GetSignInExperienceConfigFallbackLanguage = "ml-IN"
	GetSignInExperienceConfigFallbackLanguageMnMn  GetSignInExperienceConfigFallbackLanguage = "mn-MN"
	GetSignInExperienceConfigFallbackLanguageMrIn  GetSignInExperienceConfigFallbackLanguage = "mr-IN"
	GetSignInExperienceConfigFallbackLanguageMsMy  GetSignInExperienceConfigFallbackLanguage = "ms-MY"
	GetSignInExperienceConfigFallbackLanguageMtMt  GetSignInExperienceConfigFallbackLanguage = "mt-MT"
	GetSignInExperienceConfigFallbackLanguageMyMm  GetSignInExperienceConfigFallbackLanguage = "my-MM"
	GetSignInExperienceConfigFallbackLanguageNbNo  GetSignInExperienceConfigFallbackLanguage = "nb-NO"
	GetSignInExperienceConfigFallbackLanguageNeNp  GetSignInExperienceConfigFallbackLanguage = "ne-NP"
	GetSignInExperienceConfigFallbackLanguageNl    GetSignInExperienceConfigFallbackLanguage = "nl"
	GetSignInExperienceConfigFallbackLanguageNlBe  GetSignInExperienceConfigFallbackLanguage = "nl-BE"
	GetSignInExperienceConfigFallbackLanguageNlNl  GetSignInExperienceConfigFallbackLanguage = "nl-NL"
	GetSignInExperienceConfigFallbackLanguageNnNo  GetSignInExperienceConfigFallbackLanguage = "nn-NO"
	GetSignInExperienceConfigFallbackLanguageOrIn  GetSignInExperienceConfigFallbackLanguage = "or-IN"
	GetSignInExperienceConfigFallbackLanguagePaIn  GetSignInExperienceConfigFallbackLanguage = "pa-IN"
	GetSignInExperienceConfigFallbackLanguagePlPl  GetSignInExperienceConfigFallbackLanguage = "pl-PL"
	GetSignInExperienceConfigFallbackLanguagePsAf  GetSignInExperienceConfigFallbackLanguage = "ps-AF"
	GetSignInExperienceConfigFallbackLanguagePt    GetSignInExperienceConfigFallbackLanguage = "pt"
	GetSignInExperienceConfigFallbackLanguagePtBr  GetSignInExperienceConfigFallbackLanguage = "pt-BR"
	GetSignInExperienceConfigFallbackLanguagePtPt  GetSignInExperienceConfigFallbackLanguage = "pt-PT"
	GetSignInExperienceConfigFallbackLanguageRoRo  GetSignInExperienceConfigFallbackLanguage = "ro-RO"
	GetSignInExperienceConfigFallbackLanguageRu    GetSignInExperienceConfigFallbackLanguage = "ru"
	GetSignInExperienceConfigFallbackLanguageRuRu  GetSignInExperienceConfigFallbackLanguage = "ru-RU"
	GetSignInExperienceConfigFallbackLanguageRwRw  GetSignInExperienceConfigFallbackLanguage = "rw-RW"
	GetSignInExperienceConfigFallbackLanguageScIt  GetSignInExperienceConfigFallbackLanguage = "sc-IT"
	GetSignInExperienceConfigFallbackLanguageSiLk  GetSignInExperienceConfigFallbackLanguage = "si-LK"
	GetSignInExperienceConfigFallbackLanguageSkSk  GetSignInExperienceConfigFallbackLanguage = "sk-SK"
	GetSignInExperienceConfigFallbackLanguageSlSi  GetSignInExperienceConfigFallbackLanguage = "sl-SI"
	GetSignInExperienceConfigFallbackLanguageSnZw  GetSignInExperienceConfigFallbackLanguage = "sn-ZW"
	GetSignInExperienceConfigFallbackLanguageSqAl  GetSignInExperienceConfigFallbackLanguage = "sq-AL"
	GetSignInExperienceConfigFallbackLanguageSrRs  GetSignInExperienceConfigFallbackLanguage = "sr-RS"
	GetSignInExperienceConfigFallbackLanguageSv    GetSignInExperienceConfigFallbackLanguage = "sv"
	GetSignInExperienceConfigFallbackLanguageSvSe  GetSignInExperienceConfigFallbackLanguage = "sv-SE"
	GetSignInExperienceConfigFallbackLanguageSwKe  GetSignInExperienceConfigFallbackLanguage = "sw-KE"
	GetSignInExperienceConfigFallbackLanguageSySy  GetSignInExperienceConfigFallbackLanguage = "sy-SY"
	GetSignInExperienceConfigFallbackLanguageSzPl  GetSignInExperienceConfigFallbackLanguage = "sz-PL"
	GetSignInExperienceConfigFallbackLanguageTaIn  GetSignInExperienceConfigFallbackLanguage = "ta-IN"
	GetSignInExperienceConfigFallbackLanguageTeIn  GetSignInExperienceConfigFallbackLanguage = "te-IN"
	GetSignInExperienceConfigFallbackLanguageTgTj  GetSignInExperienceConfigFallbackLanguage = "tg-TJ"
	GetSignInExperienceConfigFallbackLanguageTh    GetSignInExperienceConfigFallbackLanguage = "th"
	GetSignInExperienceConfigFallbackLanguageThTh  GetSignInExperienceConfigFallbackLanguage = "th-TH"
	GetSignInExperienceConfigFallbackLanguageTlPh  GetSignInExperienceConfigFallbackLanguage = "tl-PH"
	GetSignInExperienceConfigFallbackLanguageTr    GetSignInExperienceConfigFallbackLanguage = "tr"
	GetSignInExperienceConfigFallbackLanguageTrTr  GetSignInExperienceConfigFallbackLanguage = "tr-TR"
	GetSignInExperienceConfigFallbackLanguageTtRu  GetSignInExperienceConfigFallbackLanguage = "tt-RU"
	GetSignInExperienceConfigFallbackLanguageTzMa  GetSignInExperienceConfigFallbackLanguage = "tz-MA"
	GetSignInExperienceConfigFallbackLanguageUkUa  GetSignInExperienceConfigFallbackLanguage = "uk-UA"
	GetSignInExperienceConfigFallbackLanguageUrPk  GetSignInExperienceConfigFallbackLanguage = "ur-PK"
	GetSignInExperienceConfigFallbackLanguageUzUz  GetSignInExperienceConfigFallbackLanguage = "uz-UZ"
	GetSignInExperienceConfigFallbackLanguageViVn  GetSignInExperienceConfigFallbackLanguage = "vi-VN"
	GetSignInExperienceConfigFallbackLanguageZh    GetSignInExperienceConfigFallbackLanguage = "zh"
	GetSignInExperienceConfigFallbackLanguageZhCn  GetSignInExperienceConfigFallbackLanguage = "zh-CN"
	GetSignInExperienceConfigFallbackLanguageZhHk  GetSignInExperienceConfigFallbackLanguage = "zh-HK"
	GetSignInExperienceConfigFallbackLanguageZhMo  GetSignInExperienceConfigFallbackLanguage = "zh-MO"
	GetSignInExperienceConfigFallbackLanguageZhTw  GetSignInExperienceConfigFallbackLanguage = "zh-TW"
	GetSignInExperienceConfigFallbackLanguageZzTr  GetSignInExperienceConfigFallbackLanguage = "zz-TR"
)

func (e GetSignInExperienceConfigFallbackLanguage) ToPointer() *GetSignInExperienceConfigFallbackLanguage {
	return &e
}
func (e *GetSignInExperienceConfigFallbackLanguage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "af-ZA":
		fallthrough
	case "am-ET":
		fallthrough
	case "ar":
		fallthrough
	case "ar-AR":
		fallthrough
	case "as-IN":
		fallthrough
	case "az-AZ":
		fallthrough
	case "be-BY":
		fallthrough
	case "bg-BG":
		fallthrough
	case "bn-IN":
		fallthrough
	case "br-FR":
		fallthrough
	case "bs-BA":
		fallthrough
	case "ca-ES":
		fallthrough
	case "cb-IQ":
		fallthrough
	case "co-FR":
		fallthrough
	case "cs-CZ":
		fallthrough
	case "cx-PH":
		fallthrough
	case "cy-GB":
		fallthrough
	case "da-DK":
		fallthrough
	case "de":
		fallthrough
	case "de-DE":
		fallthrough
	case "el-GR":
		fallthrough
	case "en":
		fallthrough
	case "en-GB":
		fallthrough
	case "en-US":
		fallthrough
	case "eo-EO":
		fallthrough
	case "es":
		fallthrough
	case "es-ES":
		fallthrough
	case "es-419":
		fallthrough
	case "et-EE":
		fallthrough
	case "eu-ES":
		fallthrough
	case "fa-IR":
		fallthrough
	case "ff-NG":
		fallthrough
	case "fi":
		fallthrough
	case "fi-FI":
		fallthrough
	case "fo-FO":
		fallthrough
	case "fr":
		fallthrough
	case "fr-CA":
		fallthrough
	case "fr-FR":
		fallthrough
	case "fy-NL":
		fallthrough
	case "ga-IE":
		fallthrough
	case "gl-ES":
		fallthrough
	case "gn-PY":
		fallthrough
	case "gu-IN":
		fallthrough
	case "ha-NG":
		fallthrough
	case "he-IL":
		fallthrough
	case "hi-IN":
		fallthrough
	case "hr-HR":
		fallthrough
	case "ht-HT":
		fallthrough
	case "hu-HU":
		fallthrough
	case "hy-AM":
		fallthrough
	case "id-ID":
		fallthrough
	case "ik-US":
		fallthrough
	case "is-IS":
		fallthrough
	case "it":
		fallthrough
	case "it-IT":
		fallthrough
	case "iu-CA":
		fallthrough
	case "ja":
		fallthrough
	case "ja-JP":
		fallthrough
	case "ja-KS":
		fallthrough
	case "jv-ID":
		fallthrough
	case "ka-GE":
		fallthrough
	case "kk-KZ":
		fallthrough
	case "km-KH":
		fallthrough
	case "kn-IN":
		fallthrough
	case "ko":
		fallthrough
	case "ko-KR":
		fallthrough
	case "ku-TR":
		fallthrough
	case "ky-KG":
		fallthrough
	case "lo-LA":
		fallthrough
	case "lt-LT":
		fallthrough
	case "lv-LV":
		fallthrough
	case "mg-MG":
		fallthrough
	case "mk-MK":
		fallthrough
	case "ml-IN":
		fallthrough
	case "mn-MN":
		fallthrough
	case "mr-IN":
		fallthrough
	case "ms-MY":
		fallthrough
	case "mt-MT":
		fallthrough
	case "my-MM":
		fallthrough
	case "nb-NO":
		fallthrough
	case "ne-NP":
		fallthrough
	case "nl":
		fallthrough
	case "nl-BE":
		fallthrough
	case "nl-NL":
		fallthrough
	case "nn-NO":
		fallthrough
	case "or-IN":
		fallthrough
	case "pa-IN":
		fallthrough
	case "pl-PL":
		fallthrough
	case "ps-AF":
		fallthrough
	case "pt":
		fallthrough
	case "pt-BR":
		fallthrough
	case "pt-PT":
		fallthrough
	case "ro-RO":
		fallthrough
	case "ru":
		fallthrough
	case "ru-RU":
		fallthrough
	case "rw-RW":
		fallthrough
	case "sc-IT":
		fallthrough
	case "si-LK":
		fallthrough
	case "sk-SK":
		fallthrough
	case "sl-SI":
		fallthrough
	case "sn-ZW":
		fallthrough
	case "sq-AL":
		fallthrough
	case "sr-RS":
		fallthrough
	case "sv":
		fallthrough
	case "sv-SE":
		fallthrough
	case "sw-KE":
		fallthrough
	case "sy-SY":
		fallthrough
	case "sz-PL":
		fallthrough
	case "ta-IN":
		fallthrough
	case "te-IN":
		fallthrough
	case "tg-TJ":
		fallthrough
	case "th":
		fallthrough
	case "th-TH":
		fallthrough
	case "tl-PH":
		fallthrough
	case "tr":
		fallthrough
	case "tr-TR":
		fallthrough
	case "tt-RU":
		fallthrough
	case "tz-MA":
		fallthrough
	case "uk-UA":
		fallthrough
	case "ur-PK":
		fallthrough
	case "uz-UZ":
		fallthrough
	case "vi-VN":
		fallthrough
	case "zh":
		fallthrough
	case "zh-CN":
		fallthrough
	case "zh-HK":
		fallthrough
	case "zh-MO":
		fallthrough
	case "zh-TW":
		fallthrough
	case "zz-TR":
		*e = GetSignInExperienceConfigFallbackLanguage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigFallbackLanguage: %v", v)
	}
}

type GetSignInExperienceConfigLanguageInfo struct {
	AutoDetect       bool                                      `json:"autoDetect"`
	FallbackLanguage GetSignInExperienceConfigFallbackLanguage `json:"fallbackLanguage"`
}

func (o *GetSignInExperienceConfigLanguageInfo) GetAutoDetect() bool {
	if o == nil {
		return false
	}
	return o.AutoDetect
}

func (o *GetSignInExperienceConfigLanguageInfo) GetFallbackLanguage() GetSignInExperienceConfigFallbackLanguage {
	if o == nil {
		return GetSignInExperienceConfigFallbackLanguage("")
	}
	return o.FallbackLanguage
}

type GetSignInExperienceConfigAgreeToTermsPolicy string

const (
	GetSignInExperienceConfigAgreeToTermsPolicyAutomatic              GetSignInExperienceConfigAgreeToTermsPolicy = "Automatic"
	GetSignInExperienceConfigAgreeToTermsPolicyManualRegistrationOnly GetSignInExperienceConfigAgreeToTermsPolicy = "ManualRegistrationOnly"
	GetSignInExperienceConfigAgreeToTermsPolicyManual                 GetSignInExperienceConfigAgreeToTermsPolicy = "Manual"
)

func (e GetSignInExperienceConfigAgreeToTermsPolicy) ToPointer() *GetSignInExperienceConfigAgreeToTermsPolicy {
	return &e
}
func (e *GetSignInExperienceConfigAgreeToTermsPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Automatic":
		fallthrough
	case "ManualRegistrationOnly":
		fallthrough
	case "Manual":
		*e = GetSignInExperienceConfigAgreeToTermsPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigAgreeToTermsPolicy: %v", v)
	}
}

type GetSignInExperienceConfigMethodIdentifier string

const (
	GetSignInExperienceConfigMethodIdentifierUsername GetSignInExperienceConfigMethodIdentifier = "username"
	GetSignInExperienceConfigMethodIdentifierEmail    GetSignInExperienceConfigMethodIdentifier = "email"
	GetSignInExperienceConfigMethodIdentifierPhone    GetSignInExperienceConfigMethodIdentifier = "phone"
)

func (e GetSignInExperienceConfigMethodIdentifier) ToPointer() *GetSignInExperienceConfigMethodIdentifier {
	return &e
}
func (e *GetSignInExperienceConfigMethodIdentifier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = GetSignInExperienceConfigMethodIdentifier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigMethodIdentifier: %v", v)
	}
}

type GetSignInExperienceConfigMethod struct {
	Identifier        GetSignInExperienceConfigMethodIdentifier `json:"identifier"`
	Password          bool                                      `json:"password"`
	VerificationCode  bool                                      `json:"verificationCode"`
	IsPasswordPrimary bool                                      `json:"isPasswordPrimary"`
}

func (o *GetSignInExperienceConfigMethod) GetIdentifier() GetSignInExperienceConfigMethodIdentifier {
	if o == nil {
		return GetSignInExperienceConfigMethodIdentifier("")
	}
	return o.Identifier
}

func (o *GetSignInExperienceConfigMethod) GetPassword() bool {
	if o == nil {
		return false
	}
	return o.Password
}

func (o *GetSignInExperienceConfigMethod) GetVerificationCode() bool {
	if o == nil {
		return false
	}
	return o.VerificationCode
}

func (o *GetSignInExperienceConfigMethod) GetIsPasswordPrimary() bool {
	if o == nil {
		return false
	}
	return o.IsPasswordPrimary
}

type GetSignInExperienceConfigSignIn struct {
	Methods []GetSignInExperienceConfigMethod `json:"methods"`
}

func (o *GetSignInExperienceConfigSignIn) GetMethods() []GetSignInExperienceConfigMethod {
	if o == nil {
		return []GetSignInExperienceConfigMethod{}
	}
	return o.Methods
}

type GetSignInExperienceConfigSignUpIdentifierEnum string

const (
	GetSignInExperienceConfigSignUpIdentifierEnumUsername GetSignInExperienceConfigSignUpIdentifierEnum = "username"
	GetSignInExperienceConfigSignUpIdentifierEnumEmail    GetSignInExperienceConfigSignUpIdentifierEnum = "email"
	GetSignInExperienceConfigSignUpIdentifierEnumPhone    GetSignInExperienceConfigSignUpIdentifierEnum = "phone"
)

func (e GetSignInExperienceConfigSignUpIdentifierEnum) ToPointer() *GetSignInExperienceConfigSignUpIdentifierEnum {
	return &e
}
func (e *GetSignInExperienceConfigSignUpIdentifierEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = GetSignInExperienceConfigSignUpIdentifierEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigSignUpIdentifierEnum: %v", v)
	}
}

type GetSignInExperienceConfigIdentifierEmailOrPhone string

const (
	GetSignInExperienceConfigIdentifierEmailOrPhoneEmailOrPhone GetSignInExperienceConfigIdentifierEmailOrPhone = "emailOrPhone"
)

func (e GetSignInExperienceConfigIdentifierEmailOrPhone) ToPointer() *GetSignInExperienceConfigIdentifierEmailOrPhone {
	return &e
}
func (e *GetSignInExperienceConfigIdentifierEmailOrPhone) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "emailOrPhone":
		*e = GetSignInExperienceConfigIdentifierEmailOrPhone(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigIdentifierEmailOrPhone: %v", v)
	}
}

type GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum string

const (
	GetSignInExperienceConfigIdentifierSecondaryIdentifierEnumUsername GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum = "username"
	GetSignInExperienceConfigIdentifierSecondaryIdentifierEnumEmail    GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum = "email"
	GetSignInExperienceConfigIdentifierSecondaryIdentifierEnumPhone    GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum = "phone"
)

func (e GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum) ToPointer() *GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum {
	return &e
}
func (e *GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum: %v", v)
	}
}

type GetSignInExperienceConfigIdentifierUnionType string

const (
	GetSignInExperienceConfigIdentifierUnionTypeGetSignInExperienceConfigIdentifierSecondaryIdentifierEnum GetSignInExperienceConfigIdentifierUnionType = "GetSignInExperienceConfig_identifier_secondaryIdentifier_enum"
	GetSignInExperienceConfigIdentifierUnionTypeGetSignInExperienceConfigIdentifierEmailOrPhone            GetSignInExperienceConfigIdentifierUnionType = "GetSignInExperienceConfig_identifier_EmailOrPhone"
)

type GetSignInExperienceConfigIdentifierUnion struct {
	GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum *GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum `queryParam:"inline"`
	GetSignInExperienceConfigIdentifierEmailOrPhone            *GetSignInExperienceConfigIdentifierEmailOrPhone            `queryParam:"inline"`

	Type GetSignInExperienceConfigIdentifierUnionType
}

func CreateGetSignInExperienceConfigIdentifierUnionGetSignInExperienceConfigIdentifierSecondaryIdentifierEnum(getSignInExperienceConfigIdentifierSecondaryIdentifierEnum GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum) GetSignInExperienceConfigIdentifierUnion {
	typ := GetSignInExperienceConfigIdentifierUnionTypeGetSignInExperienceConfigIdentifierSecondaryIdentifierEnum

	return GetSignInExperienceConfigIdentifierUnion{
		GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum: &getSignInExperienceConfigIdentifierSecondaryIdentifierEnum,
		Type: typ,
	}
}

func CreateGetSignInExperienceConfigIdentifierUnionGetSignInExperienceConfigIdentifierEmailOrPhone(getSignInExperienceConfigIdentifierEmailOrPhone GetSignInExperienceConfigIdentifierEmailOrPhone) GetSignInExperienceConfigIdentifierUnion {
	typ := GetSignInExperienceConfigIdentifierUnionTypeGetSignInExperienceConfigIdentifierEmailOrPhone

	return GetSignInExperienceConfigIdentifierUnion{
		GetSignInExperienceConfigIdentifierEmailOrPhone: &getSignInExperienceConfigIdentifierEmailOrPhone,
		Type: typ,
	}
}

func (u *GetSignInExperienceConfigIdentifierUnion) UnmarshalJSON(data []byte) error {

	var getSignInExperienceConfigIdentifierSecondaryIdentifierEnum GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum = GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum("")
	if err := utils.UnmarshalJSON(data, &getSignInExperienceConfigIdentifierSecondaryIdentifierEnum, "", true, true); err == nil {
		u.GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum = &getSignInExperienceConfigIdentifierSecondaryIdentifierEnum
		u.Type = GetSignInExperienceConfigIdentifierUnionTypeGetSignInExperienceConfigIdentifierSecondaryIdentifierEnum
		return nil
	}

	var getSignInExperienceConfigIdentifierEmailOrPhone GetSignInExperienceConfigIdentifierEmailOrPhone = GetSignInExperienceConfigIdentifierEmailOrPhone("")
	if err := utils.UnmarshalJSON(data, &getSignInExperienceConfigIdentifierEmailOrPhone, "", true, true); err == nil {
		u.GetSignInExperienceConfigIdentifierEmailOrPhone = &getSignInExperienceConfigIdentifierEmailOrPhone
		u.Type = GetSignInExperienceConfigIdentifierUnionTypeGetSignInExperienceConfigIdentifierEmailOrPhone
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetSignInExperienceConfigIdentifierUnion", string(data))
}

func (u GetSignInExperienceConfigIdentifierUnion) MarshalJSON() ([]byte, error) {
	if u.GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum != nil {
		return utils.MarshalJSON(u.GetSignInExperienceConfigIdentifierSecondaryIdentifierEnum, "", true)
	}

	if u.GetSignInExperienceConfigIdentifierEmailOrPhone != nil {
		return utils.MarshalJSON(u.GetSignInExperienceConfigIdentifierEmailOrPhone, "", true)
	}

	return nil, errors.New("could not marshal union type GetSignInExperienceConfigIdentifierUnion: all fields are null")
}

type GetSignInExperienceConfigSecondaryIdentifier struct {
	Identifier GetSignInExperienceConfigIdentifierUnion `json:"identifier"`
	Verify     *bool                                    `json:"verify,omitempty"`
}

func (o *GetSignInExperienceConfigSecondaryIdentifier) GetIdentifier() GetSignInExperienceConfigIdentifierUnion {
	if o == nil {
		return GetSignInExperienceConfigIdentifierUnion{}
	}
	return o.Identifier
}

func (o *GetSignInExperienceConfigSecondaryIdentifier) GetVerify() *bool {
	if o == nil {
		return nil
	}
	return o.Verify
}

type GetSignInExperienceConfigSignUp struct {
	Identifiers          []GetSignInExperienceConfigSignUpIdentifierEnum `json:"identifiers"`
	Password             bool                                            `json:"password"`
	Verify               bool                                            `json:"verify"`
	SecondaryIdentifiers []GetSignInExperienceConfigSecondaryIdentifier  `json:"secondaryIdentifiers,omitempty"`
}

func (o *GetSignInExperienceConfigSignUp) GetIdentifiers() []GetSignInExperienceConfigSignUpIdentifierEnum {
	if o == nil {
		return []GetSignInExperienceConfigSignUpIdentifierEnum{}
	}
	return o.Identifiers
}

func (o *GetSignInExperienceConfigSignUp) GetPassword() bool {
	if o == nil {
		return false
	}
	return o.Password
}

func (o *GetSignInExperienceConfigSignUp) GetVerify() bool {
	if o == nil {
		return false
	}
	return o.Verify
}

func (o *GetSignInExperienceConfigSignUp) GetSecondaryIdentifiers() []GetSignInExperienceConfigSecondaryIdentifier {
	if o == nil {
		return nil
	}
	return o.SecondaryIdentifiers
}

type GetSignInExperienceConfigSocialSignIn struct {
	AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
}

func (o *GetSignInExperienceConfigSocialSignIn) GetAutomaticAccountLinking() *bool {
	if o == nil {
		return nil
	}
	return o.AutomaticAccountLinking
}

type GetSignInExperienceConfigSignInMode string

const (
	GetSignInExperienceConfigSignInModeSignIn            GetSignInExperienceConfigSignInMode = "SignIn"
	GetSignInExperienceConfigSignInModeRegister          GetSignInExperienceConfigSignInMode = "Register"
	GetSignInExperienceConfigSignInModeSignInAndRegister GetSignInExperienceConfigSignInMode = "SignInAndRegister"
)

func (e GetSignInExperienceConfigSignInMode) ToPointer() *GetSignInExperienceConfigSignInMode {
	return &e
}
func (e *GetSignInExperienceConfigSignInMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SignIn":
		fallthrough
	case "Register":
		fallthrough
	case "SignInAndRegister":
		*e = GetSignInExperienceConfigSignInMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigSignInMode: %v", v)
	}
}

type GetSignInExperienceConfigCustomUIAssets struct {
	ID        string  `json:"id"`
	CreatedAt float64 `json:"createdAt"`
}

func (o *GetSignInExperienceConfigCustomUIAssets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSignInExperienceConfigCustomUIAssets) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type GetSignInExperienceConfigLength struct {
	Min *float64 `default:"8" json:"min"`
	Max *float64 `default:"256" json:"max"`
}

func (g GetSignInExperienceConfigLength) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSignInExperienceConfigLength) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSignInExperienceConfigLength) GetMin() *float64 {
	if o == nil {
		return nil
	}
	return o.Min
}

func (o *GetSignInExperienceConfigLength) GetMax() *float64 {
	if o == nil {
		return nil
	}
	return o.Max
}

type GetSignInExperienceConfigCharacterTypes struct {
	Min *float64 `default:"1" json:"min"`
}

func (g GetSignInExperienceConfigCharacterTypes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSignInExperienceConfigCharacterTypes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSignInExperienceConfigCharacterTypes) GetMin() *float64 {
	if o == nil {
		return nil
	}
	return o.Min
}

type GetSignInExperienceConfigRejects struct {
	Pwned                 *bool    `default:"true" json:"pwned"`
	RepetitionAndSequence *bool    `default:"true" json:"repetitionAndSequence"`
	UserInfo              *bool    `default:"true" json:"userInfo"`
	Words                 []string `json:"words"`
}

func (g GetSignInExperienceConfigRejects) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSignInExperienceConfigRejects) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSignInExperienceConfigRejects) GetPwned() *bool {
	if o == nil {
		return nil
	}
	return o.Pwned
}

func (o *GetSignInExperienceConfigRejects) GetRepetitionAndSequence() *bool {
	if o == nil {
		return nil
	}
	return o.RepetitionAndSequence
}

func (o *GetSignInExperienceConfigRejects) GetUserInfo() *bool {
	if o == nil {
		return nil
	}
	return o.UserInfo
}

func (o *GetSignInExperienceConfigRejects) GetWords() []string {
	if o == nil {
		return []string{}
	}
	return o.Words
}

type GetSignInExperienceConfigPasswordPolicy struct {
	Length         *GetSignInExperienceConfigLength         `json:"length,omitempty"`
	CharacterTypes *GetSignInExperienceConfigCharacterTypes `json:"characterTypes,omitempty"`
	Rejects        *GetSignInExperienceConfigRejects        `json:"rejects,omitempty"`
}

func (o *GetSignInExperienceConfigPasswordPolicy) GetLength() *GetSignInExperienceConfigLength {
	if o == nil {
		return nil
	}
	return o.Length
}

func (o *GetSignInExperienceConfigPasswordPolicy) GetCharacterTypes() *GetSignInExperienceConfigCharacterTypes {
	if o == nil {
		return nil
	}
	return o.CharacterTypes
}

func (o *GetSignInExperienceConfigPasswordPolicy) GetRejects() *GetSignInExperienceConfigRejects {
	if o == nil {
		return nil
	}
	return o.Rejects
}

type GetSignInExperienceConfigFactor string

const (
	GetSignInExperienceConfigFactorTotp       GetSignInExperienceConfigFactor = "Totp"
	GetSignInExperienceConfigFactorWebAuthn   GetSignInExperienceConfigFactor = "WebAuthn"
	GetSignInExperienceConfigFactorBackupCode GetSignInExperienceConfigFactor = "BackupCode"
)

func (e GetSignInExperienceConfigFactor) ToPointer() *GetSignInExperienceConfigFactor {
	return &e
}
func (e *GetSignInExperienceConfigFactor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Totp":
		fallthrough
	case "WebAuthn":
		fallthrough
	case "BackupCode":
		*e = GetSignInExperienceConfigFactor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigFactor: %v", v)
	}
}

type GetSignInExperienceConfigPolicy string

const (
	GetSignInExperienceConfigPolicyUserControlled          GetSignInExperienceConfigPolicy = "UserControlled"
	GetSignInExperienceConfigPolicyMandatory               GetSignInExperienceConfigPolicy = "Mandatory"
	GetSignInExperienceConfigPolicyPromptOnlyAtSignIn      GetSignInExperienceConfigPolicy = "PromptOnlyAtSignIn"
	GetSignInExperienceConfigPolicyPromptAtSignInAndSignUp GetSignInExperienceConfigPolicy = "PromptAtSignInAndSignUp"
	GetSignInExperienceConfigPolicyNoPrompt                GetSignInExperienceConfigPolicy = "NoPrompt"
)

func (e GetSignInExperienceConfigPolicy) ToPointer() *GetSignInExperienceConfigPolicy {
	return &e
}
func (e *GetSignInExperienceConfigPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UserControlled":
		fallthrough
	case "Mandatory":
		fallthrough
	case "PromptOnlyAtSignIn":
		fallthrough
	case "PromptAtSignInAndSignUp":
		fallthrough
	case "NoPrompt":
		*e = GetSignInExperienceConfigPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigPolicy: %v", v)
	}
}

type GetSignInExperienceConfigOrganizationRequiredMfaPolicy string

const (
	GetSignInExperienceConfigOrganizationRequiredMfaPolicyNoPrompt  GetSignInExperienceConfigOrganizationRequiredMfaPolicy = "NoPrompt"
	GetSignInExperienceConfigOrganizationRequiredMfaPolicyMandatory GetSignInExperienceConfigOrganizationRequiredMfaPolicy = "Mandatory"
)

func (e GetSignInExperienceConfigOrganizationRequiredMfaPolicy) ToPointer() *GetSignInExperienceConfigOrganizationRequiredMfaPolicy {
	return &e
}
func (e *GetSignInExperienceConfigOrganizationRequiredMfaPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NoPrompt":
		fallthrough
	case "Mandatory":
		*e = GetSignInExperienceConfigOrganizationRequiredMfaPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigOrganizationRequiredMfaPolicy: %v", v)
	}
}

type GetSignInExperienceConfigMfa struct {
	Factors                       []GetSignInExperienceConfigFactor                       `json:"factors"`
	Policy                        GetSignInExperienceConfigPolicy                         `json:"policy"`
	OrganizationRequiredMfaPolicy *GetSignInExperienceConfigOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
}

func (o *GetSignInExperienceConfigMfa) GetFactors() []GetSignInExperienceConfigFactor {
	if o == nil {
		return []GetSignInExperienceConfigFactor{}
	}
	return o.Factors
}

func (o *GetSignInExperienceConfigMfa) GetPolicy() GetSignInExperienceConfigPolicy {
	if o == nil {
		return GetSignInExperienceConfigPolicy("")
	}
	return o.Policy
}

func (o *GetSignInExperienceConfigMfa) GetOrganizationRequiredMfaPolicy() *GetSignInExperienceConfigOrganizationRequiredMfaPolicy {
	if o == nil {
		return nil
	}
	return o.OrganizationRequiredMfaPolicy
}

type GetSignInExperienceConfigCaptchaPolicy struct {
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *GetSignInExperienceConfigCaptchaPolicy) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type GetSignInExperienceConfigSentinelPolicy struct {
	MaxAttempts     *float64 `json:"maxAttempts,omitempty"`
	LockoutDuration *float64 `json:"lockoutDuration,omitempty"`
}

func (o *GetSignInExperienceConfigSentinelPolicy) GetMaxAttempts() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAttempts
}

func (o *GetSignInExperienceConfigSentinelPolicy) GetLockoutDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.LockoutDuration
}

// GetSignInExperienceConfigName - Validator function
type GetSignInExperienceConfigName struct {
}

type GetSignInExperienceConfigPlatform string

const (
	GetSignInExperienceConfigPlatformNative    GetSignInExperienceConfigPlatform = "Native"
	GetSignInExperienceConfigPlatformUniversal GetSignInExperienceConfigPlatform = "Universal"
	GetSignInExperienceConfigPlatformWeb       GetSignInExperienceConfigPlatform = "Web"
)

func (e GetSignInExperienceConfigPlatform) ToPointer() *GetSignInExperienceConfigPlatform {
	return &e
}
func (e *GetSignInExperienceConfigPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "Universal":
		fallthrough
	case "Web":
		*e = GetSignInExperienceConfigPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigPlatform: %v", v)
	}
}

type GetSignInExperienceConfigSocialConnector struct {
	ID     string `json:"id"`
	Target string `json:"target"`
	// Validator function
	Name       GetSignInExperienceConfigName      `json:"name"`
	Logo       string                             `json:"logo"`
	LogoDark   *string                            `json:"logoDark"`
	FromEmail  *string                            `json:"fromEmail,omitempty"`
	Platform   *GetSignInExperienceConfigPlatform `json:"platform"`
	IsStandard *bool                              `json:"isStandard,omitempty"`
}

func (o *GetSignInExperienceConfigSocialConnector) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSignInExperienceConfigSocialConnector) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *GetSignInExperienceConfigSocialConnector) GetName() GetSignInExperienceConfigName {
	if o == nil {
		return GetSignInExperienceConfigName{}
	}
	return o.Name
}

func (o *GetSignInExperienceConfigSocialConnector) GetLogo() string {
	if o == nil {
		return ""
	}
	return o.Logo
}

func (o *GetSignInExperienceConfigSocialConnector) GetLogoDark() *string {
	if o == nil {
		return nil
	}
	return o.LogoDark
}

func (o *GetSignInExperienceConfigSocialConnector) GetFromEmail() *string {
	if o == nil {
		return nil
	}
	return o.FromEmail
}

func (o *GetSignInExperienceConfigSocialConnector) GetPlatform() *GetSignInExperienceConfigPlatform {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *GetSignInExperienceConfigSocialConnector) GetIsStandard() *bool {
	if o == nil {
		return nil
	}
	return o.IsStandard
}

type GetSignInExperienceConfigSsoConnector struct {
	ID            string  `json:"id"`
	ConnectorName string  `json:"connectorName"`
	Logo          string  `json:"logo"`
	DarkLogo      *string `json:"darkLogo,omitempty"`
}

func (o *GetSignInExperienceConfigSsoConnector) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSignInExperienceConfigSsoConnector) GetConnectorName() string {
	if o == nil {
		return ""
	}
	return o.ConnectorName
}

func (o *GetSignInExperienceConfigSsoConnector) GetLogo() string {
	if o == nil {
		return ""
	}
	return o.Logo
}

func (o *GetSignInExperienceConfigSsoConnector) GetDarkLogo() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogo
}

type GetSignInExperienceConfigForgotPassword struct {
	Phone bool `json:"phone"`
	Email bool `json:"email"`
}

func (o *GetSignInExperienceConfigForgotPassword) GetPhone() bool {
	if o == nil {
		return false
	}
	return o.Phone
}

func (o *GetSignInExperienceConfigForgotPassword) GetEmail() bool {
	if o == nil {
		return false
	}
	return o.Email
}

type GetSignInExperienceConfigGoogleOneTap struct {
	IsEnabled         *bool  `json:"isEnabled,omitempty"`
	AutoSelect        *bool  `json:"autoSelect,omitempty"`
	CloseOnTapOutside *bool  `json:"closeOnTapOutside,omitempty"`
	ItpSupport        *bool  `json:"itpSupport,omitempty"`
	ClientID          string `json:"clientId"`
	ConnectorID       string `json:"connectorId"`
}

func (o *GetSignInExperienceConfigGoogleOneTap) GetIsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsEnabled
}

func (o *GetSignInExperienceConfigGoogleOneTap) GetAutoSelect() *bool {
	if o == nil {
		return nil
	}
	return o.AutoSelect
}

func (o *GetSignInExperienceConfigGoogleOneTap) GetCloseOnTapOutside() *bool {
	if o == nil {
		return nil
	}
	return o.CloseOnTapOutside
}

func (o *GetSignInExperienceConfigGoogleOneTap) GetItpSupport() *bool {
	if o == nil {
		return nil
	}
	return o.ItpSupport
}

func (o *GetSignInExperienceConfigGoogleOneTap) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *GetSignInExperienceConfigGoogleOneTap) GetConnectorID() string {
	if o == nil {
		return ""
	}
	return o.ConnectorID
}

type GetSignInExperienceConfigType string

const (
	GetSignInExperienceConfigTypeRecaptchaEnterprise GetSignInExperienceConfigType = "RecaptchaEnterprise"
	GetSignInExperienceConfigTypeTurnstile           GetSignInExperienceConfigType = "Turnstile"
)

func (e GetSignInExperienceConfigType) ToPointer() *GetSignInExperienceConfigType {
	return &e
}
func (e *GetSignInExperienceConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RecaptchaEnterprise":
		fallthrough
	case "Turnstile":
		*e = GetSignInExperienceConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignInExperienceConfigType: %v", v)
	}
}

type GetSignInExperienceConfigCaptchaConfig struct {
	Type    GetSignInExperienceConfigType `json:"type"`
	SiteKey string                        `json:"siteKey"`
}

func (o *GetSignInExperienceConfigCaptchaConfig) GetType() GetSignInExperienceConfigType {
	if o == nil {
		return GetSignInExperienceConfigType("")
	}
	return o.Type
}

func (o *GetSignInExperienceConfigCaptchaConfig) GetSiteKey() string {
	if o == nil {
		return ""
	}
	return o.SiteKey
}

// GetSignInExperienceConfigResponseBody - The full sign-in experience configuration.
type GetSignInExperienceConfigResponseBody struct {
	TenantID                     string                                      `json:"tenantId"`
	ID                           string                                      `json:"id"`
	Color                        GetSignInExperienceConfigColor              `json:"color"`
	Branding                     GetSignInExperienceConfigBranding           `json:"branding"`
	LanguageInfo                 GetSignInExperienceConfigLanguageInfo       `json:"languageInfo"`
	TermsOfUseURL                *string                                     `json:"termsOfUseUrl"`
	PrivacyPolicyURL             *string                                     `json:"privacyPolicyUrl"`
	AgreeToTermsPolicy           GetSignInExperienceConfigAgreeToTermsPolicy `json:"agreeToTermsPolicy"`
	SignIn                       GetSignInExperienceConfigSignIn             `json:"signIn"`
	SignUp                       GetSignInExperienceConfigSignUp             `json:"signUp"`
	SocialSignIn                 GetSignInExperienceConfigSocialSignIn       `json:"socialSignIn"`
	SocialSignInConnectorTargets []string                                    `json:"socialSignInConnectorTargets"`
	SignInMode                   GetSignInExperienceConfigSignInMode         `json:"signInMode"`
	CustomCSS                    *string                                     `json:"customCss"`
	CustomContent                map[string]string                           `json:"customContent"`
	CustomUIAssets               *GetSignInExperienceConfigCustomUIAssets    `json:"customUiAssets"`
	PasswordPolicy               GetSignInExperienceConfigPasswordPolicy     `json:"passwordPolicy"`
	Mfa                          GetSignInExperienceConfigMfa                `json:"mfa"`
	SingleSignOnEnabled          bool                                        `json:"singleSignOnEnabled"`
	SupportEmail                 *string                                     `json:"supportEmail"`
	SupportWebsiteURL            *string                                     `json:"supportWebsiteUrl"`
	UnknownSessionRedirectURL    *string                                     `json:"unknownSessionRedirectUrl"`
	CaptchaPolicy                GetSignInExperienceConfigCaptchaPolicy      `json:"captchaPolicy"`
	SentinelPolicy               GetSignInExperienceConfigSentinelPolicy     `json:"sentinelPolicy"`
	SocialConnectors             []GetSignInExperienceConfigSocialConnector  `json:"socialConnectors"`
	SsoConnectors                []GetSignInExperienceConfigSsoConnector     `json:"ssoConnectors"`
	ForgotPassword               GetSignInExperienceConfigForgotPassword     `json:"forgotPassword"`
	IsDevelopmentTenant          bool                                        `json:"isDevelopmentTenant"`
	GoogleOneTap                 *GetSignInExperienceConfigGoogleOneTap      `json:"googleOneTap,omitempty"`
	CaptchaConfig                *GetSignInExperienceConfigCaptchaConfig     `json:"captchaConfig,omitempty"`
}

func (o *GetSignInExperienceConfigResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *GetSignInExperienceConfigResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSignInExperienceConfigResponseBody) GetColor() GetSignInExperienceConfigColor {
	if o == nil {
		return GetSignInExperienceConfigColor{}
	}
	return o.Color
}

func (o *GetSignInExperienceConfigResponseBody) GetBranding() GetSignInExperienceConfigBranding {
	if o == nil {
		return GetSignInExperienceConfigBranding{}
	}
	return o.Branding
}

func (o *GetSignInExperienceConfigResponseBody) GetLanguageInfo() GetSignInExperienceConfigLanguageInfo {
	if o == nil {
		return GetSignInExperienceConfigLanguageInfo{}
	}
	return o.LanguageInfo
}

func (o *GetSignInExperienceConfigResponseBody) GetTermsOfUseURL() *string {
	if o == nil {
		return nil
	}
	return o.TermsOfUseURL
}

func (o *GetSignInExperienceConfigResponseBody) GetPrivacyPolicyURL() *string {
	if o == nil {
		return nil
	}
	return o.PrivacyPolicyURL
}

func (o *GetSignInExperienceConfigResponseBody) GetAgreeToTermsPolicy() GetSignInExperienceConfigAgreeToTermsPolicy {
	if o == nil {
		return GetSignInExperienceConfigAgreeToTermsPolicy("")
	}
	return o.AgreeToTermsPolicy
}

func (o *GetSignInExperienceConfigResponseBody) GetSignIn() GetSignInExperienceConfigSignIn {
	if o == nil {
		return GetSignInExperienceConfigSignIn{}
	}
	return o.SignIn
}

func (o *GetSignInExperienceConfigResponseBody) GetSignUp() GetSignInExperienceConfigSignUp {
	if o == nil {
		return GetSignInExperienceConfigSignUp{}
	}
	return o.SignUp
}

func (o *GetSignInExperienceConfigResponseBody) GetSocialSignIn() GetSignInExperienceConfigSocialSignIn {
	if o == nil {
		return GetSignInExperienceConfigSocialSignIn{}
	}
	return o.SocialSignIn
}

func (o *GetSignInExperienceConfigResponseBody) GetSocialSignInConnectorTargets() []string {
	if o == nil {
		return []string{}
	}
	return o.SocialSignInConnectorTargets
}

func (o *GetSignInExperienceConfigResponseBody) GetSignInMode() GetSignInExperienceConfigSignInMode {
	if o == nil {
		return GetSignInExperienceConfigSignInMode("")
	}
	return o.SignInMode
}

func (o *GetSignInExperienceConfigResponseBody) GetCustomCSS() *string {
	if o == nil {
		return nil
	}
	return o.CustomCSS
}

func (o *GetSignInExperienceConfigResponseBody) GetCustomContent() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.CustomContent
}

func (o *GetSignInExperienceConfigResponseBody) GetCustomUIAssets() *GetSignInExperienceConfigCustomUIAssets {
	if o == nil {
		return nil
	}
	return o.CustomUIAssets
}

func (o *GetSignInExperienceConfigResponseBody) GetPasswordPolicy() GetSignInExperienceConfigPasswordPolicy {
	if o == nil {
		return GetSignInExperienceConfigPasswordPolicy{}
	}
	return o.PasswordPolicy
}

func (o *GetSignInExperienceConfigResponseBody) GetMfa() GetSignInExperienceConfigMfa {
	if o == nil {
		return GetSignInExperienceConfigMfa{}
	}
	return o.Mfa
}

func (o *GetSignInExperienceConfigResponseBody) GetSingleSignOnEnabled() bool {
	if o == nil {
		return false
	}
	return o.SingleSignOnEnabled
}

func (o *GetSignInExperienceConfigResponseBody) GetSupportEmail() *string {
	if o == nil {
		return nil
	}
	return o.SupportEmail
}

func (o *GetSignInExperienceConfigResponseBody) GetSupportWebsiteURL() *string {
	if o == nil {
		return nil
	}
	return o.SupportWebsiteURL
}

func (o *GetSignInExperienceConfigResponseBody) GetUnknownSessionRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.UnknownSessionRedirectURL
}

func (o *GetSignInExperienceConfigResponseBody) GetCaptchaPolicy() GetSignInExperienceConfigCaptchaPolicy {
	if o == nil {
		return GetSignInExperienceConfigCaptchaPolicy{}
	}
	return o.CaptchaPolicy
}

func (o *GetSignInExperienceConfigResponseBody) GetSentinelPolicy() GetSignInExperienceConfigSentinelPolicy {
	if o == nil {
		return GetSignInExperienceConfigSentinelPolicy{}
	}
	return o.SentinelPolicy
}

func (o *GetSignInExperienceConfigResponseBody) GetSocialConnectors() []GetSignInExperienceConfigSocialConnector {
	if o == nil {
		return []GetSignInExperienceConfigSocialConnector{}
	}
	return o.SocialConnectors
}

func (o *GetSignInExperienceConfigResponseBody) GetSsoConnectors() []GetSignInExperienceConfigSsoConnector {
	if o == nil {
		return []GetSignInExperienceConfigSsoConnector{}
	}
	return o.SsoConnectors
}

func (o *GetSignInExperienceConfigResponseBody) GetForgotPassword() GetSignInExperienceConfigForgotPassword {
	if o == nil {
		return GetSignInExperienceConfigForgotPassword{}
	}
	return o.ForgotPassword
}

func (o *GetSignInExperienceConfigResponseBody) GetIsDevelopmentTenant() bool {
	if o == nil {
		return false
	}
	return o.IsDevelopmentTenant
}

func (o *GetSignInExperienceConfigResponseBody) GetGoogleOneTap() *GetSignInExperienceConfigGoogleOneTap {
	if o == nil {
		return nil
	}
	return o.GoogleOneTap
}

func (o *GetSignInExperienceConfigResponseBody) GetCaptchaConfig() *GetSignInExperienceConfigCaptchaConfig {
	if o == nil {
		return nil
	}
	return o.CaptchaConfig
}

type GetSignInExperienceConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The full sign-in experience configuration.
	Object *GetSignInExperienceConfigResponseBody
}

func (o *GetSignInExperienceConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSignInExperienceConfigResponse) GetObject() *GetSignInExperienceConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
