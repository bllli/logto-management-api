// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type GetLogRequest struct {
	// The unique identifier of the log.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetLogRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetLogResult string

const (
	GetLogResultSuccess GetLogResult = "Success"
	GetLogResultError   GetLogResult = "Error"
)

func (e GetLogResult) ToPointer() *GetLogResult {
	return &e
}
func (e *GetLogResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Success":
		fallthrough
	case "Error":
		*e = GetLogResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLogResult: %v", v)
	}
}

type GetLogErrorType string

const (
	GetLogErrorTypeMapOfAny GetLogErrorType = "mapOfAny"
	GetLogErrorTypeStr      GetLogErrorType = "str"
)

type GetLogError struct {
	MapOfAny map[string]any `queryParam:"inline"`
	Str      *string        `queryParam:"inline"`

	Type GetLogErrorType
}

func CreateGetLogErrorMapOfAny(mapOfAny map[string]any) GetLogError {
	typ := GetLogErrorTypeMapOfAny

	return GetLogError{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateGetLogErrorStr(str string) GetLogError {
	typ := GetLogErrorTypeStr

	return GetLogError{
		Str:  &str,
		Type: typ,
	}
}

func (u *GetLogError) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = GetLogErrorTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetLogErrorTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetLogError", string(data))
}

func (u GetLogError) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type GetLogError: all fields are null")
}

type GetLogPayload struct {
	Key           string         `json:"key"`
	Result        GetLogResult   `json:"result"`
	Error         *GetLogError   `json:"error,omitempty"`
	IP            *string        `json:"ip,omitempty"`
	UserAgent     *string        `json:"userAgent,omitempty"`
	UserID        *string        `json:"userId,omitempty"`
	ApplicationID *string        `json:"applicationId,omitempty"`
	SessionID     *string        `json:"sessionId,omitempty"`
	Params        map[string]any `json:"params,omitempty"`
}

func (o *GetLogPayload) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetLogPayload) GetResult() GetLogResult {
	if o == nil {
		return GetLogResult("")
	}
	return o.Result
}

func (o *GetLogPayload) GetError() *GetLogError {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *GetLogPayload) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *GetLogPayload) GetUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.UserAgent
}

func (o *GetLogPayload) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetLogPayload) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *GetLogPayload) GetSessionID() *string {
	if o == nil {
		return nil
	}
	return o.SessionID
}

func (o *GetLogPayload) GetParams() map[string]any {
	if o == nil {
		return nil
	}
	return o.Params
}

// GetLogResponseBody - Log details.
type GetLogResponseBody struct {
	TenantID  string        `json:"tenantId"`
	ID        string        `json:"id"`
	Key       string        `json:"key"`
	Payload   GetLogPayload `json:"payload"`
	CreatedAt float64       `json:"createdAt"`
}

func (o *GetLogResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *GetLogResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetLogResponseBody) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetLogResponseBody) GetPayload() GetLogPayload {
	if o == nil {
		return GetLogPayload{}
	}
	return o.Payload
}

func (o *GetLogResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type GetLogResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Log details.
	Object *GetLogResponseBody
}

func (o *GetLogResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetLogResponse) GetObject() *GetLogResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
