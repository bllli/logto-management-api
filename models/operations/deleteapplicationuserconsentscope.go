// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type ScopeType string

const (
	ScopeTypeOrganizationScopes         ScopeType = "organization-scopes"
	ScopeTypeResourceScopes             ScopeType = "resource-scopes"
	ScopeTypeOrganizationResourceScopes ScopeType = "organization-resource-scopes"
	ScopeTypeUserScopes                 ScopeType = "user-scopes"
)

func (e ScopeType) ToPointer() *ScopeType {
	return &e
}
func (e *ScopeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization-scopes":
		fallthrough
	case "resource-scopes":
		fallthrough
	case "organization-resource-scopes":
		fallthrough
	case "user-scopes":
		*e = ScopeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScopeType: %v", v)
	}
}

type DeleteApplicationUserConsentScopeRequest struct {
	// The unique identifier of the application.
	ApplicationID string    `pathParam:"style=simple,explode=false,name=applicationId"`
	ScopeType     ScopeType `pathParam:"style=simple,explode=false,name=scopeType"`
	// The unique identifier of the scope.
	ScopeID string `pathParam:"style=simple,explode=false,name=scopeId"`
}

func (o *DeleteApplicationUserConsentScopeRequest) GetApplicationID() string {
	if o == nil {
		return ""
	}
	return o.ApplicationID
}

func (o *DeleteApplicationUserConsentScopeRequest) GetScopeType() ScopeType {
	if o == nil {
		return ScopeType("")
	}
	return o.ScopeType
}

func (o *DeleteApplicationUserConsentScopeRequest) GetScopeID() string {
	if o == nil {
		return ""
	}
	return o.ScopeID
}

type DeleteApplicationUserConsentScopeResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *DeleteApplicationUserConsentScopeResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
