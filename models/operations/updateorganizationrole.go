// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type UpdateOrganizationRoleTypeRequest string

const (
	UpdateOrganizationRoleTypeRequestUser             UpdateOrganizationRoleTypeRequest = "User"
	UpdateOrganizationRoleTypeRequestMachineToMachine UpdateOrganizationRoleTypeRequest = "MachineToMachine"
)

func (e UpdateOrganizationRoleTypeRequest) ToPointer() *UpdateOrganizationRoleTypeRequest {
	return &e
}
func (e *UpdateOrganizationRoleTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "MachineToMachine":
		*e = UpdateOrganizationRoleTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationRoleTypeRequest: %v", v)
	}
}

type UpdateOrganizationRoleRequestBody struct {
	TenantID *string `json:"tenantId,omitempty"`
	ID       *string `json:"id,omitempty"`
	// The updated name of the organization role. It must be unique within the organization template.
	Name *string `json:"name,omitempty"`
	// The updated description of the organization role.
	Description *string                            `json:"description,omitempty"`
	Type        *UpdateOrganizationRoleTypeRequest `json:"type,omitempty"`
}

func (o *UpdateOrganizationRoleRequestBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *UpdateOrganizationRoleRequestBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateOrganizationRoleRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateOrganizationRoleRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateOrganizationRoleRequestBody) GetType() *UpdateOrganizationRoleTypeRequest {
	if o == nil {
		return nil
	}
	return o.Type
}

type UpdateOrganizationRoleRequest struct {
	// The unique identifier of the organization role.
	ID          string                            `pathParam:"style=simple,explode=false,name=id"`
	RequestBody UpdateOrganizationRoleRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateOrganizationRoleRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateOrganizationRoleRequest) GetRequestBody() UpdateOrganizationRoleRequestBody {
	if o == nil {
		return UpdateOrganizationRoleRequestBody{}
	}
	return o.RequestBody
}

type UpdateOrganizationRoleTypeResponse string

const (
	UpdateOrganizationRoleTypeResponseUser             UpdateOrganizationRoleTypeResponse = "User"
	UpdateOrganizationRoleTypeResponseMachineToMachine UpdateOrganizationRoleTypeResponse = "MachineToMachine"
)

func (e UpdateOrganizationRoleTypeResponse) ToPointer() *UpdateOrganizationRoleTypeResponse {
	return &e
}
func (e *UpdateOrganizationRoleTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "MachineToMachine":
		*e = UpdateOrganizationRoleTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationRoleTypeResponse: %v", v)
	}
}

// UpdateOrganizationRoleResponseBody - The organization role was updated successfully.
type UpdateOrganizationRoleResponseBody struct {
	TenantID    string                             `json:"tenantId"`
	ID          string                             `json:"id"`
	Name        string                             `json:"name"`
	Description *string                            `json:"description"`
	Type        UpdateOrganizationRoleTypeResponse `json:"type"`
}

func (o *UpdateOrganizationRoleResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpdateOrganizationRoleResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateOrganizationRoleResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateOrganizationRoleResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateOrganizationRoleResponseBody) GetType() UpdateOrganizationRoleTypeResponse {
	if o == nil {
		return UpdateOrganizationRoleTypeResponse("")
	}
	return o.Type
}

type UpdateOrganizationRoleResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The organization role was updated successfully.
	Object *UpdateOrganizationRoleResponseBody
}

func (o *UpdateOrganizationRoleResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateOrganizationRoleResponse) GetObject() *UpdateOrganizationRoleResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
