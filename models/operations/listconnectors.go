// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListConnectorsRequest struct {
	// Filter connectors by target.
	Target *string `queryParam:"style=form,explode=true,name=target"`
}

func (o *ListConnectorsRequest) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

// ListConnectorsConfig - arbitrary
type ListConnectorsConfig struct {
}

// ListConnectorsMetadataName - Validator function
type ListConnectorsMetadataName struct {
}

type ListConnectorsMetadata struct {
	Target *string `json:"target,omitempty"`
	// Validator function
	Name     *ListConnectorsMetadataName `json:"name,omitempty"`
	Logo     *string                     `json:"logo,omitempty"`
	LogoDark *string                     `json:"logoDark,omitempty"`
}

func (o *ListConnectorsMetadata) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *ListConnectorsMetadata) GetName() *ListConnectorsMetadataName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListConnectorsMetadata) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *ListConnectorsMetadata) GetLogoDark() *string {
	if o == nil {
		return nil
	}
	return o.LogoDark
}

// ListConnectorsName - Validator function
type ListConnectorsName struct {
}

// ListConnectorsDescription - Validator function
type ListConnectorsDescription struct {
}

type ListConnectorsFormItemType string

const (
	ListConnectorsFormItemTypeText          ListConnectorsFormItemType = "Text"
	ListConnectorsFormItemTypeNumber        ListConnectorsFormItemType = "Number"
	ListConnectorsFormItemTypeMultilineText ListConnectorsFormItemType = "MultilineText"
	ListConnectorsFormItemTypeSwitch        ListConnectorsFormItemType = "Switch"
	ListConnectorsFormItemTypeJSON          ListConnectorsFormItemType = "Json"
)

func (e ListConnectorsFormItemType) ToPointer() *ListConnectorsFormItemType {
	return &e
}
func (e *ListConnectorsFormItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Text":
		fallthrough
	case "Number":
		fallthrough
	case "MultilineText":
		fallthrough
	case "Switch":
		fallthrough
	case "Json":
		*e = ListConnectorsFormItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListConnectorsFormItemType: %v", v)
	}
}

type ListConnectorsShowCondition3 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *ListConnectorsShowCondition3) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *ListConnectorsShowCondition3) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type ListConnectorsFormItem3 struct {
	Type           ListConnectorsFormItemType     `json:"type"`
	Key            string                         `json:"key"`
	Label          string                         `json:"label"`
	Placeholder    *string                        `json:"placeholder,omitempty"`
	Required       *bool                          `json:"required,omitempty"`
	DefaultValue   any                            `json:"defaultValue,omitempty"`
	ShowConditions []ListConnectorsShowCondition3 `json:"showConditions,omitempty"`
	Description    *string                        `json:"description,omitempty"`
	Tooltip        *string                        `json:"tooltip,omitempty"`
	IsConfidential *bool                          `json:"isConfidential,omitempty"`
}

func (o *ListConnectorsFormItem3) GetType() ListConnectorsFormItemType {
	if o == nil {
		return ListConnectorsFormItemType("")
	}
	return o.Type
}

func (o *ListConnectorsFormItem3) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListConnectorsFormItem3) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *ListConnectorsFormItem3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *ListConnectorsFormItem3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *ListConnectorsFormItem3) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *ListConnectorsFormItem3) GetShowConditions() []ListConnectorsShowCondition3 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *ListConnectorsFormItem3) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListConnectorsFormItem3) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *ListConnectorsFormItem3) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type ListConnectorsSelectItem2 struct {
	Value string `json:"value"`
}

func (o *ListConnectorsSelectItem2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListConnectorsShowCondition2 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *ListConnectorsShowCondition2) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *ListConnectorsShowCondition2) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type ListConnectorsFormItem2 struct {
	Type           string                         `json:"type"`
	SelectItems    []ListConnectorsSelectItem2    `json:"selectItems"`
	Key            string                         `json:"key"`
	Label          string                         `json:"label"`
	Placeholder    *string                        `json:"placeholder,omitempty"`
	Required       *bool                          `json:"required,omitempty"`
	DefaultValue   any                            `json:"defaultValue,omitempty"`
	ShowConditions []ListConnectorsShowCondition2 `json:"showConditions,omitempty"`
	Description    *string                        `json:"description,omitempty"`
	Tooltip        *string                        `json:"tooltip,omitempty"`
	IsConfidential *bool                          `json:"isConfidential,omitempty"`
}

func (o *ListConnectorsFormItem2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ListConnectorsFormItem2) GetSelectItems() []ListConnectorsSelectItem2 {
	if o == nil {
		return []ListConnectorsSelectItem2{}
	}
	return o.SelectItems
}

func (o *ListConnectorsFormItem2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListConnectorsFormItem2) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *ListConnectorsFormItem2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *ListConnectorsFormItem2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *ListConnectorsFormItem2) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *ListConnectorsFormItem2) GetShowConditions() []ListConnectorsShowCondition2 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *ListConnectorsFormItem2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListConnectorsFormItem2) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *ListConnectorsFormItem2) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type ListConnectorsSelectItem1 struct {
	Value string `json:"value"`
	Title string `json:"title"`
}

func (o *ListConnectorsSelectItem1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *ListConnectorsSelectItem1) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type ListConnectorsShowCondition1 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *ListConnectorsShowCondition1) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *ListConnectorsShowCondition1) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type ListConnectorsFormItem1 struct {
	Type           string                         `json:"type"`
	SelectItems    []ListConnectorsSelectItem1    `json:"selectItems"`
	Key            string                         `json:"key"`
	Label          string                         `json:"label"`
	Placeholder    *string                        `json:"placeholder,omitempty"`
	Required       *bool                          `json:"required,omitempty"`
	DefaultValue   any                            `json:"defaultValue,omitempty"`
	ShowConditions []ListConnectorsShowCondition1 `json:"showConditions,omitempty"`
	Description    *string                        `json:"description,omitempty"`
	Tooltip        *string                        `json:"tooltip,omitempty"`
	IsConfidential *bool                          `json:"isConfidential,omitempty"`
}

func (o *ListConnectorsFormItem1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ListConnectorsFormItem1) GetSelectItems() []ListConnectorsSelectItem1 {
	if o == nil {
		return []ListConnectorsSelectItem1{}
	}
	return o.SelectItems
}

func (o *ListConnectorsFormItem1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListConnectorsFormItem1) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *ListConnectorsFormItem1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *ListConnectorsFormItem1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *ListConnectorsFormItem1) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *ListConnectorsFormItem1) GetShowConditions() []ListConnectorsShowCondition1 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *ListConnectorsFormItem1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListConnectorsFormItem1) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *ListConnectorsFormItem1) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type ListConnectorsFormItemUnionType string

const (
	ListConnectorsFormItemUnionTypeListConnectorsFormItem1 ListConnectorsFormItemUnionType = "ListConnectors_formItem_1"
	ListConnectorsFormItemUnionTypeListConnectorsFormItem2 ListConnectorsFormItemUnionType = "ListConnectors_formItem_2"
	ListConnectorsFormItemUnionTypeListConnectorsFormItem3 ListConnectorsFormItemUnionType = "ListConnectors_formItem_3"
)

type ListConnectorsFormItemUnion struct {
	ListConnectorsFormItem1 *ListConnectorsFormItem1 `queryParam:"inline"`
	ListConnectorsFormItem2 *ListConnectorsFormItem2 `queryParam:"inline"`
	ListConnectorsFormItem3 *ListConnectorsFormItem3 `queryParam:"inline"`

	Type ListConnectorsFormItemUnionType
}

func CreateListConnectorsFormItemUnionListConnectorsFormItem1(listConnectorsFormItem1 ListConnectorsFormItem1) ListConnectorsFormItemUnion {
	typ := ListConnectorsFormItemUnionTypeListConnectorsFormItem1

	return ListConnectorsFormItemUnion{
		ListConnectorsFormItem1: &listConnectorsFormItem1,
		Type:                    typ,
	}
}

func CreateListConnectorsFormItemUnionListConnectorsFormItem2(listConnectorsFormItem2 ListConnectorsFormItem2) ListConnectorsFormItemUnion {
	typ := ListConnectorsFormItemUnionTypeListConnectorsFormItem2

	return ListConnectorsFormItemUnion{
		ListConnectorsFormItem2: &listConnectorsFormItem2,
		Type:                    typ,
	}
}

func CreateListConnectorsFormItemUnionListConnectorsFormItem3(listConnectorsFormItem3 ListConnectorsFormItem3) ListConnectorsFormItemUnion {
	typ := ListConnectorsFormItemUnionTypeListConnectorsFormItem3

	return ListConnectorsFormItemUnion{
		ListConnectorsFormItem3: &listConnectorsFormItem3,
		Type:                    typ,
	}
}

func (u *ListConnectorsFormItemUnion) UnmarshalJSON(data []byte) error {

	var listConnectorsFormItem3 ListConnectorsFormItem3 = ListConnectorsFormItem3{}
	if err := utils.UnmarshalJSON(data, &listConnectorsFormItem3, "", true, true); err == nil {
		u.ListConnectorsFormItem3 = &listConnectorsFormItem3
		u.Type = ListConnectorsFormItemUnionTypeListConnectorsFormItem3
		return nil
	}

	var listConnectorsFormItem1 ListConnectorsFormItem1 = ListConnectorsFormItem1{}
	if err := utils.UnmarshalJSON(data, &listConnectorsFormItem1, "", true, true); err == nil {
		u.ListConnectorsFormItem1 = &listConnectorsFormItem1
		u.Type = ListConnectorsFormItemUnionTypeListConnectorsFormItem1
		return nil
	}

	var listConnectorsFormItem2 ListConnectorsFormItem2 = ListConnectorsFormItem2{}
	if err := utils.UnmarshalJSON(data, &listConnectorsFormItem2, "", true, true); err == nil {
		u.ListConnectorsFormItem2 = &listConnectorsFormItem2
		u.Type = ListConnectorsFormItemUnionTypeListConnectorsFormItem2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListConnectorsFormItemUnion", string(data))
}

func (u ListConnectorsFormItemUnion) MarshalJSON() ([]byte, error) {
	if u.ListConnectorsFormItem1 != nil {
		return utils.MarshalJSON(u.ListConnectorsFormItem1, "", true)
	}

	if u.ListConnectorsFormItem2 != nil {
		return utils.MarshalJSON(u.ListConnectorsFormItem2, "", true)
	}

	if u.ListConnectorsFormItem3 != nil {
		return utils.MarshalJSON(u.ListConnectorsFormItem3, "", true)
	}

	return nil, errors.New("could not marshal union type ListConnectorsFormItemUnion: all fields are null")
}

type ListConnectorsPlatform string

const (
	ListConnectorsPlatformNative    ListConnectorsPlatform = "Native"
	ListConnectorsPlatformUniversal ListConnectorsPlatform = "Universal"
	ListConnectorsPlatformWeb       ListConnectorsPlatform = "Web"
)

func (e ListConnectorsPlatform) ToPointer() *ListConnectorsPlatform {
	return &e
}
func (e *ListConnectorsPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "Universal":
		fallthrough
	case "Web":
		*e = ListConnectorsPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListConnectorsPlatform: %v", v)
	}
}

type ListConnectorsType string

const (
	ListConnectorsTypeEmail  ListConnectorsType = "Email"
	ListConnectorsTypeSms    ListConnectorsType = "Sms"
	ListConnectorsTypeSocial ListConnectorsType = "Social"
)

func (e ListConnectorsType) ToPointer() *ListConnectorsType {
	return &e
}
func (e *ListConnectorsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Email":
		fallthrough
	case "Sms":
		fallthrough
	case "Social":
		*e = ListConnectorsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListConnectorsType: %v", v)
	}
}

type ListConnectorsResponseBody struct {
	ID          string `json:"id"`
	SyncProfile bool   `json:"syncProfile"`
	// arbitrary
	Config      ListConnectorsConfig   `json:"config"`
	Metadata    ListConnectorsMetadata `json:"metadata"`
	ConnectorID string                 `json:"connectorId"`
	Target      string                 `json:"target"`
	// Validator function
	Name ListConnectorsName `json:"name"`
	// Validator function
	Description    ListConnectorsDescription     `json:"description"`
	Logo           string                        `json:"logo"`
	LogoDark       *string                       `json:"logoDark"`
	Readme         string                        `json:"readme"`
	ConfigTemplate *string                       `json:"configTemplate,omitempty"`
	FormItems      []ListConnectorsFormItemUnion `json:"formItems,omitempty"`
	CustomData     map[string]any                `json:"customData,omitempty"`
	FromEmail      *string                       `json:"fromEmail,omitempty"`
	Platform       *ListConnectorsPlatform       `json:"platform"`
	IsStandard     *bool                         `json:"isStandard,omitempty"`
	Type           ListConnectorsType            `json:"type"`
	IsDemo         *bool                         `json:"isDemo,omitempty"`
	ExtraInfo      map[string]any                `json:"extraInfo,omitempty"`
	Usage          *float64                      `json:"usage,omitempty"`
}

func (o *ListConnectorsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListConnectorsResponseBody) GetSyncProfile() bool {
	if o == nil {
		return false
	}
	return o.SyncProfile
}

func (o *ListConnectorsResponseBody) GetConfig() ListConnectorsConfig {
	if o == nil {
		return ListConnectorsConfig{}
	}
	return o.Config
}

func (o *ListConnectorsResponseBody) GetMetadata() ListConnectorsMetadata {
	if o == nil {
		return ListConnectorsMetadata{}
	}
	return o.Metadata
}

func (o *ListConnectorsResponseBody) GetConnectorID() string {
	if o == nil {
		return ""
	}
	return o.ConnectorID
}

func (o *ListConnectorsResponseBody) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *ListConnectorsResponseBody) GetName() ListConnectorsName {
	if o == nil {
		return ListConnectorsName{}
	}
	return o.Name
}

func (o *ListConnectorsResponseBody) GetDescription() ListConnectorsDescription {
	if o == nil {
		return ListConnectorsDescription{}
	}
	return o.Description
}

func (o *ListConnectorsResponseBody) GetLogo() string {
	if o == nil {
		return ""
	}
	return o.Logo
}

func (o *ListConnectorsResponseBody) GetLogoDark() *string {
	if o == nil {
		return nil
	}
	return o.LogoDark
}

func (o *ListConnectorsResponseBody) GetReadme() string {
	if o == nil {
		return ""
	}
	return o.Readme
}

func (o *ListConnectorsResponseBody) GetConfigTemplate() *string {
	if o == nil {
		return nil
	}
	return o.ConfigTemplate
}

func (o *ListConnectorsResponseBody) GetFormItems() []ListConnectorsFormItemUnion {
	if o == nil {
		return nil
	}
	return o.FormItems
}

func (o *ListConnectorsResponseBody) GetCustomData() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *ListConnectorsResponseBody) GetFromEmail() *string {
	if o == nil {
		return nil
	}
	return o.FromEmail
}

func (o *ListConnectorsResponseBody) GetPlatform() *ListConnectorsPlatform {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *ListConnectorsResponseBody) GetIsStandard() *bool {
	if o == nil {
		return nil
	}
	return o.IsStandard
}

func (o *ListConnectorsResponseBody) GetType() ListConnectorsType {
	if o == nil {
		return ListConnectorsType("")
	}
	return o.Type
}

func (o *ListConnectorsResponseBody) GetIsDemo() *bool {
	if o == nil {
		return nil
	}
	return o.IsDemo
}

func (o *ListConnectorsResponseBody) GetExtraInfo() map[string]any {
	if o == nil {
		return nil
	}
	return o.ExtraInfo
}

func (o *ListConnectorsResponseBody) GetUsage() *float64 {
	if o == nil {
		return nil
	}
	return o.Usage
}

type ListConnectorsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// An array of connectors.
	ResponseBodies []ListConnectorsResponseBody
}

func (o *ListConnectorsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListConnectorsResponse) GetResponseBodies() []ListConnectorsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
