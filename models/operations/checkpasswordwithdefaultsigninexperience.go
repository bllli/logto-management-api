// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type CheckPasswordWithDefaultSignInExperienceRequest struct {
	// The password to check.
	Password string `json:"password"`
	// The user ID to check the password for. It is required if rejects user info is enabled in the password policy.
	UserID *string `json:"userId,omitempty"`
}

func (o *CheckPasswordWithDefaultSignInExperienceRequest) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *CheckPasswordWithDefaultSignInExperienceRequest) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type Issue struct {
	Code          string         `json:"code"`
	Interpolation map[string]any `json:"interpolation,omitempty"`
}

func (o *Issue) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *Issue) GetInterpolation() map[string]any {
	if o == nil {
		return nil
	}
	return o.Interpolation
}

type CheckPasswordWithDefaultSignInExperienceResponseBody2 struct {
	Result bool    `json:"result"`
	Issues []Issue `json:"issues"`
}

func (o *CheckPasswordWithDefaultSignInExperienceResponseBody2) GetResult() bool {
	if o == nil {
		return false
	}
	return o.Result
}

func (o *CheckPasswordWithDefaultSignInExperienceResponseBody2) GetIssues() []Issue {
	if o == nil {
		return []Issue{}
	}
	return o.Issues
}

type CheckPasswordWithDefaultSignInExperienceResponseBody1 struct {
	Result bool `json:"result"`
}

func (o *CheckPasswordWithDefaultSignInExperienceResponseBody1) GetResult() bool {
	if o == nil {
		return false
	}
	return o.Result
}

type CheckPasswordWithDefaultSignInExperienceResponseBodyType string

const (
	CheckPasswordWithDefaultSignInExperienceResponseBodyTypeCheckPasswordWithDefaultSignInExperienceResponseBody1 CheckPasswordWithDefaultSignInExperienceResponseBodyType = "CheckPasswordWithDefaultSignInExperience_ResponseBody_1"
	CheckPasswordWithDefaultSignInExperienceResponseBodyTypeCheckPasswordWithDefaultSignInExperienceResponseBody2 CheckPasswordWithDefaultSignInExperienceResponseBodyType = "CheckPasswordWithDefaultSignInExperience_ResponseBody_2"
)

// CheckPasswordWithDefaultSignInExperienceResponseBody - The password meets the password policy.
type CheckPasswordWithDefaultSignInExperienceResponseBody struct {
	CheckPasswordWithDefaultSignInExperienceResponseBody1 *CheckPasswordWithDefaultSignInExperienceResponseBody1 `queryParam:"inline"`
	CheckPasswordWithDefaultSignInExperienceResponseBody2 *CheckPasswordWithDefaultSignInExperienceResponseBody2 `queryParam:"inline"`

	Type CheckPasswordWithDefaultSignInExperienceResponseBodyType
}

func CreateCheckPasswordWithDefaultSignInExperienceResponseBodyCheckPasswordWithDefaultSignInExperienceResponseBody1(checkPasswordWithDefaultSignInExperienceResponseBody1 CheckPasswordWithDefaultSignInExperienceResponseBody1) CheckPasswordWithDefaultSignInExperienceResponseBody {
	typ := CheckPasswordWithDefaultSignInExperienceResponseBodyTypeCheckPasswordWithDefaultSignInExperienceResponseBody1

	return CheckPasswordWithDefaultSignInExperienceResponseBody{
		CheckPasswordWithDefaultSignInExperienceResponseBody1: &checkPasswordWithDefaultSignInExperienceResponseBody1,
		Type: typ,
	}
}

func CreateCheckPasswordWithDefaultSignInExperienceResponseBodyCheckPasswordWithDefaultSignInExperienceResponseBody2(checkPasswordWithDefaultSignInExperienceResponseBody2 CheckPasswordWithDefaultSignInExperienceResponseBody2) CheckPasswordWithDefaultSignInExperienceResponseBody {
	typ := CheckPasswordWithDefaultSignInExperienceResponseBodyTypeCheckPasswordWithDefaultSignInExperienceResponseBody2

	return CheckPasswordWithDefaultSignInExperienceResponseBody{
		CheckPasswordWithDefaultSignInExperienceResponseBody2: &checkPasswordWithDefaultSignInExperienceResponseBody2,
		Type: typ,
	}
}

func (u *CheckPasswordWithDefaultSignInExperienceResponseBody) UnmarshalJSON(data []byte) error {

	var checkPasswordWithDefaultSignInExperienceResponseBody1 CheckPasswordWithDefaultSignInExperienceResponseBody1 = CheckPasswordWithDefaultSignInExperienceResponseBody1{}
	if err := utils.UnmarshalJSON(data, &checkPasswordWithDefaultSignInExperienceResponseBody1, "", true, true); err == nil {
		u.CheckPasswordWithDefaultSignInExperienceResponseBody1 = &checkPasswordWithDefaultSignInExperienceResponseBody1
		u.Type = CheckPasswordWithDefaultSignInExperienceResponseBodyTypeCheckPasswordWithDefaultSignInExperienceResponseBody1
		return nil
	}

	var checkPasswordWithDefaultSignInExperienceResponseBody2 CheckPasswordWithDefaultSignInExperienceResponseBody2 = CheckPasswordWithDefaultSignInExperienceResponseBody2{}
	if err := utils.UnmarshalJSON(data, &checkPasswordWithDefaultSignInExperienceResponseBody2, "", true, true); err == nil {
		u.CheckPasswordWithDefaultSignInExperienceResponseBody2 = &checkPasswordWithDefaultSignInExperienceResponseBody2
		u.Type = CheckPasswordWithDefaultSignInExperienceResponseBodyTypeCheckPasswordWithDefaultSignInExperienceResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CheckPasswordWithDefaultSignInExperienceResponseBody", string(data))
}

func (u CheckPasswordWithDefaultSignInExperienceResponseBody) MarshalJSON() ([]byte, error) {
	if u.CheckPasswordWithDefaultSignInExperienceResponseBody1 != nil {
		return utils.MarshalJSON(u.CheckPasswordWithDefaultSignInExperienceResponseBody1, "", true)
	}

	if u.CheckPasswordWithDefaultSignInExperienceResponseBody2 != nil {
		return utils.MarshalJSON(u.CheckPasswordWithDefaultSignInExperienceResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type CheckPasswordWithDefaultSignInExperienceResponseBody: all fields are null")
}

type CheckPasswordWithDefaultSignInExperienceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The password meets the password policy.
	OneOf *CheckPasswordWithDefaultSignInExperienceResponseBody
}

func (o *CheckPasswordWithDefaultSignInExperienceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CheckPasswordWithDefaultSignInExperienceResponse) GetOneOf() *CheckPasswordWithDefaultSignInExperienceResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
