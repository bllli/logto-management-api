// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachment string

const (
	VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachmentCrossPlatform VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachment = "cross-platform"
	VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachmentPlatform      VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachment = "platform"
)

func (e VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachment) ToPointer() *VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachment {
	return &e
}
func (e *VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cross-platform":
		fallthrough
	case "platform":
		*e = VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachment: %v", v)
	}
}

type VerifyWebAuthnAuthenticationVerificationCrepProps struct {
	Rk *bool `json:"rk,omitempty"`
}

func (o *VerifyWebAuthnAuthenticationVerificationCrepProps) GetRk() *bool {
	if o == nil {
		return nil
	}
	return o.Rk
}

type VerifyWebAuthnAuthenticationVerificationClientExtensionResults struct {
	Appid            *bool                                              `json:"appid,omitempty"`
	CrepProps        *VerifyWebAuthnAuthenticationVerificationCrepProps `json:"crepProps,omitempty"`
	HmacCreateSecret *bool                                              `json:"hmacCreateSecret,omitempty"`
}

func (o *VerifyWebAuthnAuthenticationVerificationClientExtensionResults) GetAppid() *bool {
	if o == nil {
		return nil
	}
	return o.Appid
}

func (o *VerifyWebAuthnAuthenticationVerificationClientExtensionResults) GetCrepProps() *VerifyWebAuthnAuthenticationVerificationCrepProps {
	if o == nil {
		return nil
	}
	return o.CrepProps
}

func (o *VerifyWebAuthnAuthenticationVerificationClientExtensionResults) GetHmacCreateSecret() *bool {
	if o == nil {
		return nil
	}
	return o.HmacCreateSecret
}

type ExperienceVerifyWebAuthnAuthenticationVerificationResponse struct {
	ClientDataJSON    string  `json:"clientDataJSON"`
	AuthenticatorData string  `json:"authenticatorData"`
	Signature         string  `json:"signature"`
	UserHandle        *string `json:"userHandle,omitempty"`
}

func (o *ExperienceVerifyWebAuthnAuthenticationVerificationResponse) GetClientDataJSON() string {
	if o == nil {
		return ""
	}
	return o.ClientDataJSON
}

func (o *ExperienceVerifyWebAuthnAuthenticationVerificationResponse) GetAuthenticatorData() string {
	if o == nil {
		return ""
	}
	return o.AuthenticatorData
}

func (o *ExperienceVerifyWebAuthnAuthenticationVerificationResponse) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *ExperienceVerifyWebAuthnAuthenticationVerificationResponse) GetUserHandle() *string {
	if o == nil {
		return nil
	}
	return o.UserHandle
}

// VerifyWebAuthnAuthenticationVerificationPayload - The WebAuthn assertion response from the user's WebAuthn credential.
type VerifyWebAuthnAuthenticationVerificationPayload struct {
	Type                    string                                                           `json:"type"`
	ID                      string                                                           `json:"id"`
	RawID                   string                                                           `json:"rawId"`
	AuthenticatorAttachment *VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
	ClientExtensionResults  VerifyWebAuthnAuthenticationVerificationClientExtensionResults   `json:"clientExtensionResults"`
	Response                ExperienceVerifyWebAuthnAuthenticationVerificationResponse       `json:"response"`
}

func (o *VerifyWebAuthnAuthenticationVerificationPayload) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *VerifyWebAuthnAuthenticationVerificationPayload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *VerifyWebAuthnAuthenticationVerificationPayload) GetRawID() string {
	if o == nil {
		return ""
	}
	return o.RawID
}

func (o *VerifyWebAuthnAuthenticationVerificationPayload) GetAuthenticatorAttachment() *VerifyWebAuthnAuthenticationVerificationAuthenticatorAttachment {
	if o == nil {
		return nil
	}
	return o.AuthenticatorAttachment
}

func (o *VerifyWebAuthnAuthenticationVerificationPayload) GetClientExtensionResults() VerifyWebAuthnAuthenticationVerificationClientExtensionResults {
	if o == nil {
		return VerifyWebAuthnAuthenticationVerificationClientExtensionResults{}
	}
	return o.ClientExtensionResults
}

func (o *VerifyWebAuthnAuthenticationVerificationPayload) GetResponse() ExperienceVerifyWebAuthnAuthenticationVerificationResponse {
	if o == nil {
		return ExperienceVerifyWebAuthnAuthenticationVerificationResponse{}
	}
	return o.Response
}

type VerifyWebAuthnAuthenticationVerificationRequest struct {
	// The verification ID of the WebAuthn authentication verification record.
	VerificationID string `json:"verificationId"`
	// The WebAuthn assertion response from the user's WebAuthn credential.
	Payload VerifyWebAuthnAuthenticationVerificationPayload `json:"payload"`
}

func (o *VerifyWebAuthnAuthenticationVerificationRequest) GetVerificationID() string {
	if o == nil {
		return ""
	}
	return o.VerificationID
}

func (o *VerifyWebAuthnAuthenticationVerificationRequest) GetPayload() VerifyWebAuthnAuthenticationVerificationPayload {
	if o == nil {
		return VerifyWebAuthnAuthenticationVerificationPayload{}
	}
	return o.Payload
}

// VerifyWebAuthnAuthenticationVerificationResponseBody - The WebAuthn authentication has been successfully verified.
type VerifyWebAuthnAuthenticationVerificationResponseBody struct {
	// The unique verification ID of the WebAuthn authentication verification record.
	VerificationID string `json:"verificationId"`
}

func (o *VerifyWebAuthnAuthenticationVerificationResponseBody) GetVerificationID() string {
	if o == nil {
		return ""
	}
	return o.VerificationID
}

type VerifyWebAuthnAuthenticationVerificationResponseResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The WebAuthn authentication has been successfully verified.
	Object *VerifyWebAuthnAuthenticationVerificationResponseBody
}

func (o *VerifyWebAuthnAuthenticationVerificationResponseResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *VerifyWebAuthnAuthenticationVerificationResponseResponse) GetObject() *VerifyWebAuthnAuthenticationVerificationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
