// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type AddUserProfileRequestBody5 struct {
	// The type of profile data to add. `email`, `phone`, `username`, `password`, etc.
	Type any `json:"type"`
	// The ID of the verification record used to verify the profile data. Required for profile data types that require verification, such as `email`, `phone` and `social`.
	VerificationID any `json:"verificationId"`
	// The plain text value of the profile data. Only supported for profile data types that does not require verification, such as `username` and `password`.
	Value any `json:"value,omitempty"`
}

func (o *AddUserProfileRequestBody5) GetType() any {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AddUserProfileRequestBody5) GetVerificationID() any {
	if o == nil {
		return nil
	}
	return o.VerificationID
}

func (o *AddUserProfileRequestBody5) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type AddUserProfileRequestBody4 struct {
	// The type of profile data to add. `email`, `phone`, `username`, `password`, etc.
	Type any `json:"type"`
	// The ID of the verification record used to verify the profile data. Required for profile data types that require verification, such as `email`, `phone` and `social`.
	VerificationID any `json:"verificationId"`
	// The plain text value of the profile data. Only supported for profile data types that does not require verification, such as `username` and `password`.
	Value any `json:"value,omitempty"`
}

func (o *AddUserProfileRequestBody4) GetType() any {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AddUserProfileRequestBody4) GetVerificationID() any {
	if o == nil {
		return nil
	}
	return o.VerificationID
}

func (o *AddUserProfileRequestBody4) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type AddUserProfileRequestBody3 struct {
	// The type of profile data to add. `email`, `phone`, `username`, `password`, etc.
	Type any `json:"type"`
	// The ID of the verification record used to verify the profile data. Required for profile data types that require verification, such as `email`, `phone` and `social`.
	VerificationID any `json:"verificationId"`
	// The plain text value of the profile data. Only supported for profile data types that does not require verification, such as `username` and `password`.
	Value any `json:"value,omitempty"`
}

func (o *AddUserProfileRequestBody3) GetType() any {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AddUserProfileRequestBody3) GetVerificationID() any {
	if o == nil {
		return nil
	}
	return o.VerificationID
}

func (o *AddUserProfileRequestBody3) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type AddUserProfileRequestBody2 struct {
	// The type of profile data to add. `email`, `phone`, `username`, `password`, etc.
	Type any `json:"type"`
	// The plain text value of the profile data. Only supported for profile data types that does not require verification, such as `username` and `password`.
	Value any `json:"value"`
	// The ID of the verification record used to verify the profile data. Required for profile data types that require verification, such as `email`, `phone` and `social`.
	VerificationID any `json:"verificationId,omitempty"`
}

func (o *AddUserProfileRequestBody2) GetType() any {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AddUserProfileRequestBody2) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *AddUserProfileRequestBody2) GetVerificationID() any {
	if o == nil {
		return nil
	}
	return o.VerificationID
}

type AddUserProfileRequestBody1 struct {
	// The type of profile data to add. `email`, `phone`, `username`, `password`, etc.
	Type any `json:"type"`
	// The plain text value of the profile data. Only supported for profile data types that does not require verification, such as `username` and `password`.
	Value any `json:"value"`
	// The ID of the verification record used to verify the profile data. Required for profile data types that require verification, such as `email`, `phone` and `social`.
	VerificationID any `json:"verificationId,omitempty"`
}

func (o *AddUserProfileRequestBody1) GetType() any {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AddUserProfileRequestBody1) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *AddUserProfileRequestBody1) GetVerificationID() any {
	if o == nil {
		return nil
	}
	return o.VerificationID
}

type AddUserProfileRequestType string

const (
	AddUserProfileRequestTypeAddUserProfileRequestBody1 AddUserProfileRequestType = "AddUserProfile_RequestBody_1"
	AddUserProfileRequestTypeAddUserProfileRequestBody2 AddUserProfileRequestType = "AddUserProfile_RequestBody_2"
	AddUserProfileRequestTypeAddUserProfileRequestBody3 AddUserProfileRequestType = "AddUserProfile_RequestBody_3"
	AddUserProfileRequestTypeAddUserProfileRequestBody4 AddUserProfileRequestType = "AddUserProfile_RequestBody_4"
	AddUserProfileRequestTypeAddUserProfileRequestBody5 AddUserProfileRequestType = "AddUserProfile_RequestBody_5"
)

type AddUserProfileRequest struct {
	AddUserProfileRequestBody1 *AddUserProfileRequestBody1 `queryParam:"inline"`
	AddUserProfileRequestBody2 *AddUserProfileRequestBody2 `queryParam:"inline"`
	AddUserProfileRequestBody3 *AddUserProfileRequestBody3 `queryParam:"inline"`
	AddUserProfileRequestBody4 *AddUserProfileRequestBody4 `queryParam:"inline"`
	AddUserProfileRequestBody5 *AddUserProfileRequestBody5 `queryParam:"inline"`

	Type AddUserProfileRequestType
}

func CreateAddUserProfileRequestAddUserProfileRequestBody1(addUserProfileRequestBody1 AddUserProfileRequestBody1) AddUserProfileRequest {
	typ := AddUserProfileRequestTypeAddUserProfileRequestBody1

	return AddUserProfileRequest{
		AddUserProfileRequestBody1: &addUserProfileRequestBody1,
		Type:                       typ,
	}
}

func CreateAddUserProfileRequestAddUserProfileRequestBody2(addUserProfileRequestBody2 AddUserProfileRequestBody2) AddUserProfileRequest {
	typ := AddUserProfileRequestTypeAddUserProfileRequestBody2

	return AddUserProfileRequest{
		AddUserProfileRequestBody2: &addUserProfileRequestBody2,
		Type:                       typ,
	}
}

func CreateAddUserProfileRequestAddUserProfileRequestBody3(addUserProfileRequestBody3 AddUserProfileRequestBody3) AddUserProfileRequest {
	typ := AddUserProfileRequestTypeAddUserProfileRequestBody3

	return AddUserProfileRequest{
		AddUserProfileRequestBody3: &addUserProfileRequestBody3,
		Type:                       typ,
	}
}

func CreateAddUserProfileRequestAddUserProfileRequestBody4(addUserProfileRequestBody4 AddUserProfileRequestBody4) AddUserProfileRequest {
	typ := AddUserProfileRequestTypeAddUserProfileRequestBody4

	return AddUserProfileRequest{
		AddUserProfileRequestBody4: &addUserProfileRequestBody4,
		Type:                       typ,
	}
}

func CreateAddUserProfileRequestAddUserProfileRequestBody5(addUserProfileRequestBody5 AddUserProfileRequestBody5) AddUserProfileRequest {
	typ := AddUserProfileRequestTypeAddUserProfileRequestBody5

	return AddUserProfileRequest{
		AddUserProfileRequestBody5: &addUserProfileRequestBody5,
		Type:                       typ,
	}
}

func (u *AddUserProfileRequest) UnmarshalJSON(data []byte) error {

	var addUserProfileRequestBody1 AddUserProfileRequestBody1 = AddUserProfileRequestBody1{}
	if err := utils.UnmarshalJSON(data, &addUserProfileRequestBody1, "", true, true); err == nil {
		u.AddUserProfileRequestBody1 = &addUserProfileRequestBody1
		u.Type = AddUserProfileRequestTypeAddUserProfileRequestBody1
		return nil
	}

	var addUserProfileRequestBody2 AddUserProfileRequestBody2 = AddUserProfileRequestBody2{}
	if err := utils.UnmarshalJSON(data, &addUserProfileRequestBody2, "", true, true); err == nil {
		u.AddUserProfileRequestBody2 = &addUserProfileRequestBody2
		u.Type = AddUserProfileRequestTypeAddUserProfileRequestBody2
		return nil
	}

	var addUserProfileRequestBody3 AddUserProfileRequestBody3 = AddUserProfileRequestBody3{}
	if err := utils.UnmarshalJSON(data, &addUserProfileRequestBody3, "", true, true); err == nil {
		u.AddUserProfileRequestBody3 = &addUserProfileRequestBody3
		u.Type = AddUserProfileRequestTypeAddUserProfileRequestBody3
		return nil
	}

	var addUserProfileRequestBody4 AddUserProfileRequestBody4 = AddUserProfileRequestBody4{}
	if err := utils.UnmarshalJSON(data, &addUserProfileRequestBody4, "", true, true); err == nil {
		u.AddUserProfileRequestBody4 = &addUserProfileRequestBody4
		u.Type = AddUserProfileRequestTypeAddUserProfileRequestBody4
		return nil
	}

	var addUserProfileRequestBody5 AddUserProfileRequestBody5 = AddUserProfileRequestBody5{}
	if err := utils.UnmarshalJSON(data, &addUserProfileRequestBody5, "", true, true); err == nil {
		u.AddUserProfileRequestBody5 = &addUserProfileRequestBody5
		u.Type = AddUserProfileRequestTypeAddUserProfileRequestBody5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AddUserProfileRequest", string(data))
}

func (u AddUserProfileRequest) MarshalJSON() ([]byte, error) {
	if u.AddUserProfileRequestBody1 != nil {
		return utils.MarshalJSON(u.AddUserProfileRequestBody1, "", true)
	}

	if u.AddUserProfileRequestBody2 != nil {
		return utils.MarshalJSON(u.AddUserProfileRequestBody2, "", true)
	}

	if u.AddUserProfileRequestBody3 != nil {
		return utils.MarshalJSON(u.AddUserProfileRequestBody3, "", true)
	}

	if u.AddUserProfileRequestBody4 != nil {
		return utils.MarshalJSON(u.AddUserProfileRequestBody4, "", true)
	}

	if u.AddUserProfileRequestBody5 != nil {
		return utils.MarshalJSON(u.AddUserProfileRequestBody5, "", true)
	}

	return nil, errors.New("could not marshal union type AddUserProfileRequest: all fields are null")
}

type AddUserProfileResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *AddUserProfileResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
