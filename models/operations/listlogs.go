// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListLogsRequest struct {
	// Filter logs by user ID.
	UserID *string `queryParam:"style=form,explode=true,name=userId"`
	// Filter logs by application ID.
	ApplicationID *string `queryParam:"style=form,explode=true,name=applicationId"`
	// Filter logs by log key.
	LogKey *string `queryParam:"style=form,explode=true,name=logKey"`
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
}

func (l ListLogsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListLogsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListLogsRequest) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *ListLogsRequest) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *ListLogsRequest) GetLogKey() *string {
	if o == nil {
		return nil
	}
	return o.LogKey
}

func (o *ListLogsRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListLogsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type ListLogsResult string

const (
	ListLogsResultSuccess ListLogsResult = "Success"
	ListLogsResultError   ListLogsResult = "Error"
)

func (e ListLogsResult) ToPointer() *ListLogsResult {
	return &e
}
func (e *ListLogsResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Success":
		fallthrough
	case "Error":
		*e = ListLogsResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLogsResult: %v", v)
	}
}

type ListLogsErrorType string

const (
	ListLogsErrorTypeMapOfAny ListLogsErrorType = "mapOfAny"
	ListLogsErrorTypeStr      ListLogsErrorType = "str"
)

type ListLogsError struct {
	MapOfAny map[string]any `queryParam:"inline"`
	Str      *string        `queryParam:"inline"`

	Type ListLogsErrorType
}

func CreateListLogsErrorMapOfAny(mapOfAny map[string]any) ListLogsError {
	typ := ListLogsErrorTypeMapOfAny

	return ListLogsError{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListLogsErrorStr(str string) ListLogsError {
	typ := ListLogsErrorTypeStr

	return ListLogsError{
		Str:  &str,
		Type: typ,
	}
}

func (u *ListLogsError) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListLogsErrorTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ListLogsErrorTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListLogsError", string(data))
}

func (u ListLogsError) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type ListLogsError: all fields are null")
}

type ListLogsPayload struct {
	Key           string         `json:"key"`
	Result        ListLogsResult `json:"result"`
	Error         *ListLogsError `json:"error,omitempty"`
	IP            *string        `json:"ip,omitempty"`
	UserAgent     *string        `json:"userAgent,omitempty"`
	UserID        *string        `json:"userId,omitempty"`
	ApplicationID *string        `json:"applicationId,omitempty"`
	SessionID     *string        `json:"sessionId,omitempty"`
	Params        map[string]any `json:"params,omitempty"`
}

func (o *ListLogsPayload) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListLogsPayload) GetResult() ListLogsResult {
	if o == nil {
		return ListLogsResult("")
	}
	return o.Result
}

func (o *ListLogsPayload) GetError() *ListLogsError {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *ListLogsPayload) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *ListLogsPayload) GetUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.UserAgent
}

func (o *ListLogsPayload) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *ListLogsPayload) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *ListLogsPayload) GetSessionID() *string {
	if o == nil {
		return nil
	}
	return o.SessionID
}

func (o *ListLogsPayload) GetParams() map[string]any {
	if o == nil {
		return nil
	}
	return o.Params
}

type ListLogsResponseBody struct {
	TenantID  string          `json:"tenantId"`
	ID        string          `json:"id"`
	Key       string          `json:"key"`
	Payload   ListLogsPayload `json:"payload"`
	CreatedAt float64         `json:"createdAt"`
}

func (o *ListLogsResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListLogsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListLogsResponseBody) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListLogsResponseBody) GetPayload() ListLogsPayload {
	if o == nil {
		return ListLogsPayload{}
	}
	return o.Payload
}

func (o *ListLogsResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type ListLogsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// An array of logs that match the given query.
	ResponseBodies []ListLogsResponseBody
}

func (o *ListLogsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListLogsResponse) GetResponseBodies() []ListLogsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
