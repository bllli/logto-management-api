// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// ReplaceOrganizationInvitationStatusStatusRequest - The status of the organization invitation.
type ReplaceOrganizationInvitationStatusStatusRequest string

const (
	ReplaceOrganizationInvitationStatusStatusRequestAccepted ReplaceOrganizationInvitationStatusStatusRequest = "Accepted"
	ReplaceOrganizationInvitationStatusStatusRequestRevoked  ReplaceOrganizationInvitationStatusStatusRequest = "Revoked"
)

func (e ReplaceOrganizationInvitationStatusStatusRequest) ToPointer() *ReplaceOrganizationInvitationStatusStatusRequest {
	return &e
}
func (e *ReplaceOrganizationInvitationStatusStatusRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Accepted":
		fallthrough
	case "Revoked":
		*e = ReplaceOrganizationInvitationStatusStatusRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReplaceOrganizationInvitationStatusStatusRequest: %v", v)
	}
}

// ReplaceOrganizationInvitationStatusRequestBody - The organization invitation status to update.
type ReplaceOrganizationInvitationStatusRequestBody struct {
	// The ID of the user who accepted the organization invitation. Required if the status is "Accepted".
	AcceptedUserID *string `json:"acceptedUserId,omitempty"`
	// The status of the organization invitation.
	Status ReplaceOrganizationInvitationStatusStatusRequest `json:"status"`
}

func (o *ReplaceOrganizationInvitationStatusRequestBody) GetAcceptedUserID() *string {
	if o == nil {
		return nil
	}
	return o.AcceptedUserID
}

func (o *ReplaceOrganizationInvitationStatusRequestBody) GetStatus() ReplaceOrganizationInvitationStatusStatusRequest {
	if o == nil {
		return ReplaceOrganizationInvitationStatusStatusRequest("")
	}
	return o.Status
}

type ReplaceOrganizationInvitationStatusRequest struct {
	// The unique identifier of the organization invitation.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The organization invitation status to update.
	RequestBody ReplaceOrganizationInvitationStatusRequestBody `request:"mediaType=application/json"`
}

func (o *ReplaceOrganizationInvitationStatusRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReplaceOrganizationInvitationStatusRequest) GetRequestBody() ReplaceOrganizationInvitationStatusRequestBody {
	if o == nil {
		return ReplaceOrganizationInvitationStatusRequestBody{}
	}
	return o.RequestBody
}

type ReplaceOrganizationInvitationStatusStatusResponse string

const (
	ReplaceOrganizationInvitationStatusStatusResponsePending  ReplaceOrganizationInvitationStatusStatusResponse = "Pending"
	ReplaceOrganizationInvitationStatusStatusResponseAccepted ReplaceOrganizationInvitationStatusStatusResponse = "Accepted"
	ReplaceOrganizationInvitationStatusStatusResponseExpired  ReplaceOrganizationInvitationStatusStatusResponse = "Expired"
	ReplaceOrganizationInvitationStatusStatusResponseRevoked  ReplaceOrganizationInvitationStatusStatusResponse = "Revoked"
)

func (e ReplaceOrganizationInvitationStatusStatusResponse) ToPointer() *ReplaceOrganizationInvitationStatusStatusResponse {
	return &e
}
func (e *ReplaceOrganizationInvitationStatusStatusResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Pending":
		fallthrough
	case "Accepted":
		fallthrough
	case "Expired":
		fallthrough
	case "Revoked":
		*e = ReplaceOrganizationInvitationStatusStatusResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReplaceOrganizationInvitationStatusStatusResponse: %v", v)
	}
}

type ReplaceOrganizationInvitationStatusOrganizationRole struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ReplaceOrganizationInvitationStatusOrganizationRole) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReplaceOrganizationInvitationStatusOrganizationRole) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// ReplaceOrganizationInvitationStatusResponseBody - The organization invitation status was updated successfully.
type ReplaceOrganizationInvitationStatusResponseBody struct {
	TenantID          string                                                `json:"tenantId"`
	ID                string                                                `json:"id"`
	InviterID         *string                                               `json:"inviterId"`
	Invitee           string                                                `json:"invitee"`
	AcceptedUserID    *string                                               `json:"acceptedUserId"`
	OrganizationID    string                                                `json:"organizationId"`
	Status            ReplaceOrganizationInvitationStatusStatusResponse     `json:"status"`
	CreatedAt         float64                                               `json:"createdAt"`
	UpdatedAt         float64                                               `json:"updatedAt"`
	ExpiresAt         float64                                               `json:"expiresAt"`
	OrganizationRoles []ReplaceOrganizationInvitationStatusOrganizationRole `json:"organizationRoles"`
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetInviterID() *string {
	if o == nil {
		return nil
	}
	return o.InviterID
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetInvitee() string {
	if o == nil {
		return ""
	}
	return o.Invitee
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetAcceptedUserID() *string {
	if o == nil {
		return nil
	}
	return o.AcceptedUserID
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetStatus() ReplaceOrganizationInvitationStatusStatusResponse {
	if o == nil {
		return ReplaceOrganizationInvitationStatusStatusResponse("")
	}
	return o.Status
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetExpiresAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresAt
}

func (o *ReplaceOrganizationInvitationStatusResponseBody) GetOrganizationRoles() []ReplaceOrganizationInvitationStatusOrganizationRole {
	if o == nil {
		return []ReplaceOrganizationInvitationStatusOrganizationRole{}
	}
	return o.OrganizationRoles
}

type ReplaceOrganizationInvitationStatusResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The organization invitation status was updated successfully.
	Object *ReplaceOrganizationInvitationStatusResponseBody
}

func (o *ReplaceOrganizationInvitationStatusResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ReplaceOrganizationInvitationStatusResponse) GetObject() *ReplaceOrganizationInvitationStatusResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
