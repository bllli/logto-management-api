// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// UpdateSsoConnectorConfigRequest - arbitrary
type UpdateSsoConnectorConfigRequest struct {
}

type UpdateSsoConnectorBrandingRequest struct {
	DisplayName *string `json:"displayName,omitempty"`
	Logo        *string `json:"logo,omitempty"`
	DarkLogo    *string `json:"darkLogo,omitempty"`
}

func (o *UpdateSsoConnectorBrandingRequest) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *UpdateSsoConnectorBrandingRequest) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *UpdateSsoConnectorBrandingRequest) GetDarkLogo() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogo
}

type UpdateSsoConnectorRequestBody struct {
	// arbitrary
	Config        *UpdateSsoConnectorConfigRequest   `json:"config,omitempty"`
	Domains       []string                           `json:"domains,omitempty"`
	Branding      *UpdateSsoConnectorBrandingRequest `json:"branding,omitempty"`
	SyncProfile   *bool                              `json:"syncProfile,omitempty"`
	ConnectorName *string                            `json:"connectorName,omitempty"`
}

func (o *UpdateSsoConnectorRequestBody) GetConfig() *UpdateSsoConnectorConfigRequest {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *UpdateSsoConnectorRequestBody) GetDomains() []string {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *UpdateSsoConnectorRequestBody) GetBranding() *UpdateSsoConnectorBrandingRequest {
	if o == nil {
		return nil
	}
	return o.Branding
}

func (o *UpdateSsoConnectorRequestBody) GetSyncProfile() *bool {
	if o == nil {
		return nil
	}
	return o.SyncProfile
}

func (o *UpdateSsoConnectorRequestBody) GetConnectorName() *string {
	if o == nil {
		return nil
	}
	return o.ConnectorName
}

type UpdateSsoConnectorRequest struct {
	// The unique identifier of the sso connector.
	ID          string                        `pathParam:"style=simple,explode=false,name=id"`
	RequestBody UpdateSsoConnectorRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateSsoConnectorRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateSsoConnectorRequest) GetRequestBody() UpdateSsoConnectorRequestBody {
	if o == nil {
		return UpdateSsoConnectorRequestBody{}
	}
	return o.RequestBody
}

type UpdateSsoConnectorProviderName string

const (
	UpdateSsoConnectorProviderNameOidc            UpdateSsoConnectorProviderName = "OIDC"
	UpdateSsoConnectorProviderNameSaml            UpdateSsoConnectorProviderName = "SAML"
	UpdateSsoConnectorProviderNameAzureAd         UpdateSsoConnectorProviderName = "AzureAD"
	UpdateSsoConnectorProviderNameGoogleWorkspace UpdateSsoConnectorProviderName = "GoogleWorkspace"
	UpdateSsoConnectorProviderNameOkta            UpdateSsoConnectorProviderName = "Okta"
	UpdateSsoConnectorProviderNameAzureAdOidc     UpdateSsoConnectorProviderName = "AzureAdOidc"
)

func (e UpdateSsoConnectorProviderName) ToPointer() *UpdateSsoConnectorProviderName {
	return &e
}
func (e *UpdateSsoConnectorProviderName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OIDC":
		fallthrough
	case "SAML":
		fallthrough
	case "AzureAD":
		fallthrough
	case "GoogleWorkspace":
		fallthrough
	case "Okta":
		fallthrough
	case "AzureAdOidc":
		*e = UpdateSsoConnectorProviderName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSsoConnectorProviderName: %v", v)
	}
}

// UpdateSsoConnectorConfigResponse - arbitrary
type UpdateSsoConnectorConfigResponse struct {
}

type UpdateSsoConnectorBrandingResponse struct {
	DisplayName *string `json:"displayName,omitempty"`
	Logo        *string `json:"logo,omitempty"`
	DarkLogo    *string `json:"darkLogo,omitempty"`
}

func (o *UpdateSsoConnectorBrandingResponse) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *UpdateSsoConnectorBrandingResponse) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *UpdateSsoConnectorBrandingResponse) GetDarkLogo() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogo
}

type UpdateSsoConnectorProviderType string

const (
	UpdateSsoConnectorProviderTypeOidc UpdateSsoConnectorProviderType = "oidc"
	UpdateSsoConnectorProviderTypeSaml UpdateSsoConnectorProviderType = "saml"
)

func (e UpdateSsoConnectorProviderType) ToPointer() *UpdateSsoConnectorProviderType {
	return &e
}
func (e *UpdateSsoConnectorProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oidc":
		fallthrough
	case "saml":
		*e = UpdateSsoConnectorProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSsoConnectorProviderType: %v", v)
	}
}

// UpdateSsoConnectorResponseBody - The updated SSO connector.
type UpdateSsoConnectorResponseBody struct {
	TenantID      string                         `json:"tenantId"`
	ID            string                         `json:"id"`
	ProviderName  UpdateSsoConnectorProviderName `json:"providerName"`
	ConnectorName string                         `json:"connectorName"`
	// arbitrary
	Config           UpdateSsoConnectorConfigResponse   `json:"config"`
	Domains          []string                           `json:"domains"`
	Branding         UpdateSsoConnectorBrandingResponse `json:"branding"`
	SyncProfile      bool                               `json:"syncProfile"`
	CreatedAt        float64                            `json:"createdAt"`
	Name             string                             `json:"name"`
	ProviderType     UpdateSsoConnectorProviderType     `json:"providerType"`
	ProviderLogo     string                             `json:"providerLogo"`
	ProviderLogoDark string                             `json:"providerLogoDark"`
	ProviderConfig   map[string]any                     `json:"providerConfig,omitempty"`
}

func (o *UpdateSsoConnectorResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpdateSsoConnectorResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateSsoConnectorResponseBody) GetProviderName() UpdateSsoConnectorProviderName {
	if o == nil {
		return UpdateSsoConnectorProviderName("")
	}
	return o.ProviderName
}

func (o *UpdateSsoConnectorResponseBody) GetConnectorName() string {
	if o == nil {
		return ""
	}
	return o.ConnectorName
}

func (o *UpdateSsoConnectorResponseBody) GetConfig() UpdateSsoConnectorConfigResponse {
	if o == nil {
		return UpdateSsoConnectorConfigResponse{}
	}
	return o.Config
}

func (o *UpdateSsoConnectorResponseBody) GetDomains() []string {
	if o == nil {
		return []string{}
	}
	return o.Domains
}

func (o *UpdateSsoConnectorResponseBody) GetBranding() UpdateSsoConnectorBrandingResponse {
	if o == nil {
		return UpdateSsoConnectorBrandingResponse{}
	}
	return o.Branding
}

func (o *UpdateSsoConnectorResponseBody) GetSyncProfile() bool {
	if o == nil {
		return false
	}
	return o.SyncProfile
}

func (o *UpdateSsoConnectorResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateSsoConnectorResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateSsoConnectorResponseBody) GetProviderType() UpdateSsoConnectorProviderType {
	if o == nil {
		return UpdateSsoConnectorProviderType("")
	}
	return o.ProviderType
}

func (o *UpdateSsoConnectorResponseBody) GetProviderLogo() string {
	if o == nil {
		return ""
	}
	return o.ProviderLogo
}

func (o *UpdateSsoConnectorResponseBody) GetProviderLogoDark() string {
	if o == nil {
		return ""
	}
	return o.ProviderLogoDark
}

func (o *UpdateSsoConnectorResponseBody) GetProviderConfig() map[string]any {
	if o == nil {
		return nil
	}
	return o.ProviderConfig
}

type UpdateSsoConnectorResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated SSO connector.
	Object *UpdateSsoConnectorResponseBody
}

func (o *UpdateSsoConnectorResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateSsoConnectorResponse) GetObject() *UpdateSsoConnectorResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
