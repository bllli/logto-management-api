// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type VerifyVerificationCodeRequestBody2 struct {
	Phone            string `json:"phone"`
	VerificationCode string `json:"verificationCode"`
}

func (o *VerifyVerificationCodeRequestBody2) GetPhone() string {
	if o == nil {
		return ""
	}
	return o.Phone
}

func (o *VerifyVerificationCodeRequestBody2) GetVerificationCode() string {
	if o == nil {
		return ""
	}
	return o.VerificationCode
}

type VerifyVerificationCodeRequestBody1 struct {
	Email            string `json:"email"`
	VerificationCode string `json:"verificationCode"`
}

func (o *VerifyVerificationCodeRequestBody1) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *VerifyVerificationCodeRequestBody1) GetVerificationCode() string {
	if o == nil {
		return ""
	}
	return o.VerificationCode
}

type VerifyVerificationCodeRequestType string

const (
	VerifyVerificationCodeRequestTypeVerifyVerificationCodeRequestBody1 VerifyVerificationCodeRequestType = "VerifyVerificationCode_RequestBody_1"
	VerifyVerificationCodeRequestTypeVerifyVerificationCodeRequestBody2 VerifyVerificationCodeRequestType = "VerifyVerificationCode_RequestBody_2"
)

type VerifyVerificationCodeRequest struct {
	VerifyVerificationCodeRequestBody1 *VerifyVerificationCodeRequestBody1 `queryParam:"inline"`
	VerifyVerificationCodeRequestBody2 *VerifyVerificationCodeRequestBody2 `queryParam:"inline"`

	Type VerifyVerificationCodeRequestType
}

func CreateVerifyVerificationCodeRequestVerifyVerificationCodeRequestBody1(verifyVerificationCodeRequestBody1 VerifyVerificationCodeRequestBody1) VerifyVerificationCodeRequest {
	typ := VerifyVerificationCodeRequestTypeVerifyVerificationCodeRequestBody1

	return VerifyVerificationCodeRequest{
		VerifyVerificationCodeRequestBody1: &verifyVerificationCodeRequestBody1,
		Type:                               typ,
	}
}

func CreateVerifyVerificationCodeRequestVerifyVerificationCodeRequestBody2(verifyVerificationCodeRequestBody2 VerifyVerificationCodeRequestBody2) VerifyVerificationCodeRequest {
	typ := VerifyVerificationCodeRequestTypeVerifyVerificationCodeRequestBody2

	return VerifyVerificationCodeRequest{
		VerifyVerificationCodeRequestBody2: &verifyVerificationCodeRequestBody2,
		Type:                               typ,
	}
}

func (u *VerifyVerificationCodeRequest) UnmarshalJSON(data []byte) error {

	var verifyVerificationCodeRequestBody1 VerifyVerificationCodeRequestBody1 = VerifyVerificationCodeRequestBody1{}
	if err := utils.UnmarshalJSON(data, &verifyVerificationCodeRequestBody1, "", true, true); err == nil {
		u.VerifyVerificationCodeRequestBody1 = &verifyVerificationCodeRequestBody1
		u.Type = VerifyVerificationCodeRequestTypeVerifyVerificationCodeRequestBody1
		return nil
	}

	var verifyVerificationCodeRequestBody2 VerifyVerificationCodeRequestBody2 = VerifyVerificationCodeRequestBody2{}
	if err := utils.UnmarshalJSON(data, &verifyVerificationCodeRequestBody2, "", true, true); err == nil {
		u.VerifyVerificationCodeRequestBody2 = &verifyVerificationCodeRequestBody2
		u.Type = VerifyVerificationCodeRequestTypeVerifyVerificationCodeRequestBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for VerifyVerificationCodeRequest", string(data))
}

func (u VerifyVerificationCodeRequest) MarshalJSON() ([]byte, error) {
	if u.VerifyVerificationCodeRequestBody1 != nil {
		return utils.MarshalJSON(u.VerifyVerificationCodeRequestBody1, "", true)
	}

	if u.VerifyVerificationCodeRequestBody2 != nil {
		return utils.MarshalJSON(u.VerifyVerificationCodeRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type VerifyVerificationCodeRequest: all fields are null")
}

type VerifyVerificationCodeResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *VerifyVerificationCodeResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
