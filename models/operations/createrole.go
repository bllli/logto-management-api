// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

// CreateRoleTypeRequest - The type of the role. It cannot be changed after creation.
type CreateRoleTypeRequest string

const (
	CreateRoleTypeRequestUser             CreateRoleTypeRequest = "User"
	CreateRoleTypeRequestMachineToMachine CreateRoleTypeRequest = "MachineToMachine"
)

func (e CreateRoleTypeRequest) ToPointer() *CreateRoleTypeRequest {
	return &e
}
func (e *CreateRoleTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "MachineToMachine":
		*e = CreateRoleTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRoleTypeRequest: %v", v)
	}
}

type CreateRoleRequest struct {
	TenantID *string `json:"tenantId,omitempty"`
	// The name of the role. It should be unique within the tenant.
	Name        string `json:"name"`
	Description string `json:"description"`
	// The type of the role. It cannot be changed after creation.
	Type      *CreateRoleTypeRequest `json:"type,omitempty"`
	IsDefault *bool                  `json:"isDefault,omitempty"`
	// The initial API resource scopes assigned to the role.
	ScopeIds []string `json:"scopeIds,omitempty"`
}

func (o *CreateRoleRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreateRoleRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRoleRequest) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreateRoleRequest) GetType() *CreateRoleTypeRequest {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateRoleRequest) GetIsDefault() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefault
}

func (o *CreateRoleRequest) GetScopeIds() []string {
	if o == nil {
		return nil
	}
	return o.ScopeIds
}

type CreateRoleTypeResponse string

const (
	CreateRoleTypeResponseUser             CreateRoleTypeResponse = "User"
	CreateRoleTypeResponseMachineToMachine CreateRoleTypeResponse = "MachineToMachine"
)

func (e CreateRoleTypeResponse) ToPointer() *CreateRoleTypeResponse {
	return &e
}
func (e *CreateRoleTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "MachineToMachine":
		*e = CreateRoleTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRoleTypeResponse: %v", v)
	}
}

// CreateRoleResponseBody - The created role.
type CreateRoleResponseBody struct {
	TenantID    string                 `json:"tenantId"`
	ID          string                 `json:"id"`
	Name        string                 `json:"name"`
	Description string                 `json:"description"`
	Type        CreateRoleTypeResponse `json:"type"`
	IsDefault   bool                   `json:"isDefault"`
}

func (o *CreateRoleResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *CreateRoleResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateRoleResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRoleResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreateRoleResponseBody) GetType() CreateRoleTypeResponse {
	if o == nil {
		return CreateRoleTypeResponse("")
	}
	return o.Type
}

func (o *CreateRoleResponseBody) GetIsDefault() bool {
	if o == nil {
		return false
	}
	return o.IsDefault
}

type CreateRoleResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The created role.
	Object *CreateRoleResponseBody
}

func (o *CreateRoleResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateRoleResponse) GetObject() *CreateRoleResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
