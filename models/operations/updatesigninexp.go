// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

// UpdateSignInExpColorRequest - Specify the primary branding color for the sign-in page (both light/dark mode).
type UpdateSignInExpColorRequest struct {
	PrimaryColor      string `json:"primaryColor"`
	IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
	DarkPrimaryColor  string `json:"darkPrimaryColor"`
}

func (o *UpdateSignInExpColorRequest) GetPrimaryColor() string {
	if o == nil {
		return ""
	}
	return o.PrimaryColor
}

func (o *UpdateSignInExpColorRequest) GetIsDarkModeEnabled() bool {
	if o == nil {
		return false
	}
	return o.IsDarkModeEnabled
}

func (o *UpdateSignInExpColorRequest) GetDarkPrimaryColor() string {
	if o == nil {
		return ""
	}
	return o.DarkPrimaryColor
}

type UpdateSignInExpBrandingRequest struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *UpdateSignInExpBrandingRequest) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *UpdateSignInExpBrandingRequest) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *UpdateSignInExpBrandingRequest) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *UpdateSignInExpBrandingRequest) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

type FallbackLanguageRequest string

const (
	FallbackLanguageRequestAfZa  FallbackLanguageRequest = "af-ZA"
	FallbackLanguageRequestAmEt  FallbackLanguageRequest = "am-ET"
	FallbackLanguageRequestAr    FallbackLanguageRequest = "ar"
	FallbackLanguageRequestArAr  FallbackLanguageRequest = "ar-AR"
	FallbackLanguageRequestAsIn  FallbackLanguageRequest = "as-IN"
	FallbackLanguageRequestAzAz  FallbackLanguageRequest = "az-AZ"
	FallbackLanguageRequestBeBy  FallbackLanguageRequest = "be-BY"
	FallbackLanguageRequestBgBg  FallbackLanguageRequest = "bg-BG"
	FallbackLanguageRequestBnIn  FallbackLanguageRequest = "bn-IN"
	FallbackLanguageRequestBrFr  FallbackLanguageRequest = "br-FR"
	FallbackLanguageRequestBsBa  FallbackLanguageRequest = "bs-BA"
	FallbackLanguageRequestCaEs  FallbackLanguageRequest = "ca-ES"
	FallbackLanguageRequestCbIq  FallbackLanguageRequest = "cb-IQ"
	FallbackLanguageRequestCoFr  FallbackLanguageRequest = "co-FR"
	FallbackLanguageRequestCsCz  FallbackLanguageRequest = "cs-CZ"
	FallbackLanguageRequestCxPh  FallbackLanguageRequest = "cx-PH"
	FallbackLanguageRequestCyGb  FallbackLanguageRequest = "cy-GB"
	FallbackLanguageRequestDaDk  FallbackLanguageRequest = "da-DK"
	FallbackLanguageRequestDe    FallbackLanguageRequest = "de"
	FallbackLanguageRequestDeDe  FallbackLanguageRequest = "de-DE"
	FallbackLanguageRequestElGr  FallbackLanguageRequest = "el-GR"
	FallbackLanguageRequestEn    FallbackLanguageRequest = "en"
	FallbackLanguageRequestEnGb  FallbackLanguageRequest = "en-GB"
	FallbackLanguageRequestEnUs  FallbackLanguageRequest = "en-US"
	FallbackLanguageRequestEoEo  FallbackLanguageRequest = "eo-EO"
	FallbackLanguageRequestEs    FallbackLanguageRequest = "es"
	FallbackLanguageRequestEsEs  FallbackLanguageRequest = "es-ES"
	FallbackLanguageRequestEs419 FallbackLanguageRequest = "es-419"
	FallbackLanguageRequestEtEe  FallbackLanguageRequest = "et-EE"
	FallbackLanguageRequestEuEs  FallbackLanguageRequest = "eu-ES"
	FallbackLanguageRequestFaIr  FallbackLanguageRequest = "fa-IR"
	FallbackLanguageRequestFfNg  FallbackLanguageRequest = "ff-NG"
	FallbackLanguageRequestFi    FallbackLanguageRequest = "fi"
	FallbackLanguageRequestFiFi  FallbackLanguageRequest = "fi-FI"
	FallbackLanguageRequestFoFo  FallbackLanguageRequest = "fo-FO"
	FallbackLanguageRequestFr    FallbackLanguageRequest = "fr"
	FallbackLanguageRequestFrCa  FallbackLanguageRequest = "fr-CA"
	FallbackLanguageRequestFrFr  FallbackLanguageRequest = "fr-FR"
	FallbackLanguageRequestFyNl  FallbackLanguageRequest = "fy-NL"
	FallbackLanguageRequestGaIe  FallbackLanguageRequest = "ga-IE"
	FallbackLanguageRequestGlEs  FallbackLanguageRequest = "gl-ES"
	FallbackLanguageRequestGnPy  FallbackLanguageRequest = "gn-PY"
	FallbackLanguageRequestGuIn  FallbackLanguageRequest = "gu-IN"
	FallbackLanguageRequestHaNg  FallbackLanguageRequest = "ha-NG"
	FallbackLanguageRequestHeIl  FallbackLanguageRequest = "he-IL"
	FallbackLanguageRequestHiIn  FallbackLanguageRequest = "hi-IN"
	FallbackLanguageRequestHrHr  FallbackLanguageRequest = "hr-HR"
	FallbackLanguageRequestHtHt  FallbackLanguageRequest = "ht-HT"
	FallbackLanguageRequestHuHu  FallbackLanguageRequest = "hu-HU"
	FallbackLanguageRequestHyAm  FallbackLanguageRequest = "hy-AM"
	FallbackLanguageRequestIDID  FallbackLanguageRequest = "id-ID"
	FallbackLanguageRequestIkUs  FallbackLanguageRequest = "ik-US"
	FallbackLanguageRequestIsIs  FallbackLanguageRequest = "is-IS"
	FallbackLanguageRequestIt    FallbackLanguageRequest = "it"
	FallbackLanguageRequestItIt  FallbackLanguageRequest = "it-IT"
	FallbackLanguageRequestIuCa  FallbackLanguageRequest = "iu-CA"
	FallbackLanguageRequestJa    FallbackLanguageRequest = "ja"
	FallbackLanguageRequestJaJp  FallbackLanguageRequest = "ja-JP"
	FallbackLanguageRequestJaKs  FallbackLanguageRequest = "ja-KS"
	FallbackLanguageRequestJvID  FallbackLanguageRequest = "jv-ID"
	FallbackLanguageRequestKaGe  FallbackLanguageRequest = "ka-GE"
	FallbackLanguageRequestKkKz  FallbackLanguageRequest = "kk-KZ"
	FallbackLanguageRequestKmKh  FallbackLanguageRequest = "km-KH"
	FallbackLanguageRequestKnIn  FallbackLanguageRequest = "kn-IN"
	FallbackLanguageRequestKo    FallbackLanguageRequest = "ko"
	FallbackLanguageRequestKoKr  FallbackLanguageRequest = "ko-KR"
	FallbackLanguageRequestKuTr  FallbackLanguageRequest = "ku-TR"
	FallbackLanguageRequestKyKg  FallbackLanguageRequest = "ky-KG"
	FallbackLanguageRequestLoLa  FallbackLanguageRequest = "lo-LA"
	FallbackLanguageRequestLtLt  FallbackLanguageRequest = "lt-LT"
	FallbackLanguageRequestLvLv  FallbackLanguageRequest = "lv-LV"
	FallbackLanguageRequestMgMg  FallbackLanguageRequest = "mg-MG"
	FallbackLanguageRequestMkMk  FallbackLanguageRequest = "mk-MK"
	FallbackLanguageRequestMlIn  FallbackLanguageRequest = "ml-IN"
	FallbackLanguageRequestMnMn  FallbackLanguageRequest = "mn-MN"
	FallbackLanguageRequestMrIn  FallbackLanguageRequest = "mr-IN"
	FallbackLanguageRequestMsMy  FallbackLanguageRequest = "ms-MY"
	FallbackLanguageRequestMtMt  FallbackLanguageRequest = "mt-MT"
	FallbackLanguageRequestMyMm  FallbackLanguageRequest = "my-MM"
	FallbackLanguageRequestNbNo  FallbackLanguageRequest = "nb-NO"
	FallbackLanguageRequestNeNp  FallbackLanguageRequest = "ne-NP"
	FallbackLanguageRequestNl    FallbackLanguageRequest = "nl"
	FallbackLanguageRequestNlBe  FallbackLanguageRequest = "nl-BE"
	FallbackLanguageRequestNlNl  FallbackLanguageRequest = "nl-NL"
	FallbackLanguageRequestNnNo  FallbackLanguageRequest = "nn-NO"
	FallbackLanguageRequestOrIn  FallbackLanguageRequest = "or-IN"
	FallbackLanguageRequestPaIn  FallbackLanguageRequest = "pa-IN"
	FallbackLanguageRequestPlPl  FallbackLanguageRequest = "pl-PL"
	FallbackLanguageRequestPsAf  FallbackLanguageRequest = "ps-AF"
	FallbackLanguageRequestPt    FallbackLanguageRequest = "pt"
	FallbackLanguageRequestPtBr  FallbackLanguageRequest = "pt-BR"
	FallbackLanguageRequestPtPt  FallbackLanguageRequest = "pt-PT"
	FallbackLanguageRequestRoRo  FallbackLanguageRequest = "ro-RO"
	FallbackLanguageRequestRu    FallbackLanguageRequest = "ru"
	FallbackLanguageRequestRuRu  FallbackLanguageRequest = "ru-RU"
	FallbackLanguageRequestRwRw  FallbackLanguageRequest = "rw-RW"
	FallbackLanguageRequestScIt  FallbackLanguageRequest = "sc-IT"
	FallbackLanguageRequestSiLk  FallbackLanguageRequest = "si-LK"
	FallbackLanguageRequestSkSk  FallbackLanguageRequest = "sk-SK"
	FallbackLanguageRequestSlSi  FallbackLanguageRequest = "sl-SI"
	FallbackLanguageRequestSnZw  FallbackLanguageRequest = "sn-ZW"
	FallbackLanguageRequestSqAl  FallbackLanguageRequest = "sq-AL"
	FallbackLanguageRequestSrRs  FallbackLanguageRequest = "sr-RS"
	FallbackLanguageRequestSv    FallbackLanguageRequest = "sv"
	FallbackLanguageRequestSvSe  FallbackLanguageRequest = "sv-SE"
	FallbackLanguageRequestSwKe  FallbackLanguageRequest = "sw-KE"
	FallbackLanguageRequestSySy  FallbackLanguageRequest = "sy-SY"
	FallbackLanguageRequestSzPl  FallbackLanguageRequest = "sz-PL"
	FallbackLanguageRequestTaIn  FallbackLanguageRequest = "ta-IN"
	FallbackLanguageRequestTeIn  FallbackLanguageRequest = "te-IN"
	FallbackLanguageRequestTgTj  FallbackLanguageRequest = "tg-TJ"
	FallbackLanguageRequestTh    FallbackLanguageRequest = "th"
	FallbackLanguageRequestThTh  FallbackLanguageRequest = "th-TH"
	FallbackLanguageRequestTlPh  FallbackLanguageRequest = "tl-PH"
	FallbackLanguageRequestTr    FallbackLanguageRequest = "tr"
	FallbackLanguageRequestTrTr  FallbackLanguageRequest = "tr-TR"
	FallbackLanguageRequestTtRu  FallbackLanguageRequest = "tt-RU"
	FallbackLanguageRequestTzMa  FallbackLanguageRequest = "tz-MA"
	FallbackLanguageRequestUkUa  FallbackLanguageRequest = "uk-UA"
	FallbackLanguageRequestUrPk  FallbackLanguageRequest = "ur-PK"
	FallbackLanguageRequestUzUz  FallbackLanguageRequest = "uz-UZ"
	FallbackLanguageRequestViVn  FallbackLanguageRequest = "vi-VN"
	FallbackLanguageRequestZh    FallbackLanguageRequest = "zh"
	FallbackLanguageRequestZhCn  FallbackLanguageRequest = "zh-CN"
	FallbackLanguageRequestZhHk  FallbackLanguageRequest = "zh-HK"
	FallbackLanguageRequestZhMo  FallbackLanguageRequest = "zh-MO"
	FallbackLanguageRequestZhTw  FallbackLanguageRequest = "zh-TW"
	FallbackLanguageRequestZzTr  FallbackLanguageRequest = "zz-TR"
)

func (e FallbackLanguageRequest) ToPointer() *FallbackLanguageRequest {
	return &e
}
func (e *FallbackLanguageRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "af-ZA":
		fallthrough
	case "am-ET":
		fallthrough
	case "ar":
		fallthrough
	case "ar-AR":
		fallthrough
	case "as-IN":
		fallthrough
	case "az-AZ":
		fallthrough
	case "be-BY":
		fallthrough
	case "bg-BG":
		fallthrough
	case "bn-IN":
		fallthrough
	case "br-FR":
		fallthrough
	case "bs-BA":
		fallthrough
	case "ca-ES":
		fallthrough
	case "cb-IQ":
		fallthrough
	case "co-FR":
		fallthrough
	case "cs-CZ":
		fallthrough
	case "cx-PH":
		fallthrough
	case "cy-GB":
		fallthrough
	case "da-DK":
		fallthrough
	case "de":
		fallthrough
	case "de-DE":
		fallthrough
	case "el-GR":
		fallthrough
	case "en":
		fallthrough
	case "en-GB":
		fallthrough
	case "en-US":
		fallthrough
	case "eo-EO":
		fallthrough
	case "es":
		fallthrough
	case "es-ES":
		fallthrough
	case "es-419":
		fallthrough
	case "et-EE":
		fallthrough
	case "eu-ES":
		fallthrough
	case "fa-IR":
		fallthrough
	case "ff-NG":
		fallthrough
	case "fi":
		fallthrough
	case "fi-FI":
		fallthrough
	case "fo-FO":
		fallthrough
	case "fr":
		fallthrough
	case "fr-CA":
		fallthrough
	case "fr-FR":
		fallthrough
	case "fy-NL":
		fallthrough
	case "ga-IE":
		fallthrough
	case "gl-ES":
		fallthrough
	case "gn-PY":
		fallthrough
	case "gu-IN":
		fallthrough
	case "ha-NG":
		fallthrough
	case "he-IL":
		fallthrough
	case "hi-IN":
		fallthrough
	case "hr-HR":
		fallthrough
	case "ht-HT":
		fallthrough
	case "hu-HU":
		fallthrough
	case "hy-AM":
		fallthrough
	case "id-ID":
		fallthrough
	case "ik-US":
		fallthrough
	case "is-IS":
		fallthrough
	case "it":
		fallthrough
	case "it-IT":
		fallthrough
	case "iu-CA":
		fallthrough
	case "ja":
		fallthrough
	case "ja-JP":
		fallthrough
	case "ja-KS":
		fallthrough
	case "jv-ID":
		fallthrough
	case "ka-GE":
		fallthrough
	case "kk-KZ":
		fallthrough
	case "km-KH":
		fallthrough
	case "kn-IN":
		fallthrough
	case "ko":
		fallthrough
	case "ko-KR":
		fallthrough
	case "ku-TR":
		fallthrough
	case "ky-KG":
		fallthrough
	case "lo-LA":
		fallthrough
	case "lt-LT":
		fallthrough
	case "lv-LV":
		fallthrough
	case "mg-MG":
		fallthrough
	case "mk-MK":
		fallthrough
	case "ml-IN":
		fallthrough
	case "mn-MN":
		fallthrough
	case "mr-IN":
		fallthrough
	case "ms-MY":
		fallthrough
	case "mt-MT":
		fallthrough
	case "my-MM":
		fallthrough
	case "nb-NO":
		fallthrough
	case "ne-NP":
		fallthrough
	case "nl":
		fallthrough
	case "nl-BE":
		fallthrough
	case "nl-NL":
		fallthrough
	case "nn-NO":
		fallthrough
	case "or-IN":
		fallthrough
	case "pa-IN":
		fallthrough
	case "pl-PL":
		fallthrough
	case "ps-AF":
		fallthrough
	case "pt":
		fallthrough
	case "pt-BR":
		fallthrough
	case "pt-PT":
		fallthrough
	case "ro-RO":
		fallthrough
	case "ru":
		fallthrough
	case "ru-RU":
		fallthrough
	case "rw-RW":
		fallthrough
	case "sc-IT":
		fallthrough
	case "si-LK":
		fallthrough
	case "sk-SK":
		fallthrough
	case "sl-SI":
		fallthrough
	case "sn-ZW":
		fallthrough
	case "sq-AL":
		fallthrough
	case "sr-RS":
		fallthrough
	case "sv":
		fallthrough
	case "sv-SE":
		fallthrough
	case "sw-KE":
		fallthrough
	case "sy-SY":
		fallthrough
	case "sz-PL":
		fallthrough
	case "ta-IN":
		fallthrough
	case "te-IN":
		fallthrough
	case "tg-TJ":
		fallthrough
	case "th":
		fallthrough
	case "th-TH":
		fallthrough
	case "tl-PH":
		fallthrough
	case "tr":
		fallthrough
	case "tr-TR":
		fallthrough
	case "tt-RU":
		fallthrough
	case "tz-MA":
		fallthrough
	case "uk-UA":
		fallthrough
	case "ur-PK":
		fallthrough
	case "uz-UZ":
		fallthrough
	case "vi-VN":
		fallthrough
	case "zh":
		fallthrough
	case "zh-CN":
		fallthrough
	case "zh-HK":
		fallthrough
	case "zh-MO":
		fallthrough
	case "zh-TW":
		fallthrough
	case "zz-TR":
		*e = FallbackLanguageRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FallbackLanguageRequest: %v", v)
	}
}

// LanguageInfoRequest - Control the language detection policy for the sign-in page.
type LanguageInfoRequest struct {
	AutoDetect       bool                    `json:"autoDetect"`
	FallbackLanguage FallbackLanguageRequest `json:"fallbackLanguage"`
}

func (o *LanguageInfoRequest) GetAutoDetect() bool {
	if o == nil {
		return false
	}
	return o.AutoDetect
}

func (o *LanguageInfoRequest) GetFallbackLanguage() FallbackLanguageRequest {
	if o == nil {
		return FallbackLanguageRequest("")
	}
	return o.FallbackLanguage
}

type AgreeToTermsPolicyRequest string

const (
	AgreeToTermsPolicyRequestAutomatic              AgreeToTermsPolicyRequest = "Automatic"
	AgreeToTermsPolicyRequestManualRegistrationOnly AgreeToTermsPolicyRequest = "ManualRegistrationOnly"
	AgreeToTermsPolicyRequestManual                 AgreeToTermsPolicyRequest = "Manual"
)

func (e AgreeToTermsPolicyRequest) ToPointer() *AgreeToTermsPolicyRequest {
	return &e
}
func (e *AgreeToTermsPolicyRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Automatic":
		fallthrough
	case "ManualRegistrationOnly":
		fallthrough
	case "Manual":
		*e = AgreeToTermsPolicyRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AgreeToTermsPolicyRequest: %v", v)
	}
}

type MethodIdentifierRequest string

const (
	MethodIdentifierRequestUsername MethodIdentifierRequest = "username"
	MethodIdentifierRequestEmail    MethodIdentifierRequest = "email"
	MethodIdentifierRequestPhone    MethodIdentifierRequest = "phone"
)

func (e MethodIdentifierRequest) ToPointer() *MethodIdentifierRequest {
	return &e
}
func (e *MethodIdentifierRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = MethodIdentifierRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MethodIdentifierRequest: %v", v)
	}
}

type MethodRequest struct {
	Identifier        MethodIdentifierRequest `json:"identifier"`
	Password          bool                    `json:"password"`
	VerificationCode  bool                    `json:"verificationCode"`
	IsPasswordPrimary bool                    `json:"isPasswordPrimary"`
}

func (o *MethodRequest) GetIdentifier() MethodIdentifierRequest {
	if o == nil {
		return MethodIdentifierRequest("")
	}
	return o.Identifier
}

func (o *MethodRequest) GetPassword() bool {
	if o == nil {
		return false
	}
	return o.Password
}

func (o *MethodRequest) GetVerificationCode() bool {
	if o == nil {
		return false
	}
	return o.VerificationCode
}

func (o *MethodRequest) GetIsPasswordPrimary() bool {
	if o == nil {
		return false
	}
	return o.IsPasswordPrimary
}

// SignInRequest - Sign-in method settings
type SignInRequest struct {
	Methods []MethodRequest `json:"methods"`
}

func (o *SignInRequest) GetMethods() []MethodRequest {
	if o == nil {
		return []MethodRequest{}
	}
	return o.Methods
}

type SignUpIdentifierRequestEnum string

const (
	SignUpIdentifierRequestEnumUsername SignUpIdentifierRequestEnum = "username"
	SignUpIdentifierRequestEnumEmail    SignUpIdentifierRequestEnum = "email"
	SignUpIdentifierRequestEnumPhone    SignUpIdentifierRequestEnum = "phone"
)

func (e SignUpIdentifierRequestEnum) ToPointer() *SignUpIdentifierRequestEnum {
	return &e
}
func (e *SignUpIdentifierRequestEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = SignUpIdentifierRequestEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SignUpIdentifierRequestEnum: %v", v)
	}
}

type IdentifierEmailOrPhoneRequest string

const (
	IdentifierEmailOrPhoneRequestEmailOrPhone IdentifierEmailOrPhoneRequest = "emailOrPhone"
)

func (e IdentifierEmailOrPhoneRequest) ToPointer() *IdentifierEmailOrPhoneRequest {
	return &e
}
func (e *IdentifierEmailOrPhoneRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "emailOrPhone":
		*e = IdentifierEmailOrPhoneRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IdentifierEmailOrPhoneRequest: %v", v)
	}
}

type IdentifierSecondaryIdentifierRequestEnum string

const (
	IdentifierSecondaryIdentifierRequestEnumUsername IdentifierSecondaryIdentifierRequestEnum = "username"
	IdentifierSecondaryIdentifierRequestEnumEmail    IdentifierSecondaryIdentifierRequestEnum = "email"
	IdentifierSecondaryIdentifierRequestEnumPhone    IdentifierSecondaryIdentifierRequestEnum = "phone"
)

func (e IdentifierSecondaryIdentifierRequestEnum) ToPointer() *IdentifierSecondaryIdentifierRequestEnum {
	return &e
}
func (e *IdentifierSecondaryIdentifierRequestEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = IdentifierSecondaryIdentifierRequestEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IdentifierSecondaryIdentifierRequestEnum: %v", v)
	}
}

type UpdateSignInExpIdentifierRequestUnionType string

const (
	UpdateSignInExpIdentifierRequestUnionTypeIdentifierSecondaryIdentifierRequestEnum UpdateSignInExpIdentifierRequestUnionType = "identifier_secondaryIdentifier_request_enum"
	UpdateSignInExpIdentifierRequestUnionTypeIdentifierEmailOrPhoneRequest            UpdateSignInExpIdentifierRequestUnionType = "identifier_EmailOrPhone_request"
)

type UpdateSignInExpIdentifierRequestUnion struct {
	IdentifierSecondaryIdentifierRequestEnum *IdentifierSecondaryIdentifierRequestEnum `queryParam:"inline"`
	IdentifierEmailOrPhoneRequest            *IdentifierEmailOrPhoneRequest            `queryParam:"inline"`

	Type UpdateSignInExpIdentifierRequestUnionType
}

func CreateUpdateSignInExpIdentifierRequestUnionIdentifierSecondaryIdentifierRequestEnum(identifierSecondaryIdentifierRequestEnum IdentifierSecondaryIdentifierRequestEnum) UpdateSignInExpIdentifierRequestUnion {
	typ := UpdateSignInExpIdentifierRequestUnionTypeIdentifierSecondaryIdentifierRequestEnum

	return UpdateSignInExpIdentifierRequestUnion{
		IdentifierSecondaryIdentifierRequestEnum: &identifierSecondaryIdentifierRequestEnum,
		Type:                                     typ,
	}
}

func CreateUpdateSignInExpIdentifierRequestUnionIdentifierEmailOrPhoneRequest(identifierEmailOrPhoneRequest IdentifierEmailOrPhoneRequest) UpdateSignInExpIdentifierRequestUnion {
	typ := UpdateSignInExpIdentifierRequestUnionTypeIdentifierEmailOrPhoneRequest

	return UpdateSignInExpIdentifierRequestUnion{
		IdentifierEmailOrPhoneRequest: &identifierEmailOrPhoneRequest,
		Type:                          typ,
	}
}

func (u *UpdateSignInExpIdentifierRequestUnion) UnmarshalJSON(data []byte) error {

	var identifierSecondaryIdentifierRequestEnum IdentifierSecondaryIdentifierRequestEnum = IdentifierSecondaryIdentifierRequestEnum("")
	if err := utils.UnmarshalJSON(data, &identifierSecondaryIdentifierRequestEnum, "", true, true); err == nil {
		u.IdentifierSecondaryIdentifierRequestEnum = &identifierSecondaryIdentifierRequestEnum
		u.Type = UpdateSignInExpIdentifierRequestUnionTypeIdentifierSecondaryIdentifierRequestEnum
		return nil
	}

	var identifierEmailOrPhoneRequest IdentifierEmailOrPhoneRequest = IdentifierEmailOrPhoneRequest("")
	if err := utils.UnmarshalJSON(data, &identifierEmailOrPhoneRequest, "", true, true); err == nil {
		u.IdentifierEmailOrPhoneRequest = &identifierEmailOrPhoneRequest
		u.Type = UpdateSignInExpIdentifierRequestUnionTypeIdentifierEmailOrPhoneRequest
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateSignInExpIdentifierRequestUnion", string(data))
}

func (u UpdateSignInExpIdentifierRequestUnion) MarshalJSON() ([]byte, error) {
	if u.IdentifierSecondaryIdentifierRequestEnum != nil {
		return utils.MarshalJSON(u.IdentifierSecondaryIdentifierRequestEnum, "", true)
	}

	if u.IdentifierEmailOrPhoneRequest != nil {
		return utils.MarshalJSON(u.IdentifierEmailOrPhoneRequest, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateSignInExpIdentifierRequestUnion: all fields are null")
}

type SecondaryIdentifierRequest struct {
	Identifier UpdateSignInExpIdentifierRequestUnion `json:"identifier"`
	Verify     *bool                                 `json:"verify,omitempty"`
}

func (o *SecondaryIdentifierRequest) GetIdentifier() UpdateSignInExpIdentifierRequestUnion {
	if o == nil {
		return UpdateSignInExpIdentifierRequestUnion{}
	}
	return o.Identifier
}

func (o *SecondaryIdentifierRequest) GetVerify() *bool {
	if o == nil {
		return nil
	}
	return o.Verify
}

// SignUpRequest - Sign-up method settings
type SignUpRequest struct {
	// Specify allowed identifiers when signing-up.
	Identifiers []SignUpIdentifierRequestEnum `json:"identifiers"`
	// Whether the user is required to set a password when signing-up.
	Password bool `json:"password"`
	// Whether the user is required to verify their email/phone when signing-up.
	Verify               bool                         `json:"verify"`
	SecondaryIdentifiers []SecondaryIdentifierRequest `json:"secondaryIdentifiers,omitempty"`
}

func (o *SignUpRequest) GetIdentifiers() []SignUpIdentifierRequestEnum {
	if o == nil {
		return []SignUpIdentifierRequestEnum{}
	}
	return o.Identifiers
}

func (o *SignUpRequest) GetPassword() bool {
	if o == nil {
		return false
	}
	return o.Password
}

func (o *SignUpRequest) GetVerify() bool {
	if o == nil {
		return false
	}
	return o.Verify
}

func (o *SignUpRequest) GetSecondaryIdentifiers() []SecondaryIdentifierRequest {
	if o == nil {
		return nil
	}
	return o.SecondaryIdentifiers
}

type SocialSignInRequest struct {
	AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
}

func (o *SocialSignInRequest) GetAutomaticAccountLinking() *bool {
	if o == nil {
		return nil
	}
	return o.AutomaticAccountLinking
}

type SignInModeRequest string

const (
	SignInModeRequestSignIn            SignInModeRequest = "SignIn"
	SignInModeRequestRegister          SignInModeRequest = "Register"
	SignInModeRequestSignInAndRegister SignInModeRequest = "SignInAndRegister"
)

func (e SignInModeRequest) ToPointer() *SignInModeRequest {
	return &e
}
func (e *SignInModeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SignIn":
		fallthrough
	case "Register":
		fallthrough
	case "SignInAndRegister":
		*e = SignInModeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SignInModeRequest: %v", v)
	}
}

type CustomUIAssetsRequest struct {
	ID        string  `json:"id"`
	CreatedAt float64 `json:"createdAt"`
}

func (o *CustomUIAssetsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CustomUIAssetsRequest) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type LengthRequest struct {
	Min *float64 `default:"8" json:"min"`
	Max *float64 `default:"256" json:"max"`
}

func (l LengthRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LengthRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LengthRequest) GetMin() *float64 {
	if o == nil {
		return nil
	}
	return o.Min
}

func (o *LengthRequest) GetMax() *float64 {
	if o == nil {
		return nil
	}
	return o.Max
}

type CharacterTypesRequest struct {
	Min *float64 `default:"1" json:"min"`
}

func (c CharacterTypesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CharacterTypesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CharacterTypesRequest) GetMin() *float64 {
	if o == nil {
		return nil
	}
	return o.Min
}

type RejectsRequest struct {
	Pwned                 *bool    `default:"true" json:"pwned"`
	RepetitionAndSequence *bool    `default:"true" json:"repetitionAndSequence"`
	UserInfo              *bool    `default:"true" json:"userInfo"`
	Words                 []string `json:"words"`
}

func (r RejectsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RejectsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RejectsRequest) GetPwned() *bool {
	if o == nil {
		return nil
	}
	return o.Pwned
}

func (o *RejectsRequest) GetRepetitionAndSequence() *bool {
	if o == nil {
		return nil
	}
	return o.RepetitionAndSequence
}

func (o *RejectsRequest) GetUserInfo() *bool {
	if o == nil {
		return nil
	}
	return o.UserInfo
}

func (o *RejectsRequest) GetWords() []string {
	if o == nil {
		return []string{}
	}
	return o.Words
}

// PasswordPolicyRequest - Password policies to adjust the password strength requirements.
type PasswordPolicyRequest struct {
	Length         *LengthRequest         `json:"length,omitempty"`
	CharacterTypes *CharacterTypesRequest `json:"characterTypes,omitempty"`
	Rejects        *RejectsRequest        `json:"rejects,omitempty"`
}

func (o *PasswordPolicyRequest) GetLength() *LengthRequest {
	if o == nil {
		return nil
	}
	return o.Length
}

func (o *PasswordPolicyRequest) GetCharacterTypes() *CharacterTypesRequest {
	if o == nil {
		return nil
	}
	return o.CharacterTypes
}

func (o *PasswordPolicyRequest) GetRejects() *RejectsRequest {
	if o == nil {
		return nil
	}
	return o.Rejects
}

type FactorRequest string

const (
	FactorRequestTotp       FactorRequest = "Totp"
	FactorRequestWebAuthn   FactorRequest = "WebAuthn"
	FactorRequestBackupCode FactorRequest = "BackupCode"
)

func (e FactorRequest) ToPointer() *FactorRequest {
	return &e
}
func (e *FactorRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Totp":
		fallthrough
	case "WebAuthn":
		fallthrough
	case "BackupCode":
		*e = FactorRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FactorRequest: %v", v)
	}
}

type PolicyRequest string

const (
	PolicyRequestUserControlled          PolicyRequest = "UserControlled"
	PolicyRequestMandatory               PolicyRequest = "Mandatory"
	PolicyRequestPromptOnlyAtSignIn      PolicyRequest = "PromptOnlyAtSignIn"
	PolicyRequestPromptAtSignInAndSignUp PolicyRequest = "PromptAtSignInAndSignUp"
	PolicyRequestNoPrompt                PolicyRequest = "NoPrompt"
)

func (e PolicyRequest) ToPointer() *PolicyRequest {
	return &e
}
func (e *PolicyRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UserControlled":
		fallthrough
	case "Mandatory":
		fallthrough
	case "PromptOnlyAtSignIn":
		fallthrough
	case "PromptAtSignInAndSignUp":
		fallthrough
	case "NoPrompt":
		*e = PolicyRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyRequest: %v", v)
	}
}

type OrganizationRequiredMfaPolicyRequest string

const (
	OrganizationRequiredMfaPolicyRequestNoPrompt  OrganizationRequiredMfaPolicyRequest = "NoPrompt"
	OrganizationRequiredMfaPolicyRequestMandatory OrganizationRequiredMfaPolicyRequest = "Mandatory"
)

func (e OrganizationRequiredMfaPolicyRequest) ToPointer() *OrganizationRequiredMfaPolicyRequest {
	return &e
}
func (e *OrganizationRequiredMfaPolicyRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NoPrompt":
		fallthrough
	case "Mandatory":
		*e = OrganizationRequiredMfaPolicyRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrganizationRequiredMfaPolicyRequest: %v", v)
	}
}

// MfaRequest - MFA settings
type MfaRequest struct {
	Factors                       []FactorRequest                       `json:"factors"`
	Policy                        PolicyRequest                         `json:"policy"`
	OrganizationRequiredMfaPolicy *OrganizationRequiredMfaPolicyRequest `json:"organizationRequiredMfaPolicy,omitempty"`
}

func (o *MfaRequest) GetFactors() []FactorRequest {
	if o == nil {
		return []FactorRequest{}
	}
	return o.Factors
}

func (o *MfaRequest) GetPolicy() PolicyRequest {
	if o == nil {
		return PolicyRequest("")
	}
	return o.Policy
}

func (o *MfaRequest) GetOrganizationRequiredMfaPolicy() *OrganizationRequiredMfaPolicyRequest {
	if o == nil {
		return nil
	}
	return o.OrganizationRequiredMfaPolicy
}

type CaptchaPolicyRequest struct {
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *CaptchaPolicyRequest) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type SentinelPolicyRequest struct {
	MaxAttempts     *float64 `json:"maxAttempts,omitempty"`
	LockoutDuration *float64 `json:"lockoutDuration,omitempty"`
}

func (o *SentinelPolicyRequest) GetMaxAttempts() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAttempts
}

func (o *SentinelPolicyRequest) GetLockoutDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.LockoutDuration
}

type UpdateSignInExpRequestBody struct {
	TenantID *string `json:"tenantId,omitempty"`
	// Specify the primary branding color for the sign-in page (both light/dark mode).
	Color    *UpdateSignInExpColorRequest    `json:"color,omitempty"`
	Branding *UpdateSignInExpBrandingRequest `json:"branding,omitempty"`
	// Control the language detection policy for the sign-in page.
	LanguageInfo       *LanguageInfoRequest       `json:"languageInfo,omitempty"`
	AgreeToTermsPolicy *AgreeToTermsPolicyRequest `json:"agreeToTermsPolicy,omitempty"`
	// Sign-in method settings
	SignIn *SignInRequest `json:"signIn,omitempty"`
	// Sign-up method settings
	SignUp       *SignUpRequest       `json:"signUp,omitempty"`
	SocialSignIn *SocialSignInRequest `json:"socialSignIn,omitempty"`
	// Specify the social sign-in connectors to display on the sign-in page.
	SocialSignInConnectorTargets []string           `json:"socialSignInConnectorTargets,omitempty"`
	SignInMode                   *SignInModeRequest `json:"signInMode,omitempty"`
	CustomCSS                    *string            `json:"customCss,omitempty"`
	// Custom content to display on experience flow pages. the page pathname will be the config key, the content will be the config value.
	CustomContent  map[string]string      `json:"customContent,omitempty"`
	CustomUIAssets *CustomUIAssetsRequest `json:"customUiAssets,omitempty"`
	// Password policies to adjust the password strength requirements.
	PasswordPolicy *PasswordPolicyRequest `json:"passwordPolicy,omitempty"`
	// MFA settings
	Mfa                 *MfaRequest            `json:"mfa,omitempty"`
	SingleSignOnEnabled *bool                  `json:"singleSignOnEnabled,omitempty"`
	CaptchaPolicy       *CaptchaPolicyRequest  `json:"captchaPolicy,omitempty"`
	SentinelPolicy      *SentinelPolicyRequest `json:"sentinelPolicy,omitempty"`
	TermsOfUseURL       *string                `json:"termsOfUseUrl,omitempty"`
	PrivacyPolicyURL    *string                `json:"privacyPolicyUrl,omitempty"`
	// The support email address to display on the error pages.
	SupportEmail *string `json:"supportEmail,omitempty"`
	// The support website URL to display on the error pages.
	SupportWebsiteURL *string `json:"supportWebsiteUrl,omitempty"`
	// The fallback URL to redirect users when the sign-in session does not exist or unknown. Client should initiate a new authentication flow after the redirection.
	UnknownSessionRedirectURL *string `json:"unknownSessionRedirectUrl,omitempty"`
}

func (o *UpdateSignInExpRequestBody) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *UpdateSignInExpRequestBody) GetColor() *UpdateSignInExpColorRequest {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *UpdateSignInExpRequestBody) GetBranding() *UpdateSignInExpBrandingRequest {
	if o == nil {
		return nil
	}
	return o.Branding
}

func (o *UpdateSignInExpRequestBody) GetLanguageInfo() *LanguageInfoRequest {
	if o == nil {
		return nil
	}
	return o.LanguageInfo
}

func (o *UpdateSignInExpRequestBody) GetAgreeToTermsPolicy() *AgreeToTermsPolicyRequest {
	if o == nil {
		return nil
	}
	return o.AgreeToTermsPolicy
}

func (o *UpdateSignInExpRequestBody) GetSignIn() *SignInRequest {
	if o == nil {
		return nil
	}
	return o.SignIn
}

func (o *UpdateSignInExpRequestBody) GetSignUp() *SignUpRequest {
	if o == nil {
		return nil
	}
	return o.SignUp
}

func (o *UpdateSignInExpRequestBody) GetSocialSignIn() *SocialSignInRequest {
	if o == nil {
		return nil
	}
	return o.SocialSignIn
}

func (o *UpdateSignInExpRequestBody) GetSocialSignInConnectorTargets() []string {
	if o == nil {
		return nil
	}
	return o.SocialSignInConnectorTargets
}

func (o *UpdateSignInExpRequestBody) GetSignInMode() *SignInModeRequest {
	if o == nil {
		return nil
	}
	return o.SignInMode
}

func (o *UpdateSignInExpRequestBody) GetCustomCSS() *string {
	if o == nil {
		return nil
	}
	return o.CustomCSS
}

func (o *UpdateSignInExpRequestBody) GetCustomContent() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomContent
}

func (o *UpdateSignInExpRequestBody) GetCustomUIAssets() *CustomUIAssetsRequest {
	if o == nil {
		return nil
	}
	return o.CustomUIAssets
}

func (o *UpdateSignInExpRequestBody) GetPasswordPolicy() *PasswordPolicyRequest {
	if o == nil {
		return nil
	}
	return o.PasswordPolicy
}

func (o *UpdateSignInExpRequestBody) GetMfa() *MfaRequest {
	if o == nil {
		return nil
	}
	return o.Mfa
}

func (o *UpdateSignInExpRequestBody) GetSingleSignOnEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.SingleSignOnEnabled
}

func (o *UpdateSignInExpRequestBody) GetCaptchaPolicy() *CaptchaPolicyRequest {
	if o == nil {
		return nil
	}
	return o.CaptchaPolicy
}

func (o *UpdateSignInExpRequestBody) GetSentinelPolicy() *SentinelPolicyRequest {
	if o == nil {
		return nil
	}
	return o.SentinelPolicy
}

func (o *UpdateSignInExpRequestBody) GetTermsOfUseURL() *string {
	if o == nil {
		return nil
	}
	return o.TermsOfUseURL
}

func (o *UpdateSignInExpRequestBody) GetPrivacyPolicyURL() *string {
	if o == nil {
		return nil
	}
	return o.PrivacyPolicyURL
}

func (o *UpdateSignInExpRequestBody) GetSupportEmail() *string {
	if o == nil {
		return nil
	}
	return o.SupportEmail
}

func (o *UpdateSignInExpRequestBody) GetSupportWebsiteURL() *string {
	if o == nil {
		return nil
	}
	return o.SupportWebsiteURL
}

func (o *UpdateSignInExpRequestBody) GetUnknownSessionRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.UnknownSessionRedirectURL
}

type UpdateSignInExpRequest struct {
	// Whether to remove unused demo social connectors. (These demo social connectors are only used during cloud user onboarding)
	RemoveUnusedDemoSocialConnector *string                    `queryParam:"style=form,explode=true,name=removeUnusedDemoSocialConnector"`
	RequestBody                     UpdateSignInExpRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateSignInExpRequest) GetRemoveUnusedDemoSocialConnector() *string {
	if o == nil {
		return nil
	}
	return o.RemoveUnusedDemoSocialConnector
}

func (o *UpdateSignInExpRequest) GetRequestBody() UpdateSignInExpRequestBody {
	if o == nil {
		return UpdateSignInExpRequestBody{}
	}
	return o.RequestBody
}

type UpdateSignInExpColorResponse struct {
	PrimaryColor      string `json:"primaryColor"`
	IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
	DarkPrimaryColor  string `json:"darkPrimaryColor"`
}

func (o *UpdateSignInExpColorResponse) GetPrimaryColor() string {
	if o == nil {
		return ""
	}
	return o.PrimaryColor
}

func (o *UpdateSignInExpColorResponse) GetIsDarkModeEnabled() bool {
	if o == nil {
		return false
	}
	return o.IsDarkModeEnabled
}

func (o *UpdateSignInExpColorResponse) GetDarkPrimaryColor() string {
	if o == nil {
		return ""
	}
	return o.DarkPrimaryColor
}

type UpdateSignInExpBrandingResponse struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *UpdateSignInExpBrandingResponse) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *UpdateSignInExpBrandingResponse) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *UpdateSignInExpBrandingResponse) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *UpdateSignInExpBrandingResponse) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

type UpdateSignInExpFallbackLanguageResponse string

const (
	UpdateSignInExpFallbackLanguageResponseAfZa  UpdateSignInExpFallbackLanguageResponse = "af-ZA"
	UpdateSignInExpFallbackLanguageResponseAmEt  UpdateSignInExpFallbackLanguageResponse = "am-ET"
	UpdateSignInExpFallbackLanguageResponseAr    UpdateSignInExpFallbackLanguageResponse = "ar"
	UpdateSignInExpFallbackLanguageResponseArAr  UpdateSignInExpFallbackLanguageResponse = "ar-AR"
	UpdateSignInExpFallbackLanguageResponseAsIn  UpdateSignInExpFallbackLanguageResponse = "as-IN"
	UpdateSignInExpFallbackLanguageResponseAzAz  UpdateSignInExpFallbackLanguageResponse = "az-AZ"
	UpdateSignInExpFallbackLanguageResponseBeBy  UpdateSignInExpFallbackLanguageResponse = "be-BY"
	UpdateSignInExpFallbackLanguageResponseBgBg  UpdateSignInExpFallbackLanguageResponse = "bg-BG"
	UpdateSignInExpFallbackLanguageResponseBnIn  UpdateSignInExpFallbackLanguageResponse = "bn-IN"
	UpdateSignInExpFallbackLanguageResponseBrFr  UpdateSignInExpFallbackLanguageResponse = "br-FR"
	UpdateSignInExpFallbackLanguageResponseBsBa  UpdateSignInExpFallbackLanguageResponse = "bs-BA"
	UpdateSignInExpFallbackLanguageResponseCaEs  UpdateSignInExpFallbackLanguageResponse = "ca-ES"
	UpdateSignInExpFallbackLanguageResponseCbIq  UpdateSignInExpFallbackLanguageResponse = "cb-IQ"
	UpdateSignInExpFallbackLanguageResponseCoFr  UpdateSignInExpFallbackLanguageResponse = "co-FR"
	UpdateSignInExpFallbackLanguageResponseCsCz  UpdateSignInExpFallbackLanguageResponse = "cs-CZ"
	UpdateSignInExpFallbackLanguageResponseCxPh  UpdateSignInExpFallbackLanguageResponse = "cx-PH"
	UpdateSignInExpFallbackLanguageResponseCyGb  UpdateSignInExpFallbackLanguageResponse = "cy-GB"
	UpdateSignInExpFallbackLanguageResponseDaDk  UpdateSignInExpFallbackLanguageResponse = "da-DK"
	UpdateSignInExpFallbackLanguageResponseDe    UpdateSignInExpFallbackLanguageResponse = "de"
	UpdateSignInExpFallbackLanguageResponseDeDe  UpdateSignInExpFallbackLanguageResponse = "de-DE"
	UpdateSignInExpFallbackLanguageResponseElGr  UpdateSignInExpFallbackLanguageResponse = "el-GR"
	UpdateSignInExpFallbackLanguageResponseEn    UpdateSignInExpFallbackLanguageResponse = "en"
	UpdateSignInExpFallbackLanguageResponseEnGb  UpdateSignInExpFallbackLanguageResponse = "en-GB"
	UpdateSignInExpFallbackLanguageResponseEnUs  UpdateSignInExpFallbackLanguageResponse = "en-US"
	UpdateSignInExpFallbackLanguageResponseEoEo  UpdateSignInExpFallbackLanguageResponse = "eo-EO"
	UpdateSignInExpFallbackLanguageResponseEs    UpdateSignInExpFallbackLanguageResponse = "es"
	UpdateSignInExpFallbackLanguageResponseEsEs  UpdateSignInExpFallbackLanguageResponse = "es-ES"
	UpdateSignInExpFallbackLanguageResponseEs419 UpdateSignInExpFallbackLanguageResponse = "es-419"
	UpdateSignInExpFallbackLanguageResponseEtEe  UpdateSignInExpFallbackLanguageResponse = "et-EE"
	UpdateSignInExpFallbackLanguageResponseEuEs  UpdateSignInExpFallbackLanguageResponse = "eu-ES"
	UpdateSignInExpFallbackLanguageResponseFaIr  UpdateSignInExpFallbackLanguageResponse = "fa-IR"
	UpdateSignInExpFallbackLanguageResponseFfNg  UpdateSignInExpFallbackLanguageResponse = "ff-NG"
	UpdateSignInExpFallbackLanguageResponseFi    UpdateSignInExpFallbackLanguageResponse = "fi"
	UpdateSignInExpFallbackLanguageResponseFiFi  UpdateSignInExpFallbackLanguageResponse = "fi-FI"
	UpdateSignInExpFallbackLanguageResponseFoFo  UpdateSignInExpFallbackLanguageResponse = "fo-FO"
	UpdateSignInExpFallbackLanguageResponseFr    UpdateSignInExpFallbackLanguageResponse = "fr"
	UpdateSignInExpFallbackLanguageResponseFrCa  UpdateSignInExpFallbackLanguageResponse = "fr-CA"
	UpdateSignInExpFallbackLanguageResponseFrFr  UpdateSignInExpFallbackLanguageResponse = "fr-FR"
	UpdateSignInExpFallbackLanguageResponseFyNl  UpdateSignInExpFallbackLanguageResponse = "fy-NL"
	UpdateSignInExpFallbackLanguageResponseGaIe  UpdateSignInExpFallbackLanguageResponse = "ga-IE"
	UpdateSignInExpFallbackLanguageResponseGlEs  UpdateSignInExpFallbackLanguageResponse = "gl-ES"
	UpdateSignInExpFallbackLanguageResponseGnPy  UpdateSignInExpFallbackLanguageResponse = "gn-PY"
	UpdateSignInExpFallbackLanguageResponseGuIn  UpdateSignInExpFallbackLanguageResponse = "gu-IN"
	UpdateSignInExpFallbackLanguageResponseHaNg  UpdateSignInExpFallbackLanguageResponse = "ha-NG"
	UpdateSignInExpFallbackLanguageResponseHeIl  UpdateSignInExpFallbackLanguageResponse = "he-IL"
	UpdateSignInExpFallbackLanguageResponseHiIn  UpdateSignInExpFallbackLanguageResponse = "hi-IN"
	UpdateSignInExpFallbackLanguageResponseHrHr  UpdateSignInExpFallbackLanguageResponse = "hr-HR"
	UpdateSignInExpFallbackLanguageResponseHtHt  UpdateSignInExpFallbackLanguageResponse = "ht-HT"
	UpdateSignInExpFallbackLanguageResponseHuHu  UpdateSignInExpFallbackLanguageResponse = "hu-HU"
	UpdateSignInExpFallbackLanguageResponseHyAm  UpdateSignInExpFallbackLanguageResponse = "hy-AM"
	UpdateSignInExpFallbackLanguageResponseIDID  UpdateSignInExpFallbackLanguageResponse = "id-ID"
	UpdateSignInExpFallbackLanguageResponseIkUs  UpdateSignInExpFallbackLanguageResponse = "ik-US"
	UpdateSignInExpFallbackLanguageResponseIsIs  UpdateSignInExpFallbackLanguageResponse = "is-IS"
	UpdateSignInExpFallbackLanguageResponseIt    UpdateSignInExpFallbackLanguageResponse = "it"
	UpdateSignInExpFallbackLanguageResponseItIt  UpdateSignInExpFallbackLanguageResponse = "it-IT"
	UpdateSignInExpFallbackLanguageResponseIuCa  UpdateSignInExpFallbackLanguageResponse = "iu-CA"
	UpdateSignInExpFallbackLanguageResponseJa    UpdateSignInExpFallbackLanguageResponse = "ja"
	UpdateSignInExpFallbackLanguageResponseJaJp  UpdateSignInExpFallbackLanguageResponse = "ja-JP"
	UpdateSignInExpFallbackLanguageResponseJaKs  UpdateSignInExpFallbackLanguageResponse = "ja-KS"
	UpdateSignInExpFallbackLanguageResponseJvID  UpdateSignInExpFallbackLanguageResponse = "jv-ID"
	UpdateSignInExpFallbackLanguageResponseKaGe  UpdateSignInExpFallbackLanguageResponse = "ka-GE"
	UpdateSignInExpFallbackLanguageResponseKkKz  UpdateSignInExpFallbackLanguageResponse = "kk-KZ"
	UpdateSignInExpFallbackLanguageResponseKmKh  UpdateSignInExpFallbackLanguageResponse = "km-KH"
	UpdateSignInExpFallbackLanguageResponseKnIn  UpdateSignInExpFallbackLanguageResponse = "kn-IN"
	UpdateSignInExpFallbackLanguageResponseKo    UpdateSignInExpFallbackLanguageResponse = "ko"
	UpdateSignInExpFallbackLanguageResponseKoKr  UpdateSignInExpFallbackLanguageResponse = "ko-KR"
	UpdateSignInExpFallbackLanguageResponseKuTr  UpdateSignInExpFallbackLanguageResponse = "ku-TR"
	UpdateSignInExpFallbackLanguageResponseKyKg  UpdateSignInExpFallbackLanguageResponse = "ky-KG"
	UpdateSignInExpFallbackLanguageResponseLoLa  UpdateSignInExpFallbackLanguageResponse = "lo-LA"
	UpdateSignInExpFallbackLanguageResponseLtLt  UpdateSignInExpFallbackLanguageResponse = "lt-LT"
	UpdateSignInExpFallbackLanguageResponseLvLv  UpdateSignInExpFallbackLanguageResponse = "lv-LV"
	UpdateSignInExpFallbackLanguageResponseMgMg  UpdateSignInExpFallbackLanguageResponse = "mg-MG"
	UpdateSignInExpFallbackLanguageResponseMkMk  UpdateSignInExpFallbackLanguageResponse = "mk-MK"
	UpdateSignInExpFallbackLanguageResponseMlIn  UpdateSignInExpFallbackLanguageResponse = "ml-IN"
	UpdateSignInExpFallbackLanguageResponseMnMn  UpdateSignInExpFallbackLanguageResponse = "mn-MN"
	UpdateSignInExpFallbackLanguageResponseMrIn  UpdateSignInExpFallbackLanguageResponse = "mr-IN"
	UpdateSignInExpFallbackLanguageResponseMsMy  UpdateSignInExpFallbackLanguageResponse = "ms-MY"
	UpdateSignInExpFallbackLanguageResponseMtMt  UpdateSignInExpFallbackLanguageResponse = "mt-MT"
	UpdateSignInExpFallbackLanguageResponseMyMm  UpdateSignInExpFallbackLanguageResponse = "my-MM"
	UpdateSignInExpFallbackLanguageResponseNbNo  UpdateSignInExpFallbackLanguageResponse = "nb-NO"
	UpdateSignInExpFallbackLanguageResponseNeNp  UpdateSignInExpFallbackLanguageResponse = "ne-NP"
	UpdateSignInExpFallbackLanguageResponseNl    UpdateSignInExpFallbackLanguageResponse = "nl"
	UpdateSignInExpFallbackLanguageResponseNlBe  UpdateSignInExpFallbackLanguageResponse = "nl-BE"
	UpdateSignInExpFallbackLanguageResponseNlNl  UpdateSignInExpFallbackLanguageResponse = "nl-NL"
	UpdateSignInExpFallbackLanguageResponseNnNo  UpdateSignInExpFallbackLanguageResponse = "nn-NO"
	UpdateSignInExpFallbackLanguageResponseOrIn  UpdateSignInExpFallbackLanguageResponse = "or-IN"
	UpdateSignInExpFallbackLanguageResponsePaIn  UpdateSignInExpFallbackLanguageResponse = "pa-IN"
	UpdateSignInExpFallbackLanguageResponsePlPl  UpdateSignInExpFallbackLanguageResponse = "pl-PL"
	UpdateSignInExpFallbackLanguageResponsePsAf  UpdateSignInExpFallbackLanguageResponse = "ps-AF"
	UpdateSignInExpFallbackLanguageResponsePt    UpdateSignInExpFallbackLanguageResponse = "pt"
	UpdateSignInExpFallbackLanguageResponsePtBr  UpdateSignInExpFallbackLanguageResponse = "pt-BR"
	UpdateSignInExpFallbackLanguageResponsePtPt  UpdateSignInExpFallbackLanguageResponse = "pt-PT"
	UpdateSignInExpFallbackLanguageResponseRoRo  UpdateSignInExpFallbackLanguageResponse = "ro-RO"
	UpdateSignInExpFallbackLanguageResponseRu    UpdateSignInExpFallbackLanguageResponse = "ru"
	UpdateSignInExpFallbackLanguageResponseRuRu  UpdateSignInExpFallbackLanguageResponse = "ru-RU"
	UpdateSignInExpFallbackLanguageResponseRwRw  UpdateSignInExpFallbackLanguageResponse = "rw-RW"
	UpdateSignInExpFallbackLanguageResponseScIt  UpdateSignInExpFallbackLanguageResponse = "sc-IT"
	UpdateSignInExpFallbackLanguageResponseSiLk  UpdateSignInExpFallbackLanguageResponse = "si-LK"
	UpdateSignInExpFallbackLanguageResponseSkSk  UpdateSignInExpFallbackLanguageResponse = "sk-SK"
	UpdateSignInExpFallbackLanguageResponseSlSi  UpdateSignInExpFallbackLanguageResponse = "sl-SI"
	UpdateSignInExpFallbackLanguageResponseSnZw  UpdateSignInExpFallbackLanguageResponse = "sn-ZW"
	UpdateSignInExpFallbackLanguageResponseSqAl  UpdateSignInExpFallbackLanguageResponse = "sq-AL"
	UpdateSignInExpFallbackLanguageResponseSrRs  UpdateSignInExpFallbackLanguageResponse = "sr-RS"
	UpdateSignInExpFallbackLanguageResponseSv    UpdateSignInExpFallbackLanguageResponse = "sv"
	UpdateSignInExpFallbackLanguageResponseSvSe  UpdateSignInExpFallbackLanguageResponse = "sv-SE"
	UpdateSignInExpFallbackLanguageResponseSwKe  UpdateSignInExpFallbackLanguageResponse = "sw-KE"
	UpdateSignInExpFallbackLanguageResponseSySy  UpdateSignInExpFallbackLanguageResponse = "sy-SY"
	UpdateSignInExpFallbackLanguageResponseSzPl  UpdateSignInExpFallbackLanguageResponse = "sz-PL"
	UpdateSignInExpFallbackLanguageResponseTaIn  UpdateSignInExpFallbackLanguageResponse = "ta-IN"
	UpdateSignInExpFallbackLanguageResponseTeIn  UpdateSignInExpFallbackLanguageResponse = "te-IN"
	UpdateSignInExpFallbackLanguageResponseTgTj  UpdateSignInExpFallbackLanguageResponse = "tg-TJ"
	UpdateSignInExpFallbackLanguageResponseTh    UpdateSignInExpFallbackLanguageResponse = "th"
	UpdateSignInExpFallbackLanguageResponseThTh  UpdateSignInExpFallbackLanguageResponse = "th-TH"
	UpdateSignInExpFallbackLanguageResponseTlPh  UpdateSignInExpFallbackLanguageResponse = "tl-PH"
	UpdateSignInExpFallbackLanguageResponseTr    UpdateSignInExpFallbackLanguageResponse = "tr"
	UpdateSignInExpFallbackLanguageResponseTrTr  UpdateSignInExpFallbackLanguageResponse = "tr-TR"
	UpdateSignInExpFallbackLanguageResponseTtRu  UpdateSignInExpFallbackLanguageResponse = "tt-RU"
	UpdateSignInExpFallbackLanguageResponseTzMa  UpdateSignInExpFallbackLanguageResponse = "tz-MA"
	UpdateSignInExpFallbackLanguageResponseUkUa  UpdateSignInExpFallbackLanguageResponse = "uk-UA"
	UpdateSignInExpFallbackLanguageResponseUrPk  UpdateSignInExpFallbackLanguageResponse = "ur-PK"
	UpdateSignInExpFallbackLanguageResponseUzUz  UpdateSignInExpFallbackLanguageResponse = "uz-UZ"
	UpdateSignInExpFallbackLanguageResponseViVn  UpdateSignInExpFallbackLanguageResponse = "vi-VN"
	UpdateSignInExpFallbackLanguageResponseZh    UpdateSignInExpFallbackLanguageResponse = "zh"
	UpdateSignInExpFallbackLanguageResponseZhCn  UpdateSignInExpFallbackLanguageResponse = "zh-CN"
	UpdateSignInExpFallbackLanguageResponseZhHk  UpdateSignInExpFallbackLanguageResponse = "zh-HK"
	UpdateSignInExpFallbackLanguageResponseZhMo  UpdateSignInExpFallbackLanguageResponse = "zh-MO"
	UpdateSignInExpFallbackLanguageResponseZhTw  UpdateSignInExpFallbackLanguageResponse = "zh-TW"
	UpdateSignInExpFallbackLanguageResponseZzTr  UpdateSignInExpFallbackLanguageResponse = "zz-TR"
)

func (e UpdateSignInExpFallbackLanguageResponse) ToPointer() *UpdateSignInExpFallbackLanguageResponse {
	return &e
}
func (e *UpdateSignInExpFallbackLanguageResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "af-ZA":
		fallthrough
	case "am-ET":
		fallthrough
	case "ar":
		fallthrough
	case "ar-AR":
		fallthrough
	case "as-IN":
		fallthrough
	case "az-AZ":
		fallthrough
	case "be-BY":
		fallthrough
	case "bg-BG":
		fallthrough
	case "bn-IN":
		fallthrough
	case "br-FR":
		fallthrough
	case "bs-BA":
		fallthrough
	case "ca-ES":
		fallthrough
	case "cb-IQ":
		fallthrough
	case "co-FR":
		fallthrough
	case "cs-CZ":
		fallthrough
	case "cx-PH":
		fallthrough
	case "cy-GB":
		fallthrough
	case "da-DK":
		fallthrough
	case "de":
		fallthrough
	case "de-DE":
		fallthrough
	case "el-GR":
		fallthrough
	case "en":
		fallthrough
	case "en-GB":
		fallthrough
	case "en-US":
		fallthrough
	case "eo-EO":
		fallthrough
	case "es":
		fallthrough
	case "es-ES":
		fallthrough
	case "es-419":
		fallthrough
	case "et-EE":
		fallthrough
	case "eu-ES":
		fallthrough
	case "fa-IR":
		fallthrough
	case "ff-NG":
		fallthrough
	case "fi":
		fallthrough
	case "fi-FI":
		fallthrough
	case "fo-FO":
		fallthrough
	case "fr":
		fallthrough
	case "fr-CA":
		fallthrough
	case "fr-FR":
		fallthrough
	case "fy-NL":
		fallthrough
	case "ga-IE":
		fallthrough
	case "gl-ES":
		fallthrough
	case "gn-PY":
		fallthrough
	case "gu-IN":
		fallthrough
	case "ha-NG":
		fallthrough
	case "he-IL":
		fallthrough
	case "hi-IN":
		fallthrough
	case "hr-HR":
		fallthrough
	case "ht-HT":
		fallthrough
	case "hu-HU":
		fallthrough
	case "hy-AM":
		fallthrough
	case "id-ID":
		fallthrough
	case "ik-US":
		fallthrough
	case "is-IS":
		fallthrough
	case "it":
		fallthrough
	case "it-IT":
		fallthrough
	case "iu-CA":
		fallthrough
	case "ja":
		fallthrough
	case "ja-JP":
		fallthrough
	case "ja-KS":
		fallthrough
	case "jv-ID":
		fallthrough
	case "ka-GE":
		fallthrough
	case "kk-KZ":
		fallthrough
	case "km-KH":
		fallthrough
	case "kn-IN":
		fallthrough
	case "ko":
		fallthrough
	case "ko-KR":
		fallthrough
	case "ku-TR":
		fallthrough
	case "ky-KG":
		fallthrough
	case "lo-LA":
		fallthrough
	case "lt-LT":
		fallthrough
	case "lv-LV":
		fallthrough
	case "mg-MG":
		fallthrough
	case "mk-MK":
		fallthrough
	case "ml-IN":
		fallthrough
	case "mn-MN":
		fallthrough
	case "mr-IN":
		fallthrough
	case "ms-MY":
		fallthrough
	case "mt-MT":
		fallthrough
	case "my-MM":
		fallthrough
	case "nb-NO":
		fallthrough
	case "ne-NP":
		fallthrough
	case "nl":
		fallthrough
	case "nl-BE":
		fallthrough
	case "nl-NL":
		fallthrough
	case "nn-NO":
		fallthrough
	case "or-IN":
		fallthrough
	case "pa-IN":
		fallthrough
	case "pl-PL":
		fallthrough
	case "ps-AF":
		fallthrough
	case "pt":
		fallthrough
	case "pt-BR":
		fallthrough
	case "pt-PT":
		fallthrough
	case "ro-RO":
		fallthrough
	case "ru":
		fallthrough
	case "ru-RU":
		fallthrough
	case "rw-RW":
		fallthrough
	case "sc-IT":
		fallthrough
	case "si-LK":
		fallthrough
	case "sk-SK":
		fallthrough
	case "sl-SI":
		fallthrough
	case "sn-ZW":
		fallthrough
	case "sq-AL":
		fallthrough
	case "sr-RS":
		fallthrough
	case "sv":
		fallthrough
	case "sv-SE":
		fallthrough
	case "sw-KE":
		fallthrough
	case "sy-SY":
		fallthrough
	case "sz-PL":
		fallthrough
	case "ta-IN":
		fallthrough
	case "te-IN":
		fallthrough
	case "tg-TJ":
		fallthrough
	case "th":
		fallthrough
	case "th-TH":
		fallthrough
	case "tl-PH":
		fallthrough
	case "tr":
		fallthrough
	case "tr-TR":
		fallthrough
	case "tt-RU":
		fallthrough
	case "tz-MA":
		fallthrough
	case "uk-UA":
		fallthrough
	case "ur-PK":
		fallthrough
	case "uz-UZ":
		fallthrough
	case "vi-VN":
		fallthrough
	case "zh":
		fallthrough
	case "zh-CN":
		fallthrough
	case "zh-HK":
		fallthrough
	case "zh-MO":
		fallthrough
	case "zh-TW":
		fallthrough
	case "zz-TR":
		*e = UpdateSignInExpFallbackLanguageResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignInExpFallbackLanguageResponse: %v", v)
	}
}

type UpdateSignInExpLanguageInfoResponse struct {
	AutoDetect       bool                                    `json:"autoDetect"`
	FallbackLanguage UpdateSignInExpFallbackLanguageResponse `json:"fallbackLanguage"`
}

func (o *UpdateSignInExpLanguageInfoResponse) GetAutoDetect() bool {
	if o == nil {
		return false
	}
	return o.AutoDetect
}

func (o *UpdateSignInExpLanguageInfoResponse) GetFallbackLanguage() UpdateSignInExpFallbackLanguageResponse {
	if o == nil {
		return UpdateSignInExpFallbackLanguageResponse("")
	}
	return o.FallbackLanguage
}

type UpdateSignInExpAgreeToTermsPolicyResponse string

const (
	UpdateSignInExpAgreeToTermsPolicyResponseAutomatic              UpdateSignInExpAgreeToTermsPolicyResponse = "Automatic"
	UpdateSignInExpAgreeToTermsPolicyResponseManualRegistrationOnly UpdateSignInExpAgreeToTermsPolicyResponse = "ManualRegistrationOnly"
	UpdateSignInExpAgreeToTermsPolicyResponseManual                 UpdateSignInExpAgreeToTermsPolicyResponse = "Manual"
)

func (e UpdateSignInExpAgreeToTermsPolicyResponse) ToPointer() *UpdateSignInExpAgreeToTermsPolicyResponse {
	return &e
}
func (e *UpdateSignInExpAgreeToTermsPolicyResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Automatic":
		fallthrough
	case "ManualRegistrationOnly":
		fallthrough
	case "Manual":
		*e = UpdateSignInExpAgreeToTermsPolicyResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignInExpAgreeToTermsPolicyResponse: %v", v)
	}
}

type UpdateSignInExpMethodIdentifierResponse string

const (
	UpdateSignInExpMethodIdentifierResponseUsername UpdateSignInExpMethodIdentifierResponse = "username"
	UpdateSignInExpMethodIdentifierResponseEmail    UpdateSignInExpMethodIdentifierResponse = "email"
	UpdateSignInExpMethodIdentifierResponsePhone    UpdateSignInExpMethodIdentifierResponse = "phone"
)

func (e UpdateSignInExpMethodIdentifierResponse) ToPointer() *UpdateSignInExpMethodIdentifierResponse {
	return &e
}
func (e *UpdateSignInExpMethodIdentifierResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = UpdateSignInExpMethodIdentifierResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignInExpMethodIdentifierResponse: %v", v)
	}
}

type UpdateSignInExpMethodResponse struct {
	Identifier        UpdateSignInExpMethodIdentifierResponse `json:"identifier"`
	Password          bool                                    `json:"password"`
	VerificationCode  bool                                    `json:"verificationCode"`
	IsPasswordPrimary bool                                    `json:"isPasswordPrimary"`
}

func (o *UpdateSignInExpMethodResponse) GetIdentifier() UpdateSignInExpMethodIdentifierResponse {
	if o == nil {
		return UpdateSignInExpMethodIdentifierResponse("")
	}
	return o.Identifier
}

func (o *UpdateSignInExpMethodResponse) GetPassword() bool {
	if o == nil {
		return false
	}
	return o.Password
}

func (o *UpdateSignInExpMethodResponse) GetVerificationCode() bool {
	if o == nil {
		return false
	}
	return o.VerificationCode
}

func (o *UpdateSignInExpMethodResponse) GetIsPasswordPrimary() bool {
	if o == nil {
		return false
	}
	return o.IsPasswordPrimary
}

type UpdateSignInExpSignInResponse struct {
	Methods []UpdateSignInExpMethodResponse `json:"methods"`
}

func (o *UpdateSignInExpSignInResponse) GetMethods() []UpdateSignInExpMethodResponse {
	if o == nil {
		return []UpdateSignInExpMethodResponse{}
	}
	return o.Methods
}

type UpdateSignInExpSignUpIdentifierResponseEnum string

const (
	UpdateSignInExpSignUpIdentifierResponseEnumUsername UpdateSignInExpSignUpIdentifierResponseEnum = "username"
	UpdateSignInExpSignUpIdentifierResponseEnumEmail    UpdateSignInExpSignUpIdentifierResponseEnum = "email"
	UpdateSignInExpSignUpIdentifierResponseEnumPhone    UpdateSignInExpSignUpIdentifierResponseEnum = "phone"
)

func (e UpdateSignInExpSignUpIdentifierResponseEnum) ToPointer() *UpdateSignInExpSignUpIdentifierResponseEnum {
	return &e
}
func (e *UpdateSignInExpSignUpIdentifierResponseEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = UpdateSignInExpSignUpIdentifierResponseEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignInExpSignUpIdentifierResponseEnum: %v", v)
	}
}

type UpdateSignInExpIdentifierEmailOrPhoneResponse string

const (
	UpdateSignInExpIdentifierEmailOrPhoneResponseEmailOrPhone UpdateSignInExpIdentifierEmailOrPhoneResponse = "emailOrPhone"
)

func (e UpdateSignInExpIdentifierEmailOrPhoneResponse) ToPointer() *UpdateSignInExpIdentifierEmailOrPhoneResponse {
	return &e
}
func (e *UpdateSignInExpIdentifierEmailOrPhoneResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "emailOrPhone":
		*e = UpdateSignInExpIdentifierEmailOrPhoneResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignInExpIdentifierEmailOrPhoneResponse: %v", v)
	}
}

type UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum string

const (
	UpdateSignInExpIdentifierSecondaryIdentifierResponseEnumUsername UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum = "username"
	UpdateSignInExpIdentifierSecondaryIdentifierResponseEnumEmail    UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum = "email"
	UpdateSignInExpIdentifierSecondaryIdentifierResponseEnumPhone    UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum = "phone"
)

func (e UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum) ToPointer() *UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum {
	return &e
}
func (e *UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		*e = UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum: %v", v)
	}
}

type UpdateSignInExpIdentifierResponseUnionType string

const (
	UpdateSignInExpIdentifierResponseUnionTypeUpdateSignInExpIdentifierSecondaryIdentifierResponseEnum UpdateSignInExpIdentifierResponseUnionType = "UpdateSignInExp_identifier_secondaryIdentifier_response_enum"
	UpdateSignInExpIdentifierResponseUnionTypeUpdateSignInExpIdentifierEmailOrPhoneResponse            UpdateSignInExpIdentifierResponseUnionType = "UpdateSignInExp_identifier_EmailOrPhone_response"
)

type UpdateSignInExpIdentifierResponseUnion struct {
	UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum *UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum `queryParam:"inline"`
	UpdateSignInExpIdentifierEmailOrPhoneResponse            *UpdateSignInExpIdentifierEmailOrPhoneResponse            `queryParam:"inline"`

	Type UpdateSignInExpIdentifierResponseUnionType
}

func CreateUpdateSignInExpIdentifierResponseUnionUpdateSignInExpIdentifierSecondaryIdentifierResponseEnum(updateSignInExpIdentifierSecondaryIdentifierResponseEnum UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum) UpdateSignInExpIdentifierResponseUnion {
	typ := UpdateSignInExpIdentifierResponseUnionTypeUpdateSignInExpIdentifierSecondaryIdentifierResponseEnum

	return UpdateSignInExpIdentifierResponseUnion{
		UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum: &updateSignInExpIdentifierSecondaryIdentifierResponseEnum,
		Type: typ,
	}
}

func CreateUpdateSignInExpIdentifierResponseUnionUpdateSignInExpIdentifierEmailOrPhoneResponse(updateSignInExpIdentifierEmailOrPhoneResponse UpdateSignInExpIdentifierEmailOrPhoneResponse) UpdateSignInExpIdentifierResponseUnion {
	typ := UpdateSignInExpIdentifierResponseUnionTypeUpdateSignInExpIdentifierEmailOrPhoneResponse

	return UpdateSignInExpIdentifierResponseUnion{
		UpdateSignInExpIdentifierEmailOrPhoneResponse: &updateSignInExpIdentifierEmailOrPhoneResponse,
		Type: typ,
	}
}

func (u *UpdateSignInExpIdentifierResponseUnion) UnmarshalJSON(data []byte) error {

	var updateSignInExpIdentifierSecondaryIdentifierResponseEnum UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum = UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum("")
	if err := utils.UnmarshalJSON(data, &updateSignInExpIdentifierSecondaryIdentifierResponseEnum, "", true, true); err == nil {
		u.UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum = &updateSignInExpIdentifierSecondaryIdentifierResponseEnum
		u.Type = UpdateSignInExpIdentifierResponseUnionTypeUpdateSignInExpIdentifierSecondaryIdentifierResponseEnum
		return nil
	}

	var updateSignInExpIdentifierEmailOrPhoneResponse UpdateSignInExpIdentifierEmailOrPhoneResponse = UpdateSignInExpIdentifierEmailOrPhoneResponse("")
	if err := utils.UnmarshalJSON(data, &updateSignInExpIdentifierEmailOrPhoneResponse, "", true, true); err == nil {
		u.UpdateSignInExpIdentifierEmailOrPhoneResponse = &updateSignInExpIdentifierEmailOrPhoneResponse
		u.Type = UpdateSignInExpIdentifierResponseUnionTypeUpdateSignInExpIdentifierEmailOrPhoneResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateSignInExpIdentifierResponseUnion", string(data))
}

func (u UpdateSignInExpIdentifierResponseUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum != nil {
		return utils.MarshalJSON(u.UpdateSignInExpIdentifierSecondaryIdentifierResponseEnum, "", true)
	}

	if u.UpdateSignInExpIdentifierEmailOrPhoneResponse != nil {
		return utils.MarshalJSON(u.UpdateSignInExpIdentifierEmailOrPhoneResponse, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateSignInExpIdentifierResponseUnion: all fields are null")
}

type UpdateSignInExpSecondaryIdentifierResponse struct {
	Identifier UpdateSignInExpIdentifierResponseUnion `json:"identifier"`
	Verify     *bool                                  `json:"verify,omitempty"`
}

func (o *UpdateSignInExpSecondaryIdentifierResponse) GetIdentifier() UpdateSignInExpIdentifierResponseUnion {
	if o == nil {
		return UpdateSignInExpIdentifierResponseUnion{}
	}
	return o.Identifier
}

func (o *UpdateSignInExpSecondaryIdentifierResponse) GetVerify() *bool {
	if o == nil {
		return nil
	}
	return o.Verify
}

type UpdateSignInExpSignUpResponse struct {
	Identifiers          []UpdateSignInExpSignUpIdentifierResponseEnum `json:"identifiers"`
	Password             bool                                          `json:"password"`
	Verify               bool                                          `json:"verify"`
	SecondaryIdentifiers []UpdateSignInExpSecondaryIdentifierResponse  `json:"secondaryIdentifiers,omitempty"`
}

func (o *UpdateSignInExpSignUpResponse) GetIdentifiers() []UpdateSignInExpSignUpIdentifierResponseEnum {
	if o == nil {
		return []UpdateSignInExpSignUpIdentifierResponseEnum{}
	}
	return o.Identifiers
}

func (o *UpdateSignInExpSignUpResponse) GetPassword() bool {
	if o == nil {
		return false
	}
	return o.Password
}

func (o *UpdateSignInExpSignUpResponse) GetVerify() bool {
	if o == nil {
		return false
	}
	return o.Verify
}

func (o *UpdateSignInExpSignUpResponse) GetSecondaryIdentifiers() []UpdateSignInExpSecondaryIdentifierResponse {
	if o == nil {
		return nil
	}
	return o.SecondaryIdentifiers
}

type UpdateSignInExpSocialSignInResponse struct {
	AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
}

func (o *UpdateSignInExpSocialSignInResponse) GetAutomaticAccountLinking() *bool {
	if o == nil {
		return nil
	}
	return o.AutomaticAccountLinking
}

type UpdateSignInExpSignInModeResponse string

const (
	UpdateSignInExpSignInModeResponseSignIn            UpdateSignInExpSignInModeResponse = "SignIn"
	UpdateSignInExpSignInModeResponseRegister          UpdateSignInExpSignInModeResponse = "Register"
	UpdateSignInExpSignInModeResponseSignInAndRegister UpdateSignInExpSignInModeResponse = "SignInAndRegister"
)

func (e UpdateSignInExpSignInModeResponse) ToPointer() *UpdateSignInExpSignInModeResponse {
	return &e
}
func (e *UpdateSignInExpSignInModeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SignIn":
		fallthrough
	case "Register":
		fallthrough
	case "SignInAndRegister":
		*e = UpdateSignInExpSignInModeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignInExpSignInModeResponse: %v", v)
	}
}

type UpdateSignInExpCustomUIAssetsResponse struct {
	ID        string  `json:"id"`
	CreatedAt float64 `json:"createdAt"`
}

func (o *UpdateSignInExpCustomUIAssetsResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateSignInExpCustomUIAssetsResponse) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type UpdateSignInExpLengthResponse struct {
	Min *float64 `default:"8" json:"min"`
	Max *float64 `default:"256" json:"max"`
}

func (u UpdateSignInExpLengthResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateSignInExpLengthResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateSignInExpLengthResponse) GetMin() *float64 {
	if o == nil {
		return nil
	}
	return o.Min
}

func (o *UpdateSignInExpLengthResponse) GetMax() *float64 {
	if o == nil {
		return nil
	}
	return o.Max
}

type UpdateSignInExpCharacterTypesResponse struct {
	Min *float64 `default:"1" json:"min"`
}

func (u UpdateSignInExpCharacterTypesResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateSignInExpCharacterTypesResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateSignInExpCharacterTypesResponse) GetMin() *float64 {
	if o == nil {
		return nil
	}
	return o.Min
}

type UpdateSignInExpRejectsResponse struct {
	Pwned                 *bool    `default:"true" json:"pwned"`
	RepetitionAndSequence *bool    `default:"true" json:"repetitionAndSequence"`
	UserInfo              *bool    `default:"true" json:"userInfo"`
	Words                 []string `json:"words"`
}

func (u UpdateSignInExpRejectsResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateSignInExpRejectsResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateSignInExpRejectsResponse) GetPwned() *bool {
	if o == nil {
		return nil
	}
	return o.Pwned
}

func (o *UpdateSignInExpRejectsResponse) GetRepetitionAndSequence() *bool {
	if o == nil {
		return nil
	}
	return o.RepetitionAndSequence
}

func (o *UpdateSignInExpRejectsResponse) GetUserInfo() *bool {
	if o == nil {
		return nil
	}
	return o.UserInfo
}

func (o *UpdateSignInExpRejectsResponse) GetWords() []string {
	if o == nil {
		return []string{}
	}
	return o.Words
}

type UpdateSignInExpPasswordPolicyResponse struct {
	Length         *UpdateSignInExpLengthResponse         `json:"length,omitempty"`
	CharacterTypes *UpdateSignInExpCharacterTypesResponse `json:"characterTypes,omitempty"`
	Rejects        *UpdateSignInExpRejectsResponse        `json:"rejects,omitempty"`
}

func (o *UpdateSignInExpPasswordPolicyResponse) GetLength() *UpdateSignInExpLengthResponse {
	if o == nil {
		return nil
	}
	return o.Length
}

func (o *UpdateSignInExpPasswordPolicyResponse) GetCharacterTypes() *UpdateSignInExpCharacterTypesResponse {
	if o == nil {
		return nil
	}
	return o.CharacterTypes
}

func (o *UpdateSignInExpPasswordPolicyResponse) GetRejects() *UpdateSignInExpRejectsResponse {
	if o == nil {
		return nil
	}
	return o.Rejects
}

type UpdateSignInExpFactorResponse string

const (
	UpdateSignInExpFactorResponseTotp       UpdateSignInExpFactorResponse = "Totp"
	UpdateSignInExpFactorResponseWebAuthn   UpdateSignInExpFactorResponse = "WebAuthn"
	UpdateSignInExpFactorResponseBackupCode UpdateSignInExpFactorResponse = "BackupCode"
)

func (e UpdateSignInExpFactorResponse) ToPointer() *UpdateSignInExpFactorResponse {
	return &e
}
func (e *UpdateSignInExpFactorResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Totp":
		fallthrough
	case "WebAuthn":
		fallthrough
	case "BackupCode":
		*e = UpdateSignInExpFactorResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignInExpFactorResponse: %v", v)
	}
}

type UpdateSignInExpPolicyResponse string

const (
	UpdateSignInExpPolicyResponseUserControlled          UpdateSignInExpPolicyResponse = "UserControlled"
	UpdateSignInExpPolicyResponseMandatory               UpdateSignInExpPolicyResponse = "Mandatory"
	UpdateSignInExpPolicyResponsePromptOnlyAtSignIn      UpdateSignInExpPolicyResponse = "PromptOnlyAtSignIn"
	UpdateSignInExpPolicyResponsePromptAtSignInAndSignUp UpdateSignInExpPolicyResponse = "PromptAtSignInAndSignUp"
	UpdateSignInExpPolicyResponseNoPrompt                UpdateSignInExpPolicyResponse = "NoPrompt"
)

func (e UpdateSignInExpPolicyResponse) ToPointer() *UpdateSignInExpPolicyResponse {
	return &e
}
func (e *UpdateSignInExpPolicyResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UserControlled":
		fallthrough
	case "Mandatory":
		fallthrough
	case "PromptOnlyAtSignIn":
		fallthrough
	case "PromptAtSignInAndSignUp":
		fallthrough
	case "NoPrompt":
		*e = UpdateSignInExpPolicyResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignInExpPolicyResponse: %v", v)
	}
}

type UpdateSignInExpOrganizationRequiredMfaPolicyResponse string

const (
	UpdateSignInExpOrganizationRequiredMfaPolicyResponseNoPrompt  UpdateSignInExpOrganizationRequiredMfaPolicyResponse = "NoPrompt"
	UpdateSignInExpOrganizationRequiredMfaPolicyResponseMandatory UpdateSignInExpOrganizationRequiredMfaPolicyResponse = "Mandatory"
)

func (e UpdateSignInExpOrganizationRequiredMfaPolicyResponse) ToPointer() *UpdateSignInExpOrganizationRequiredMfaPolicyResponse {
	return &e
}
func (e *UpdateSignInExpOrganizationRequiredMfaPolicyResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NoPrompt":
		fallthrough
	case "Mandatory":
		*e = UpdateSignInExpOrganizationRequiredMfaPolicyResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignInExpOrganizationRequiredMfaPolicyResponse: %v", v)
	}
}

type UpdateSignInExpMfaResponse struct {
	Factors                       []UpdateSignInExpFactorResponse                       `json:"factors"`
	Policy                        UpdateSignInExpPolicyResponse                         `json:"policy"`
	OrganizationRequiredMfaPolicy *UpdateSignInExpOrganizationRequiredMfaPolicyResponse `json:"organizationRequiredMfaPolicy,omitempty"`
}

func (o *UpdateSignInExpMfaResponse) GetFactors() []UpdateSignInExpFactorResponse {
	if o == nil {
		return []UpdateSignInExpFactorResponse{}
	}
	return o.Factors
}

func (o *UpdateSignInExpMfaResponse) GetPolicy() UpdateSignInExpPolicyResponse {
	if o == nil {
		return UpdateSignInExpPolicyResponse("")
	}
	return o.Policy
}

func (o *UpdateSignInExpMfaResponse) GetOrganizationRequiredMfaPolicy() *UpdateSignInExpOrganizationRequiredMfaPolicyResponse {
	if o == nil {
		return nil
	}
	return o.OrganizationRequiredMfaPolicy
}

type UpdateSignInExpCaptchaPolicyResponse struct {
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *UpdateSignInExpCaptchaPolicyResponse) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type UpdateSignInExpSentinelPolicyResponse struct {
	MaxAttempts     *float64 `json:"maxAttempts,omitempty"`
	LockoutDuration *float64 `json:"lockoutDuration,omitempty"`
}

func (o *UpdateSignInExpSentinelPolicyResponse) GetMaxAttempts() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAttempts
}

func (o *UpdateSignInExpSentinelPolicyResponse) GetLockoutDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.LockoutDuration
}

// UpdateSignInExpResponseBody - Updated default sign-in experience settings.
type UpdateSignInExpResponseBody struct {
	TenantID                     string                                    `json:"tenantId"`
	ID                           string                                    `json:"id"`
	Color                        UpdateSignInExpColorResponse              `json:"color"`
	Branding                     UpdateSignInExpBrandingResponse           `json:"branding"`
	LanguageInfo                 UpdateSignInExpLanguageInfoResponse       `json:"languageInfo"`
	TermsOfUseURL                *string                                   `json:"termsOfUseUrl"`
	PrivacyPolicyURL             *string                                   `json:"privacyPolicyUrl"`
	AgreeToTermsPolicy           UpdateSignInExpAgreeToTermsPolicyResponse `json:"agreeToTermsPolicy"`
	SignIn                       UpdateSignInExpSignInResponse             `json:"signIn"`
	SignUp                       UpdateSignInExpSignUpResponse             `json:"signUp"`
	SocialSignIn                 UpdateSignInExpSocialSignInResponse       `json:"socialSignIn"`
	SocialSignInConnectorTargets []string                                  `json:"socialSignInConnectorTargets"`
	SignInMode                   UpdateSignInExpSignInModeResponse         `json:"signInMode"`
	CustomCSS                    *string                                   `json:"customCss"`
	CustomContent                map[string]string                         `json:"customContent"`
	CustomUIAssets               *UpdateSignInExpCustomUIAssetsResponse    `json:"customUiAssets"`
	PasswordPolicy               UpdateSignInExpPasswordPolicyResponse     `json:"passwordPolicy"`
	Mfa                          UpdateSignInExpMfaResponse                `json:"mfa"`
	SingleSignOnEnabled          bool                                      `json:"singleSignOnEnabled"`
	SupportEmail                 *string                                   `json:"supportEmail"`
	SupportWebsiteURL            *string                                   `json:"supportWebsiteUrl"`
	UnknownSessionRedirectURL    *string                                   `json:"unknownSessionRedirectUrl"`
	CaptchaPolicy                UpdateSignInExpCaptchaPolicyResponse      `json:"captchaPolicy"`
	SentinelPolicy               UpdateSignInExpSentinelPolicyResponse     `json:"sentinelPolicy"`
}

func (o *UpdateSignInExpResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *UpdateSignInExpResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateSignInExpResponseBody) GetColor() UpdateSignInExpColorResponse {
	if o == nil {
		return UpdateSignInExpColorResponse{}
	}
	return o.Color
}

func (o *UpdateSignInExpResponseBody) GetBranding() UpdateSignInExpBrandingResponse {
	if o == nil {
		return UpdateSignInExpBrandingResponse{}
	}
	return o.Branding
}

func (o *UpdateSignInExpResponseBody) GetLanguageInfo() UpdateSignInExpLanguageInfoResponse {
	if o == nil {
		return UpdateSignInExpLanguageInfoResponse{}
	}
	return o.LanguageInfo
}

func (o *UpdateSignInExpResponseBody) GetTermsOfUseURL() *string {
	if o == nil {
		return nil
	}
	return o.TermsOfUseURL
}

func (o *UpdateSignInExpResponseBody) GetPrivacyPolicyURL() *string {
	if o == nil {
		return nil
	}
	return o.PrivacyPolicyURL
}

func (o *UpdateSignInExpResponseBody) GetAgreeToTermsPolicy() UpdateSignInExpAgreeToTermsPolicyResponse {
	if o == nil {
		return UpdateSignInExpAgreeToTermsPolicyResponse("")
	}
	return o.AgreeToTermsPolicy
}

func (o *UpdateSignInExpResponseBody) GetSignIn() UpdateSignInExpSignInResponse {
	if o == nil {
		return UpdateSignInExpSignInResponse{}
	}
	return o.SignIn
}

func (o *UpdateSignInExpResponseBody) GetSignUp() UpdateSignInExpSignUpResponse {
	if o == nil {
		return UpdateSignInExpSignUpResponse{}
	}
	return o.SignUp
}

func (o *UpdateSignInExpResponseBody) GetSocialSignIn() UpdateSignInExpSocialSignInResponse {
	if o == nil {
		return UpdateSignInExpSocialSignInResponse{}
	}
	return o.SocialSignIn
}

func (o *UpdateSignInExpResponseBody) GetSocialSignInConnectorTargets() []string {
	if o == nil {
		return []string{}
	}
	return o.SocialSignInConnectorTargets
}

func (o *UpdateSignInExpResponseBody) GetSignInMode() UpdateSignInExpSignInModeResponse {
	if o == nil {
		return UpdateSignInExpSignInModeResponse("")
	}
	return o.SignInMode
}

func (o *UpdateSignInExpResponseBody) GetCustomCSS() *string {
	if o == nil {
		return nil
	}
	return o.CustomCSS
}

func (o *UpdateSignInExpResponseBody) GetCustomContent() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.CustomContent
}

func (o *UpdateSignInExpResponseBody) GetCustomUIAssets() *UpdateSignInExpCustomUIAssetsResponse {
	if o == nil {
		return nil
	}
	return o.CustomUIAssets
}

func (o *UpdateSignInExpResponseBody) GetPasswordPolicy() UpdateSignInExpPasswordPolicyResponse {
	if o == nil {
		return UpdateSignInExpPasswordPolicyResponse{}
	}
	return o.PasswordPolicy
}

func (o *UpdateSignInExpResponseBody) GetMfa() UpdateSignInExpMfaResponse {
	if o == nil {
		return UpdateSignInExpMfaResponse{}
	}
	return o.Mfa
}

func (o *UpdateSignInExpResponseBody) GetSingleSignOnEnabled() bool {
	if o == nil {
		return false
	}
	return o.SingleSignOnEnabled
}

func (o *UpdateSignInExpResponseBody) GetSupportEmail() *string {
	if o == nil {
		return nil
	}
	return o.SupportEmail
}

func (o *UpdateSignInExpResponseBody) GetSupportWebsiteURL() *string {
	if o == nil {
		return nil
	}
	return o.SupportWebsiteURL
}

func (o *UpdateSignInExpResponseBody) GetUnknownSessionRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.UnknownSessionRedirectURL
}

func (o *UpdateSignInExpResponseBody) GetCaptchaPolicy() UpdateSignInExpCaptchaPolicyResponse {
	if o == nil {
		return UpdateSignInExpCaptchaPolicyResponse{}
	}
	return o.CaptchaPolicy
}

func (o *UpdateSignInExpResponseBody) GetSentinelPolicy() UpdateSignInExpSentinelPolicyResponse {
	if o == nil {
		return UpdateSignInExpSentinelPolicyResponse{}
	}
	return o.SentinelPolicy
}

type UpdateSignInExpResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Updated default sign-in experience settings.
	Object *UpdateSignInExpResponseBody
}

func (o *UpdateSignInExpResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateSignInExpResponse) GetObject() *UpdateSignInExpResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
