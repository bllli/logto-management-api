// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type ListConnectorFactoriesType string

const (
	ListConnectorFactoriesTypeEmail  ListConnectorFactoriesType = "Email"
	ListConnectorFactoriesTypeSms    ListConnectorFactoriesType = "Sms"
	ListConnectorFactoriesTypeSocial ListConnectorFactoriesType = "Social"
)

func (e ListConnectorFactoriesType) ToPointer() *ListConnectorFactoriesType {
	return &e
}
func (e *ListConnectorFactoriesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Email":
		fallthrough
	case "Sms":
		fallthrough
	case "Social":
		*e = ListConnectorFactoriesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListConnectorFactoriesType: %v", v)
	}
}

// ListConnectorFactoriesName - Validator function
type ListConnectorFactoriesName struct {
}

// ListConnectorFactoriesDescription - Validator function
type ListConnectorFactoriesDescription struct {
}

type ListConnectorFactoriesFormItemType string

const (
	ListConnectorFactoriesFormItemTypeText          ListConnectorFactoriesFormItemType = "Text"
	ListConnectorFactoriesFormItemTypeNumber        ListConnectorFactoriesFormItemType = "Number"
	ListConnectorFactoriesFormItemTypeMultilineText ListConnectorFactoriesFormItemType = "MultilineText"
	ListConnectorFactoriesFormItemTypeSwitch        ListConnectorFactoriesFormItemType = "Switch"
	ListConnectorFactoriesFormItemTypeJSON          ListConnectorFactoriesFormItemType = "Json"
)

func (e ListConnectorFactoriesFormItemType) ToPointer() *ListConnectorFactoriesFormItemType {
	return &e
}
func (e *ListConnectorFactoriesFormItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Text":
		fallthrough
	case "Number":
		fallthrough
	case "MultilineText":
		fallthrough
	case "Switch":
		fallthrough
	case "Json":
		*e = ListConnectorFactoriesFormItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListConnectorFactoriesFormItemType: %v", v)
	}
}

type ListConnectorFactoriesShowCondition3 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *ListConnectorFactoriesShowCondition3) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *ListConnectorFactoriesShowCondition3) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type ListConnectorFactoriesFormItem3 struct {
	Type           ListConnectorFactoriesFormItemType     `json:"type"`
	Key            string                                 `json:"key"`
	Label          string                                 `json:"label"`
	Placeholder    *string                                `json:"placeholder,omitempty"`
	Required       *bool                                  `json:"required,omitempty"`
	DefaultValue   any                                    `json:"defaultValue,omitempty"`
	ShowConditions []ListConnectorFactoriesShowCondition3 `json:"showConditions,omitempty"`
	Description    *string                                `json:"description,omitempty"`
	Tooltip        *string                                `json:"tooltip,omitempty"`
	IsConfidential *bool                                  `json:"isConfidential,omitempty"`
}

func (o *ListConnectorFactoriesFormItem3) GetType() ListConnectorFactoriesFormItemType {
	if o == nil {
		return ListConnectorFactoriesFormItemType("")
	}
	return o.Type
}

func (o *ListConnectorFactoriesFormItem3) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListConnectorFactoriesFormItem3) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *ListConnectorFactoriesFormItem3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *ListConnectorFactoriesFormItem3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *ListConnectorFactoriesFormItem3) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *ListConnectorFactoriesFormItem3) GetShowConditions() []ListConnectorFactoriesShowCondition3 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *ListConnectorFactoriesFormItem3) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListConnectorFactoriesFormItem3) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *ListConnectorFactoriesFormItem3) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type ListConnectorFactoriesSelectItem2 struct {
	Value string `json:"value"`
}

func (o *ListConnectorFactoriesSelectItem2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListConnectorFactoriesShowCondition2 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *ListConnectorFactoriesShowCondition2) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *ListConnectorFactoriesShowCondition2) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type ListConnectorFactoriesFormItem2 struct {
	Type           string                                 `json:"type"`
	SelectItems    []ListConnectorFactoriesSelectItem2    `json:"selectItems"`
	Key            string                                 `json:"key"`
	Label          string                                 `json:"label"`
	Placeholder    *string                                `json:"placeholder,omitempty"`
	Required       *bool                                  `json:"required,omitempty"`
	DefaultValue   any                                    `json:"defaultValue,omitempty"`
	ShowConditions []ListConnectorFactoriesShowCondition2 `json:"showConditions,omitempty"`
	Description    *string                                `json:"description,omitempty"`
	Tooltip        *string                                `json:"tooltip,omitempty"`
	IsConfidential *bool                                  `json:"isConfidential,omitempty"`
}

func (o *ListConnectorFactoriesFormItem2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ListConnectorFactoriesFormItem2) GetSelectItems() []ListConnectorFactoriesSelectItem2 {
	if o == nil {
		return []ListConnectorFactoriesSelectItem2{}
	}
	return o.SelectItems
}

func (o *ListConnectorFactoriesFormItem2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListConnectorFactoriesFormItem2) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *ListConnectorFactoriesFormItem2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *ListConnectorFactoriesFormItem2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *ListConnectorFactoriesFormItem2) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *ListConnectorFactoriesFormItem2) GetShowConditions() []ListConnectorFactoriesShowCondition2 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *ListConnectorFactoriesFormItem2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListConnectorFactoriesFormItem2) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *ListConnectorFactoriesFormItem2) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type ListConnectorFactoriesSelectItem1 struct {
	Value string `json:"value"`
	Title string `json:"title"`
}

func (o *ListConnectorFactoriesSelectItem1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *ListConnectorFactoriesSelectItem1) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type ListConnectorFactoriesShowCondition1 struct {
	TargetKey   string `json:"targetKey"`
	ExpectValue any    `json:"expectValue,omitempty"`
}

func (o *ListConnectorFactoriesShowCondition1) GetTargetKey() string {
	if o == nil {
		return ""
	}
	return o.TargetKey
}

func (o *ListConnectorFactoriesShowCondition1) GetExpectValue() any {
	if o == nil {
		return nil
	}
	return o.ExpectValue
}

type ListConnectorFactoriesFormItem1 struct {
	Type           string                                 `json:"type"`
	SelectItems    []ListConnectorFactoriesSelectItem1    `json:"selectItems"`
	Key            string                                 `json:"key"`
	Label          string                                 `json:"label"`
	Placeholder    *string                                `json:"placeholder,omitempty"`
	Required       *bool                                  `json:"required,omitempty"`
	DefaultValue   any                                    `json:"defaultValue,omitempty"`
	ShowConditions []ListConnectorFactoriesShowCondition1 `json:"showConditions,omitempty"`
	Description    *string                                `json:"description,omitempty"`
	Tooltip        *string                                `json:"tooltip,omitempty"`
	IsConfidential *bool                                  `json:"isConfidential,omitempty"`
}

func (o *ListConnectorFactoriesFormItem1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ListConnectorFactoriesFormItem1) GetSelectItems() []ListConnectorFactoriesSelectItem1 {
	if o == nil {
		return []ListConnectorFactoriesSelectItem1{}
	}
	return o.SelectItems
}

func (o *ListConnectorFactoriesFormItem1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *ListConnectorFactoriesFormItem1) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *ListConnectorFactoriesFormItem1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *ListConnectorFactoriesFormItem1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *ListConnectorFactoriesFormItem1) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *ListConnectorFactoriesFormItem1) GetShowConditions() []ListConnectorFactoriesShowCondition1 {
	if o == nil {
		return nil
	}
	return o.ShowConditions
}

func (o *ListConnectorFactoriesFormItem1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListConnectorFactoriesFormItem1) GetTooltip() *string {
	if o == nil {
		return nil
	}
	return o.Tooltip
}

func (o *ListConnectorFactoriesFormItem1) GetIsConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.IsConfidential
}

type ListConnectorFactoriesFormItemUnionType string

const (
	ListConnectorFactoriesFormItemUnionTypeListConnectorFactoriesFormItem1 ListConnectorFactoriesFormItemUnionType = "ListConnectorFactories_formItem_1"
	ListConnectorFactoriesFormItemUnionTypeListConnectorFactoriesFormItem2 ListConnectorFactoriesFormItemUnionType = "ListConnectorFactories_formItem_2"
	ListConnectorFactoriesFormItemUnionTypeListConnectorFactoriesFormItem3 ListConnectorFactoriesFormItemUnionType = "ListConnectorFactories_formItem_3"
)

type ListConnectorFactoriesFormItemUnion struct {
	ListConnectorFactoriesFormItem1 *ListConnectorFactoriesFormItem1 `queryParam:"inline"`
	ListConnectorFactoriesFormItem2 *ListConnectorFactoriesFormItem2 `queryParam:"inline"`
	ListConnectorFactoriesFormItem3 *ListConnectorFactoriesFormItem3 `queryParam:"inline"`

	Type ListConnectorFactoriesFormItemUnionType
}

func CreateListConnectorFactoriesFormItemUnionListConnectorFactoriesFormItem1(listConnectorFactoriesFormItem1 ListConnectorFactoriesFormItem1) ListConnectorFactoriesFormItemUnion {
	typ := ListConnectorFactoriesFormItemUnionTypeListConnectorFactoriesFormItem1

	return ListConnectorFactoriesFormItemUnion{
		ListConnectorFactoriesFormItem1: &listConnectorFactoriesFormItem1,
		Type:                            typ,
	}
}

func CreateListConnectorFactoriesFormItemUnionListConnectorFactoriesFormItem2(listConnectorFactoriesFormItem2 ListConnectorFactoriesFormItem2) ListConnectorFactoriesFormItemUnion {
	typ := ListConnectorFactoriesFormItemUnionTypeListConnectorFactoriesFormItem2

	return ListConnectorFactoriesFormItemUnion{
		ListConnectorFactoriesFormItem2: &listConnectorFactoriesFormItem2,
		Type:                            typ,
	}
}

func CreateListConnectorFactoriesFormItemUnionListConnectorFactoriesFormItem3(listConnectorFactoriesFormItem3 ListConnectorFactoriesFormItem3) ListConnectorFactoriesFormItemUnion {
	typ := ListConnectorFactoriesFormItemUnionTypeListConnectorFactoriesFormItem3

	return ListConnectorFactoriesFormItemUnion{
		ListConnectorFactoriesFormItem3: &listConnectorFactoriesFormItem3,
		Type:                            typ,
	}
}

func (u *ListConnectorFactoriesFormItemUnion) UnmarshalJSON(data []byte) error {

	var listConnectorFactoriesFormItem3 ListConnectorFactoriesFormItem3 = ListConnectorFactoriesFormItem3{}
	if err := utils.UnmarshalJSON(data, &listConnectorFactoriesFormItem3, "", true, true); err == nil {
		u.ListConnectorFactoriesFormItem3 = &listConnectorFactoriesFormItem3
		u.Type = ListConnectorFactoriesFormItemUnionTypeListConnectorFactoriesFormItem3
		return nil
	}

	var listConnectorFactoriesFormItem1 ListConnectorFactoriesFormItem1 = ListConnectorFactoriesFormItem1{}
	if err := utils.UnmarshalJSON(data, &listConnectorFactoriesFormItem1, "", true, true); err == nil {
		u.ListConnectorFactoriesFormItem1 = &listConnectorFactoriesFormItem1
		u.Type = ListConnectorFactoriesFormItemUnionTypeListConnectorFactoriesFormItem1
		return nil
	}

	var listConnectorFactoriesFormItem2 ListConnectorFactoriesFormItem2 = ListConnectorFactoriesFormItem2{}
	if err := utils.UnmarshalJSON(data, &listConnectorFactoriesFormItem2, "", true, true); err == nil {
		u.ListConnectorFactoriesFormItem2 = &listConnectorFactoriesFormItem2
		u.Type = ListConnectorFactoriesFormItemUnionTypeListConnectorFactoriesFormItem2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListConnectorFactoriesFormItemUnion", string(data))
}

func (u ListConnectorFactoriesFormItemUnion) MarshalJSON() ([]byte, error) {
	if u.ListConnectorFactoriesFormItem1 != nil {
		return utils.MarshalJSON(u.ListConnectorFactoriesFormItem1, "", true)
	}

	if u.ListConnectorFactoriesFormItem2 != nil {
		return utils.MarshalJSON(u.ListConnectorFactoriesFormItem2, "", true)
	}

	if u.ListConnectorFactoriesFormItem3 != nil {
		return utils.MarshalJSON(u.ListConnectorFactoriesFormItem3, "", true)
	}

	return nil, errors.New("could not marshal union type ListConnectorFactoriesFormItemUnion: all fields are null")
}

type ListConnectorFactoriesPlatform string

const (
	ListConnectorFactoriesPlatformNative    ListConnectorFactoriesPlatform = "Native"
	ListConnectorFactoriesPlatformUniversal ListConnectorFactoriesPlatform = "Universal"
	ListConnectorFactoriesPlatformWeb       ListConnectorFactoriesPlatform = "Web"
)

func (e ListConnectorFactoriesPlatform) ToPointer() *ListConnectorFactoriesPlatform {
	return &e
}
func (e *ListConnectorFactoriesPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "Universal":
		fallthrough
	case "Web":
		*e = ListConnectorFactoriesPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListConnectorFactoriesPlatform: %v", v)
	}
}

type ListConnectorFactoriesResponseBody struct {
	Type   ListConnectorFactoriesType `json:"type"`
	IsDemo *bool                      `json:"isDemo,omitempty"`
	ID     string                     `json:"id"`
	Target string                     `json:"target"`
	// Validator function
	Name ListConnectorFactoriesName `json:"name"`
	// Validator function
	Description    ListConnectorFactoriesDescription     `json:"description"`
	Logo           string                                `json:"logo"`
	LogoDark       *string                               `json:"logoDark"`
	Readme         string                                `json:"readme"`
	ConfigTemplate *string                               `json:"configTemplate,omitempty"`
	FormItems      []ListConnectorFactoriesFormItemUnion `json:"formItems,omitempty"`
	CustomData     map[string]any                        `json:"customData,omitempty"`
	FromEmail      *string                               `json:"fromEmail,omitempty"`
	Platform       *ListConnectorFactoriesPlatform       `json:"platform"`
	IsStandard     *bool                                 `json:"isStandard,omitempty"`
}

func (o *ListConnectorFactoriesResponseBody) GetType() ListConnectorFactoriesType {
	if o == nil {
		return ListConnectorFactoriesType("")
	}
	return o.Type
}

func (o *ListConnectorFactoriesResponseBody) GetIsDemo() *bool {
	if o == nil {
		return nil
	}
	return o.IsDemo
}

func (o *ListConnectorFactoriesResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListConnectorFactoriesResponseBody) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *ListConnectorFactoriesResponseBody) GetName() ListConnectorFactoriesName {
	if o == nil {
		return ListConnectorFactoriesName{}
	}
	return o.Name
}

func (o *ListConnectorFactoriesResponseBody) GetDescription() ListConnectorFactoriesDescription {
	if o == nil {
		return ListConnectorFactoriesDescription{}
	}
	return o.Description
}

func (o *ListConnectorFactoriesResponseBody) GetLogo() string {
	if o == nil {
		return ""
	}
	return o.Logo
}

func (o *ListConnectorFactoriesResponseBody) GetLogoDark() *string {
	if o == nil {
		return nil
	}
	return o.LogoDark
}

func (o *ListConnectorFactoriesResponseBody) GetReadme() string {
	if o == nil {
		return ""
	}
	return o.Readme
}

func (o *ListConnectorFactoriesResponseBody) GetConfigTemplate() *string {
	if o == nil {
		return nil
	}
	return o.ConfigTemplate
}

func (o *ListConnectorFactoriesResponseBody) GetFormItems() []ListConnectorFactoriesFormItemUnion {
	if o == nil {
		return nil
	}
	return o.FormItems
}

func (o *ListConnectorFactoriesResponseBody) GetCustomData() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *ListConnectorFactoriesResponseBody) GetFromEmail() *string {
	if o == nil {
		return nil
	}
	return o.FromEmail
}

func (o *ListConnectorFactoriesResponseBody) GetPlatform() *ListConnectorFactoriesPlatform {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *ListConnectorFactoriesResponseBody) GetIsStandard() *bool {
	if o == nil {
		return nil
	}
	return o.IsStandard
}

type ListConnectorFactoriesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// An array of connector factories.
	ResponseBodies []ListConnectorFactoriesResponseBody
}

func (o *ListConnectorFactoriesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListConnectorFactoriesResponse) GetResponseBodies() []ListConnectorFactoriesResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
