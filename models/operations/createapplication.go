// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

type CreateApplicationTypeRequest string

const (
	CreateApplicationTypeRequestNative           CreateApplicationTypeRequest = "Native"
	CreateApplicationTypeRequestSpa              CreateApplicationTypeRequest = "SPA"
	CreateApplicationTypeRequestTraditional      CreateApplicationTypeRequest = "Traditional"
	CreateApplicationTypeRequestMachineToMachine CreateApplicationTypeRequest = "MachineToMachine"
	CreateApplicationTypeRequestProtected        CreateApplicationTypeRequest = "Protected"
	CreateApplicationTypeRequestSaml             CreateApplicationTypeRequest = "SAML"
)

func (e CreateApplicationTypeRequest) ToPointer() *CreateApplicationTypeRequest {
	return &e
}
func (e *CreateApplicationTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "SPA":
		fallthrough
	case "Traditional":
		fallthrough
	case "MachineToMachine":
		fallthrough
	case "Protected":
		fallthrough
	case "SAML":
		*e = CreateApplicationTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateApplicationTypeRequest: %v", v)
	}
}

// CreateApplicationRedirectUrisRequest2 - Validator function
type CreateApplicationRedirectUrisRequest2 struct {
}

// CreateApplicationRedirectUrisRequest1 - Validator function
type CreateApplicationRedirectUrisRequest1 struct {
}

type CreateApplicationRedirectUrisRequestUnionType string

const (
	CreateApplicationRedirectUrisRequestUnionTypeCreateApplicationRedirectUrisRequest1 CreateApplicationRedirectUrisRequestUnionType = "CreateApplication_redirectUris_request_1"
	CreateApplicationRedirectUrisRequestUnionTypeCreateApplicationRedirectUrisRequest2 CreateApplicationRedirectUrisRequestUnionType = "CreateApplication_redirectUris_request_2"
)

type CreateApplicationRedirectUrisRequestUnion struct {
	CreateApplicationRedirectUrisRequest1 *CreateApplicationRedirectUrisRequest1 `queryParam:"inline"`
	CreateApplicationRedirectUrisRequest2 *CreateApplicationRedirectUrisRequest2 `queryParam:"inline"`

	Type CreateApplicationRedirectUrisRequestUnionType
}

func CreateCreateApplicationRedirectUrisRequestUnionCreateApplicationRedirectUrisRequest1(createApplicationRedirectUrisRequest1 CreateApplicationRedirectUrisRequest1) CreateApplicationRedirectUrisRequestUnion {
	typ := CreateApplicationRedirectUrisRequestUnionTypeCreateApplicationRedirectUrisRequest1

	return CreateApplicationRedirectUrisRequestUnion{
		CreateApplicationRedirectUrisRequest1: &createApplicationRedirectUrisRequest1,
		Type:                                  typ,
	}
}

func CreateCreateApplicationRedirectUrisRequestUnionCreateApplicationRedirectUrisRequest2(createApplicationRedirectUrisRequest2 CreateApplicationRedirectUrisRequest2) CreateApplicationRedirectUrisRequestUnion {
	typ := CreateApplicationRedirectUrisRequestUnionTypeCreateApplicationRedirectUrisRequest2

	return CreateApplicationRedirectUrisRequestUnion{
		CreateApplicationRedirectUrisRequest2: &createApplicationRedirectUrisRequest2,
		Type:                                  typ,
	}
}

func (u *CreateApplicationRedirectUrisRequestUnion) UnmarshalJSON(data []byte) error {

	var createApplicationRedirectUrisRequest1 CreateApplicationRedirectUrisRequest1 = CreateApplicationRedirectUrisRequest1{}
	if err := utils.UnmarshalJSON(data, &createApplicationRedirectUrisRequest1, "", true, true); err == nil {
		u.CreateApplicationRedirectUrisRequest1 = &createApplicationRedirectUrisRequest1
		u.Type = CreateApplicationRedirectUrisRequestUnionTypeCreateApplicationRedirectUrisRequest1
		return nil
	}

	var createApplicationRedirectUrisRequest2 CreateApplicationRedirectUrisRequest2 = CreateApplicationRedirectUrisRequest2{}
	if err := utils.UnmarshalJSON(data, &createApplicationRedirectUrisRequest2, "", true, true); err == nil {
		u.CreateApplicationRedirectUrisRequest2 = &createApplicationRedirectUrisRequest2
		u.Type = CreateApplicationRedirectUrisRequestUnionTypeCreateApplicationRedirectUrisRequest2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateApplicationRedirectUrisRequestUnion", string(data))
}

func (u CreateApplicationRedirectUrisRequestUnion) MarshalJSON() ([]byte, error) {
	if u.CreateApplicationRedirectUrisRequest1 != nil {
		return utils.MarshalJSON(u.CreateApplicationRedirectUrisRequest1, "", true)
	}

	if u.CreateApplicationRedirectUrisRequest2 != nil {
		return utils.MarshalJSON(u.CreateApplicationRedirectUrisRequest2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateApplicationRedirectUrisRequestUnion: all fields are null")
}

type CreateApplicationOidcClientMetadataRequest struct {
	RedirectUris                     []CreateApplicationRedirectUrisRequestUnion `json:"redirectUris"`
	PostLogoutRedirectUris           []string                                    `json:"postLogoutRedirectUris"`
	BackchannelLogoutURI             *string                                     `json:"backchannelLogoutUri,omitempty"`
	BackchannelLogoutSessionRequired *bool                                       `json:"backchannelLogoutSessionRequired,omitempty"`
	LogoURI                          *string                                     `json:"logoUri,omitempty"`
}

func (o *CreateApplicationOidcClientMetadataRequest) GetRedirectUris() []CreateApplicationRedirectUrisRequestUnion {
	if o == nil {
		return []CreateApplicationRedirectUrisRequestUnion{}
	}
	return o.RedirectUris
}

func (o *CreateApplicationOidcClientMetadataRequest) GetPostLogoutRedirectUris() []string {
	if o == nil {
		return []string{}
	}
	return o.PostLogoutRedirectUris
}

func (o *CreateApplicationOidcClientMetadataRequest) GetBackchannelLogoutURI() *string {
	if o == nil {
		return nil
	}
	return o.BackchannelLogoutURI
}

func (o *CreateApplicationOidcClientMetadataRequest) GetBackchannelLogoutSessionRequired() *bool {
	if o == nil {
		return nil
	}
	return o.BackchannelLogoutSessionRequired
}

func (o *CreateApplicationOidcClientMetadataRequest) GetLogoURI() *string {
	if o == nil {
		return nil
	}
	return o.LogoURI
}

type CreateApplicationCustomClientMetadataRequest struct {
	CorsAllowedOrigins      []string `json:"corsAllowedOrigins,omitempty"`
	IDTokenTTL              *float64 `json:"idTokenTtl,omitempty"`
	RefreshTokenTTL         *float64 `json:"refreshTokenTtl,omitempty"`
	RefreshTokenTTLInDays   *float64 `json:"refreshTokenTtlInDays,omitempty"`
	TenantID                *string  `json:"tenantId,omitempty"`
	AlwaysIssueRefreshToken *bool    `json:"alwaysIssueRefreshToken,omitempty"`
	RotateRefreshToken      *bool    `json:"rotateRefreshToken,omitempty"`
}

func (o *CreateApplicationCustomClientMetadataRequest) GetCorsAllowedOrigins() []string {
	if o == nil {
		return nil
	}
	return o.CorsAllowedOrigins
}

func (o *CreateApplicationCustomClientMetadataRequest) GetIDTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.IDTokenTTL
}

func (o *CreateApplicationCustomClientMetadataRequest) GetRefreshTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTL
}

func (o *CreateApplicationCustomClientMetadataRequest) GetRefreshTokenTTLInDays() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTLInDays
}

func (o *CreateApplicationCustomClientMetadataRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreateApplicationCustomClientMetadataRequest) GetAlwaysIssueRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysIssueRefreshToken
}

func (o *CreateApplicationCustomClientMetadataRequest) GetRotateRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.RotateRefreshToken
}

// CreateApplicationProtectedAppMetadataRequest - The data for protected app, this feature is not available for open source version.
type CreateApplicationProtectedAppMetadataRequest struct {
	// The subdomain prefix, e.g., my-site.
	SubDomain string `json:"subDomain"`
	// The origin of target website, e.g., https://example.com.
	Origin string `json:"origin"`
}

func (o *CreateApplicationProtectedAppMetadataRequest) GetSubDomain() string {
	if o == nil {
		return ""
	}
	return o.SubDomain
}

func (o *CreateApplicationProtectedAppMetadataRequest) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

type CreateApplicationRequest struct {
	Name                 string                                        `json:"name"`
	Description          *string                                       `json:"description,omitempty"`
	Type                 CreateApplicationTypeRequest                  `json:"type"`
	OidcClientMetadata   *CreateApplicationOidcClientMetadataRequest   `json:"oidcClientMetadata,omitempty"`
	CustomClientMetadata *CreateApplicationCustomClientMetadataRequest `json:"customClientMetadata,omitempty"`
	// arbitrary
	CustomData   map[string]any `json:"customData,omitempty"`
	IsThirdParty *bool          `json:"isThirdParty,omitempty"`
	// The data for protected app, this feature is not available for open source version.
	ProtectedAppMetadata *CreateApplicationProtectedAppMetadataRequest `json:"protectedAppMetadata,omitempty"`
}

func (o *CreateApplicationRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateApplicationRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateApplicationRequest) GetType() CreateApplicationTypeRequest {
	if o == nil {
		return CreateApplicationTypeRequest("")
	}
	return o.Type
}

func (o *CreateApplicationRequest) GetOidcClientMetadata() *CreateApplicationOidcClientMetadataRequest {
	if o == nil {
		return nil
	}
	return o.OidcClientMetadata
}

func (o *CreateApplicationRequest) GetCustomClientMetadata() *CreateApplicationCustomClientMetadataRequest {
	if o == nil {
		return nil
	}
	return o.CustomClientMetadata
}

func (o *CreateApplicationRequest) GetCustomData() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *CreateApplicationRequest) GetIsThirdParty() *bool {
	if o == nil {
		return nil
	}
	return o.IsThirdParty
}

func (o *CreateApplicationRequest) GetProtectedAppMetadata() *CreateApplicationProtectedAppMetadataRequest {
	if o == nil {
		return nil
	}
	return o.ProtectedAppMetadata
}

type CreateApplicationTypeResponse string

const (
	CreateApplicationTypeResponseNative           CreateApplicationTypeResponse = "Native"
	CreateApplicationTypeResponseSpa              CreateApplicationTypeResponse = "SPA"
	CreateApplicationTypeResponseTraditional      CreateApplicationTypeResponse = "Traditional"
	CreateApplicationTypeResponseMachineToMachine CreateApplicationTypeResponse = "MachineToMachine"
	CreateApplicationTypeResponseProtected        CreateApplicationTypeResponse = "Protected"
	CreateApplicationTypeResponseSaml             CreateApplicationTypeResponse = "SAML"
)

func (e CreateApplicationTypeResponse) ToPointer() *CreateApplicationTypeResponse {
	return &e
}
func (e *CreateApplicationTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "SPA":
		fallthrough
	case "Traditional":
		fallthrough
	case "MachineToMachine":
		fallthrough
	case "Protected":
		fallthrough
	case "SAML":
		*e = CreateApplicationTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateApplicationTypeResponse: %v", v)
	}
}

// CreateApplicationRedirectUrisResponse2 - Validator function
type CreateApplicationRedirectUrisResponse2 struct {
}

// CreateApplicationRedirectUrisResponse1 - Validator function
type CreateApplicationRedirectUrisResponse1 struct {
}

type CreateApplicationRedirectUrisResponseUnionType string

const (
	CreateApplicationRedirectUrisResponseUnionTypeCreateApplicationRedirectUrisResponse1 CreateApplicationRedirectUrisResponseUnionType = "CreateApplication_redirectUris_response_1"
	CreateApplicationRedirectUrisResponseUnionTypeCreateApplicationRedirectUrisResponse2 CreateApplicationRedirectUrisResponseUnionType = "CreateApplication_redirectUris_response_2"
)

type CreateApplicationRedirectUrisResponseUnion struct {
	CreateApplicationRedirectUrisResponse1 *CreateApplicationRedirectUrisResponse1 `queryParam:"inline"`
	CreateApplicationRedirectUrisResponse2 *CreateApplicationRedirectUrisResponse2 `queryParam:"inline"`

	Type CreateApplicationRedirectUrisResponseUnionType
}

func CreateCreateApplicationRedirectUrisResponseUnionCreateApplicationRedirectUrisResponse1(createApplicationRedirectUrisResponse1 CreateApplicationRedirectUrisResponse1) CreateApplicationRedirectUrisResponseUnion {
	typ := CreateApplicationRedirectUrisResponseUnionTypeCreateApplicationRedirectUrisResponse1

	return CreateApplicationRedirectUrisResponseUnion{
		CreateApplicationRedirectUrisResponse1: &createApplicationRedirectUrisResponse1,
		Type:                                   typ,
	}
}

func CreateCreateApplicationRedirectUrisResponseUnionCreateApplicationRedirectUrisResponse2(createApplicationRedirectUrisResponse2 CreateApplicationRedirectUrisResponse2) CreateApplicationRedirectUrisResponseUnion {
	typ := CreateApplicationRedirectUrisResponseUnionTypeCreateApplicationRedirectUrisResponse2

	return CreateApplicationRedirectUrisResponseUnion{
		CreateApplicationRedirectUrisResponse2: &createApplicationRedirectUrisResponse2,
		Type:                                   typ,
	}
}

func (u *CreateApplicationRedirectUrisResponseUnion) UnmarshalJSON(data []byte) error {

	var createApplicationRedirectUrisResponse1 CreateApplicationRedirectUrisResponse1 = CreateApplicationRedirectUrisResponse1{}
	if err := utils.UnmarshalJSON(data, &createApplicationRedirectUrisResponse1, "", true, true); err == nil {
		u.CreateApplicationRedirectUrisResponse1 = &createApplicationRedirectUrisResponse1
		u.Type = CreateApplicationRedirectUrisResponseUnionTypeCreateApplicationRedirectUrisResponse1
		return nil
	}

	var createApplicationRedirectUrisResponse2 CreateApplicationRedirectUrisResponse2 = CreateApplicationRedirectUrisResponse2{}
	if err := utils.UnmarshalJSON(data, &createApplicationRedirectUrisResponse2, "", true, true); err == nil {
		u.CreateApplicationRedirectUrisResponse2 = &createApplicationRedirectUrisResponse2
		u.Type = CreateApplicationRedirectUrisResponseUnionTypeCreateApplicationRedirectUrisResponse2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateApplicationRedirectUrisResponseUnion", string(data))
}

func (u CreateApplicationRedirectUrisResponseUnion) MarshalJSON() ([]byte, error) {
	if u.CreateApplicationRedirectUrisResponse1 != nil {
		return utils.MarshalJSON(u.CreateApplicationRedirectUrisResponse1, "", true)
	}

	if u.CreateApplicationRedirectUrisResponse2 != nil {
		return utils.MarshalJSON(u.CreateApplicationRedirectUrisResponse2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateApplicationRedirectUrisResponseUnion: all fields are null")
}

type CreateApplicationOidcClientMetadataResponse struct {
	RedirectUris                     []CreateApplicationRedirectUrisResponseUnion `json:"redirectUris"`
	PostLogoutRedirectUris           []string                                     `json:"postLogoutRedirectUris"`
	BackchannelLogoutURI             *string                                      `json:"backchannelLogoutUri,omitempty"`
	BackchannelLogoutSessionRequired *bool                                        `json:"backchannelLogoutSessionRequired,omitempty"`
	LogoURI                          *string                                      `json:"logoUri,omitempty"`
}

func (o *CreateApplicationOidcClientMetadataResponse) GetRedirectUris() []CreateApplicationRedirectUrisResponseUnion {
	if o == nil {
		return []CreateApplicationRedirectUrisResponseUnion{}
	}
	return o.RedirectUris
}

func (o *CreateApplicationOidcClientMetadataResponse) GetPostLogoutRedirectUris() []string {
	if o == nil {
		return []string{}
	}
	return o.PostLogoutRedirectUris
}

func (o *CreateApplicationOidcClientMetadataResponse) GetBackchannelLogoutURI() *string {
	if o == nil {
		return nil
	}
	return o.BackchannelLogoutURI
}

func (o *CreateApplicationOidcClientMetadataResponse) GetBackchannelLogoutSessionRequired() *bool {
	if o == nil {
		return nil
	}
	return o.BackchannelLogoutSessionRequired
}

func (o *CreateApplicationOidcClientMetadataResponse) GetLogoURI() *string {
	if o == nil {
		return nil
	}
	return o.LogoURI
}

type CreateApplicationCustomClientMetadataResponse struct {
	CorsAllowedOrigins      []string `json:"corsAllowedOrigins,omitempty"`
	IDTokenTTL              *float64 `json:"idTokenTtl,omitempty"`
	RefreshTokenTTL         *float64 `json:"refreshTokenTtl,omitempty"`
	RefreshTokenTTLInDays   *float64 `json:"refreshTokenTtlInDays,omitempty"`
	TenantID                *string  `json:"tenantId,omitempty"`
	AlwaysIssueRefreshToken *bool    `json:"alwaysIssueRefreshToken,omitempty"`
	RotateRefreshToken      *bool    `json:"rotateRefreshToken,omitempty"`
}

func (o *CreateApplicationCustomClientMetadataResponse) GetCorsAllowedOrigins() []string {
	if o == nil {
		return nil
	}
	return o.CorsAllowedOrigins
}

func (o *CreateApplicationCustomClientMetadataResponse) GetIDTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.IDTokenTTL
}

func (o *CreateApplicationCustomClientMetadataResponse) GetRefreshTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTL
}

func (o *CreateApplicationCustomClientMetadataResponse) GetRefreshTokenTTLInDays() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTLInDays
}

func (o *CreateApplicationCustomClientMetadataResponse) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreateApplicationCustomClientMetadataResponse) GetAlwaysIssueRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysIssueRefreshToken
}

func (o *CreateApplicationCustomClientMetadataResponse) GetRotateRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.RotateRefreshToken
}

type CreateApplicationPageRule struct {
	Path string `json:"path"`
}

func (o *CreateApplicationPageRule) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type CreateApplicationStatus string

const (
	CreateApplicationStatusPendingVerification CreateApplicationStatus = "PendingVerification"
	CreateApplicationStatusPendingSsl          CreateApplicationStatus = "PendingSsl"
	CreateApplicationStatusActive              CreateApplicationStatus = "Active"
	CreateApplicationStatusError               CreateApplicationStatus = "Error"
)

func (e CreateApplicationStatus) ToPointer() *CreateApplicationStatus {
	return &e
}
func (e *CreateApplicationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PendingVerification":
		fallthrough
	case "PendingSsl":
		fallthrough
	case "Active":
		fallthrough
	case "Error":
		*e = CreateApplicationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateApplicationStatus: %v", v)
	}
}

type CreateApplicationDNSRecord struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

func (o *CreateApplicationDNSRecord) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateApplicationDNSRecord) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateApplicationDNSRecord) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateApplicationValidationError struct {
	Message string `json:"message"`
}

func (o *CreateApplicationValidationError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateApplicationSsl struct {
	Status           string                             `json:"status"`
	ValidationErrors []CreateApplicationValidationError `json:"validation_errors,omitempty"`
}

func (o *CreateApplicationSsl) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *CreateApplicationSsl) GetValidationErrors() []CreateApplicationValidationError {
	if o == nil {
		return nil
	}
	return o.ValidationErrors
}

type CreateApplicationCloudflareData struct {
	ID                 string               `json:"id"`
	Status             string               `json:"status"`
	Ssl                CreateApplicationSsl `json:"ssl"`
	VerificationErrors []string             `json:"verification_errors,omitempty"`
}

func (o *CreateApplicationCloudflareData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateApplicationCloudflareData) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *CreateApplicationCloudflareData) GetSsl() CreateApplicationSsl {
	if o == nil {
		return CreateApplicationSsl{}
	}
	return o.Ssl
}

func (o *CreateApplicationCloudflareData) GetVerificationErrors() []string {
	if o == nil {
		return nil
	}
	return o.VerificationErrors
}

type CreateApplicationCustomDomain struct {
	Domain         string                           `json:"domain"`
	Status         CreateApplicationStatus          `json:"status"`
	ErrorMessage   *string                          `json:"errorMessage"`
	DNSRecords     []CreateApplicationDNSRecord     `json:"dnsRecords"`
	CloudflareData *CreateApplicationCloudflareData `json:"cloudflareData"`
}

func (o *CreateApplicationCustomDomain) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *CreateApplicationCustomDomain) GetStatus() CreateApplicationStatus {
	if o == nil {
		return CreateApplicationStatus("")
	}
	return o.Status
}

func (o *CreateApplicationCustomDomain) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CreateApplicationCustomDomain) GetDNSRecords() []CreateApplicationDNSRecord {
	if o == nil {
		return []CreateApplicationDNSRecord{}
	}
	return o.DNSRecords
}

func (o *CreateApplicationCustomDomain) GetCloudflareData() *CreateApplicationCloudflareData {
	if o == nil {
		return nil
	}
	return o.CloudflareData
}

type CreateApplicationProtectedAppMetadataResponse struct {
	Host            string                          `json:"host"`
	Origin          string                          `json:"origin"`
	SessionDuration float64                         `json:"sessionDuration"`
	PageRules       []CreateApplicationPageRule     `json:"pageRules"`
	CustomDomains   []CreateApplicationCustomDomain `json:"customDomains,omitempty"`
}

func (o *CreateApplicationProtectedAppMetadataResponse) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateApplicationProtectedAppMetadataResponse) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

func (o *CreateApplicationProtectedAppMetadataResponse) GetSessionDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.SessionDuration
}

func (o *CreateApplicationProtectedAppMetadataResponse) GetPageRules() []CreateApplicationPageRule {
	if o == nil {
		return []CreateApplicationPageRule{}
	}
	return o.PageRules
}

func (o *CreateApplicationProtectedAppMetadataResponse) GetCustomDomains() []CreateApplicationCustomDomain {
	if o == nil {
		return nil
	}
	return o.CustomDomains
}

// CreateApplicationResponseBody - The application was created successfully.
type CreateApplicationResponseBody struct {
	TenantID string `json:"tenantId"`
	ID       string `json:"id"`
	Name     string `json:"name"`
	// The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Secret               string                                         `json:"secret"`
	Description          *string                                        `json:"description"`
	Type                 CreateApplicationTypeResponse                  `json:"type"`
	OidcClientMetadata   CreateApplicationOidcClientMetadataResponse    `json:"oidcClientMetadata"`
	CustomClientMetadata CreateApplicationCustomClientMetadataResponse  `json:"customClientMetadata"`
	ProtectedAppMetadata *CreateApplicationProtectedAppMetadataResponse `json:"protectedAppMetadata"`
	// arbitrary
	CustomData   map[string]any `json:"customData"`
	IsThirdParty bool           `json:"isThirdParty"`
	CreatedAt    float64        `json:"createdAt"`
}

func (o *CreateApplicationResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *CreateApplicationResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateApplicationResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateApplicationResponseBody) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *CreateApplicationResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateApplicationResponseBody) GetType() CreateApplicationTypeResponse {
	if o == nil {
		return CreateApplicationTypeResponse("")
	}
	return o.Type
}

func (o *CreateApplicationResponseBody) GetOidcClientMetadata() CreateApplicationOidcClientMetadataResponse {
	if o == nil {
		return CreateApplicationOidcClientMetadataResponse{}
	}
	return o.OidcClientMetadata
}

func (o *CreateApplicationResponseBody) GetCustomClientMetadata() CreateApplicationCustomClientMetadataResponse {
	if o == nil {
		return CreateApplicationCustomClientMetadataResponse{}
	}
	return o.CustomClientMetadata
}

func (o *CreateApplicationResponseBody) GetProtectedAppMetadata() *CreateApplicationProtectedAppMetadataResponse {
	if o == nil {
		return nil
	}
	return o.ProtectedAppMetadata
}

func (o *CreateApplicationResponseBody) GetCustomData() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.CustomData
}

func (o *CreateApplicationResponseBody) GetIsThirdParty() bool {
	if o == nil {
		return false
	}
	return o.IsThirdParty
}

func (o *CreateApplicationResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type CreateApplicationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The application was created successfully.
	Object *CreateApplicationResponseBody
}

func (o *CreateApplicationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateApplicationResponse) GetObject() *CreateApplicationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
