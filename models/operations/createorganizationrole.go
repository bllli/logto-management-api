// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type CreateOrganizationRoleTypeRequest string

const (
	CreateOrganizationRoleTypeRequestUser             CreateOrganizationRoleTypeRequest = "User"
	CreateOrganizationRoleTypeRequestMachineToMachine CreateOrganizationRoleTypeRequest = "MachineToMachine"
)

func (e CreateOrganizationRoleTypeRequest) ToPointer() *CreateOrganizationRoleTypeRequest {
	return &e
}
func (e *CreateOrganizationRoleTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "MachineToMachine":
		*e = CreateOrganizationRoleTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrganizationRoleTypeRequest: %v", v)
	}
}

type CreateOrganizationRoleRequest struct {
	TenantID *string `json:"tenantId,omitempty"`
	// The name of the organization role. It must be unique within the organization template.
	Name string `json:"name"`
	// The description of the organization role.
	Description *string                            `json:"description,omitempty"`
	Type        *CreateOrganizationRoleTypeRequest `json:"type,omitempty"`
	// An array of organization scope IDs to be assigned to the organization role.
	OrganizationScopeIds []string `json:"organizationScopeIds"`
	// An array of resource scope IDs to be assigned to the organization role.
	ResourceScopeIds []string `json:"resourceScopeIds"`
}

func (o *CreateOrganizationRoleRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *CreateOrganizationRoleRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateOrganizationRoleRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateOrganizationRoleRequest) GetType() *CreateOrganizationRoleTypeRequest {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateOrganizationRoleRequest) GetOrganizationScopeIds() []string {
	if o == nil {
		return []string{}
	}
	return o.OrganizationScopeIds
}

func (o *CreateOrganizationRoleRequest) GetResourceScopeIds() []string {
	if o == nil {
		return []string{}
	}
	return o.ResourceScopeIds
}

type CreateOrganizationRoleTypeResponse string

const (
	CreateOrganizationRoleTypeResponseUser             CreateOrganizationRoleTypeResponse = "User"
	CreateOrganizationRoleTypeResponseMachineToMachine CreateOrganizationRoleTypeResponse = "MachineToMachine"
)

func (e CreateOrganizationRoleTypeResponse) ToPointer() *CreateOrganizationRoleTypeResponse {
	return &e
}
func (e *CreateOrganizationRoleTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "MachineToMachine":
		*e = CreateOrganizationRoleTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrganizationRoleTypeResponse: %v", v)
	}
}

// CreateOrganizationRoleResponseBody - The organization role was created successfully.
type CreateOrganizationRoleResponseBody struct {
	TenantID    string                             `json:"tenantId"`
	ID          string                             `json:"id"`
	Name        string                             `json:"name"`
	Description *string                            `json:"description"`
	Type        CreateOrganizationRoleTypeResponse `json:"type"`
}

func (o *CreateOrganizationRoleResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *CreateOrganizationRoleResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateOrganizationRoleResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateOrganizationRoleResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateOrganizationRoleResponseBody) GetType() CreateOrganizationRoleTypeResponse {
	if o == nil {
		return CreateOrganizationRoleTypeResponse("")
	}
	return o.Type
}

type CreateOrganizationRoleResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The organization role was created successfully.
	Object *CreateOrganizationRoleResponseBody
}

func (o *CreateOrganizationRoleResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateOrganizationRoleResponse) GetObject() *CreateOrganizationRoleResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
