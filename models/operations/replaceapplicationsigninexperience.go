// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/bllli/logto-management-api/models/components"
)

type ReplaceApplicationSignInExperienceColorRequest struct {
	PrimaryColor      *string `json:"primaryColor,omitempty"`
	IsDarkModeEnabled *bool   `json:"isDarkModeEnabled,omitempty"`
	DarkPrimaryColor  *string `json:"darkPrimaryColor,omitempty"`
}

func (o *ReplaceApplicationSignInExperienceColorRequest) GetPrimaryColor() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryColor
}

func (o *ReplaceApplicationSignInExperienceColorRequest) GetIsDarkModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsDarkModeEnabled
}

func (o *ReplaceApplicationSignInExperienceColorRequest) GetDarkPrimaryColor() *string {
	if o == nil {
		return nil
	}
	return o.DarkPrimaryColor
}

type ReplaceApplicationSignInExperienceBrandingRequest struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *ReplaceApplicationSignInExperienceBrandingRequest) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *ReplaceApplicationSignInExperienceBrandingRequest) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *ReplaceApplicationSignInExperienceBrandingRequest) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *ReplaceApplicationSignInExperienceBrandingRequest) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

type ReplaceApplicationSignInExperienceRequestBody struct {
	Color            *ReplaceApplicationSignInExperienceColorRequest    `json:"color,omitempty"`
	Branding         *ReplaceApplicationSignInExperienceBrandingRequest `json:"branding,omitempty"`
	DisplayName      *string                                            `json:"displayName,omitempty"`
	TermsOfUseURL    *string                                            `json:"termsOfUseUrl"`
	PrivacyPolicyURL *string                                            `json:"privacyPolicyUrl"`
}

func (o *ReplaceApplicationSignInExperienceRequestBody) GetColor() *ReplaceApplicationSignInExperienceColorRequest {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *ReplaceApplicationSignInExperienceRequestBody) GetBranding() *ReplaceApplicationSignInExperienceBrandingRequest {
	if o == nil {
		return nil
	}
	return o.Branding
}

func (o *ReplaceApplicationSignInExperienceRequestBody) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *ReplaceApplicationSignInExperienceRequestBody) GetTermsOfUseURL() *string {
	if o == nil {
		return nil
	}
	return o.TermsOfUseURL
}

func (o *ReplaceApplicationSignInExperienceRequestBody) GetPrivacyPolicyURL() *string {
	if o == nil {
		return nil
	}
	return o.PrivacyPolicyURL
}

type ReplaceApplicationSignInExperienceRequest struct {
	// The unique identifier of the application.
	ApplicationID string                                        `pathParam:"style=simple,explode=false,name=applicationId"`
	RequestBody   ReplaceApplicationSignInExperienceRequestBody `request:"mediaType=application/json"`
}

func (o *ReplaceApplicationSignInExperienceRequest) GetApplicationID() string {
	if o == nil {
		return ""
	}
	return o.ApplicationID
}

func (o *ReplaceApplicationSignInExperienceRequest) GetRequestBody() ReplaceApplicationSignInExperienceRequestBody {
	if o == nil {
		return ReplaceApplicationSignInExperienceRequestBody{}
	}
	return o.RequestBody
}

type ReplaceApplicationSignInExperienceColorResponse2 struct {
	PrimaryColor      *string `json:"primaryColor,omitempty"`
	IsDarkModeEnabled *bool   `json:"isDarkModeEnabled,omitempty"`
	DarkPrimaryColor  *string `json:"darkPrimaryColor,omitempty"`
}

func (o *ReplaceApplicationSignInExperienceColorResponse2) GetPrimaryColor() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryColor
}

func (o *ReplaceApplicationSignInExperienceColorResponse2) GetIsDarkModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsDarkModeEnabled
}

func (o *ReplaceApplicationSignInExperienceColorResponse2) GetDarkPrimaryColor() *string {
	if o == nil {
		return nil
	}
	return o.DarkPrimaryColor
}

type ReplaceApplicationSignInExperienceBrandingResponse2 struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *ReplaceApplicationSignInExperienceBrandingResponse2) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *ReplaceApplicationSignInExperienceBrandingResponse2) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *ReplaceApplicationSignInExperienceBrandingResponse2) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *ReplaceApplicationSignInExperienceBrandingResponse2) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

// ReplaceApplicationSignInExperienceResponseBody2 - A new application level sign-in experience settings was successfully created.
type ReplaceApplicationSignInExperienceResponseBody2 struct {
	TenantID         string                                              `json:"tenantId"`
	ApplicationID    string                                              `json:"applicationId"`
	Color            ReplaceApplicationSignInExperienceColorResponse2    `json:"color"`
	Branding         ReplaceApplicationSignInExperienceBrandingResponse2 `json:"branding"`
	TermsOfUseURL    *string                                             `json:"termsOfUseUrl"`
	PrivacyPolicyURL *string                                             `json:"privacyPolicyUrl"`
	DisplayName      *string                                             `json:"displayName"`
}

func (o *ReplaceApplicationSignInExperienceResponseBody2) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ReplaceApplicationSignInExperienceResponseBody2) GetApplicationID() string {
	if o == nil {
		return ""
	}
	return o.ApplicationID
}

func (o *ReplaceApplicationSignInExperienceResponseBody2) GetColor() ReplaceApplicationSignInExperienceColorResponse2 {
	if o == nil {
		return ReplaceApplicationSignInExperienceColorResponse2{}
	}
	return o.Color
}

func (o *ReplaceApplicationSignInExperienceResponseBody2) GetBranding() ReplaceApplicationSignInExperienceBrandingResponse2 {
	if o == nil {
		return ReplaceApplicationSignInExperienceBrandingResponse2{}
	}
	return o.Branding
}

func (o *ReplaceApplicationSignInExperienceResponseBody2) GetTermsOfUseURL() *string {
	if o == nil {
		return nil
	}
	return o.TermsOfUseURL
}

func (o *ReplaceApplicationSignInExperienceResponseBody2) GetPrivacyPolicyURL() *string {
	if o == nil {
		return nil
	}
	return o.PrivacyPolicyURL
}

func (o *ReplaceApplicationSignInExperienceResponseBody2) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

type ReplaceApplicationSignInExperienceColorResponse1 struct {
	PrimaryColor      *string `json:"primaryColor,omitempty"`
	IsDarkModeEnabled *bool   `json:"isDarkModeEnabled,omitempty"`
	DarkPrimaryColor  *string `json:"darkPrimaryColor,omitempty"`
}

func (o *ReplaceApplicationSignInExperienceColorResponse1) GetPrimaryColor() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryColor
}

func (o *ReplaceApplicationSignInExperienceColorResponse1) GetIsDarkModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsDarkModeEnabled
}

func (o *ReplaceApplicationSignInExperienceColorResponse1) GetDarkPrimaryColor() *string {
	if o == nil {
		return nil
	}
	return o.DarkPrimaryColor
}

type ReplaceApplicationSignInExperienceBrandingResponse1 struct {
	LogoURL     *string `json:"logoUrl,omitempty"`
	DarkLogoURL *string `json:"darkLogoUrl,omitempty"`
	Favicon     *string `json:"favicon,omitempty"`
	DarkFavicon *string `json:"darkFavicon,omitempty"`
}

func (o *ReplaceApplicationSignInExperienceBrandingResponse1) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *ReplaceApplicationSignInExperienceBrandingResponse1) GetDarkLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.DarkLogoURL
}

func (o *ReplaceApplicationSignInExperienceBrandingResponse1) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *ReplaceApplicationSignInExperienceBrandingResponse1) GetDarkFavicon() *string {
	if o == nil {
		return nil
	}
	return o.DarkFavicon
}

// ReplaceApplicationSignInExperienceResponseBody1 - The application's sign-in experience was successfully updated.
type ReplaceApplicationSignInExperienceResponseBody1 struct {
	TenantID         string                                              `json:"tenantId"`
	ApplicationID    string                                              `json:"applicationId"`
	Color            ReplaceApplicationSignInExperienceColorResponse1    `json:"color"`
	Branding         ReplaceApplicationSignInExperienceBrandingResponse1 `json:"branding"`
	TermsOfUseURL    *string                                             `json:"termsOfUseUrl"`
	PrivacyPolicyURL *string                                             `json:"privacyPolicyUrl"`
	DisplayName      *string                                             `json:"displayName"`
}

func (o *ReplaceApplicationSignInExperienceResponseBody1) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ReplaceApplicationSignInExperienceResponseBody1) GetApplicationID() string {
	if o == nil {
		return ""
	}
	return o.ApplicationID
}

func (o *ReplaceApplicationSignInExperienceResponseBody1) GetColor() ReplaceApplicationSignInExperienceColorResponse1 {
	if o == nil {
		return ReplaceApplicationSignInExperienceColorResponse1{}
	}
	return o.Color
}

func (o *ReplaceApplicationSignInExperienceResponseBody1) GetBranding() ReplaceApplicationSignInExperienceBrandingResponse1 {
	if o == nil {
		return ReplaceApplicationSignInExperienceBrandingResponse1{}
	}
	return o.Branding
}

func (o *ReplaceApplicationSignInExperienceResponseBody1) GetTermsOfUseURL() *string {
	if o == nil {
		return nil
	}
	return o.TermsOfUseURL
}

func (o *ReplaceApplicationSignInExperienceResponseBody1) GetPrivacyPolicyURL() *string {
	if o == nil {
		return nil
	}
	return o.PrivacyPolicyURL
}

func (o *ReplaceApplicationSignInExperienceResponseBody1) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

type ReplaceApplicationSignInExperienceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The application's sign-in experience was successfully updated.
	TwoHundredApplicationJSONObject *ReplaceApplicationSignInExperienceResponseBody1
	// A new application level sign-in experience settings was successfully created.
	TwoHundredAndOneApplicationJSONObject *ReplaceApplicationSignInExperienceResponseBody2
}

func (o *ReplaceApplicationSignInExperienceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ReplaceApplicationSignInExperienceResponse) GetTwoHundredApplicationJSONObject() *ReplaceApplicationSignInExperienceResponseBody1 {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *ReplaceApplicationSignInExperienceResponse) GetTwoHundredAndOneApplicationJSONObject() *ReplaceApplicationSignInExperienceResponseBody2 {
	if o == nil {
		return nil
	}
	return o.TwoHundredAndOneApplicationJSONObject
}
