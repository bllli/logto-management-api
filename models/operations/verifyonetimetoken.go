// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/models/components"
)

type VerifyOneTimeTokenRequest struct {
	// The one-time token to verify.
	Token string `json:"token"`
	// The email address associated with the one-time token.
	Email string `json:"email"`
}

func (o *VerifyOneTimeTokenRequest) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *VerifyOneTimeTokenRequest) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type VerifyOneTimeTokenContext struct {
	JitOrganizationIds []string `json:"jitOrganizationIds,omitempty"`
}

func (o *VerifyOneTimeTokenContext) GetJitOrganizationIds() []string {
	if o == nil {
		return nil
	}
	return o.JitOrganizationIds
}

type VerifyOneTimeTokenStatus string

const (
	VerifyOneTimeTokenStatusActive   VerifyOneTimeTokenStatus = "active"
	VerifyOneTimeTokenStatusConsumed VerifyOneTimeTokenStatus = "consumed"
	VerifyOneTimeTokenStatusRevoked  VerifyOneTimeTokenStatus = "revoked"
	VerifyOneTimeTokenStatusExpired  VerifyOneTimeTokenStatus = "expired"
)

func (e VerifyOneTimeTokenStatus) ToPointer() *VerifyOneTimeTokenStatus {
	return &e
}
func (e *VerifyOneTimeTokenStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "consumed":
		fallthrough
	case "revoked":
		fallthrough
	case "expired":
		*e = VerifyOneTimeTokenStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerifyOneTimeTokenStatus: %v", v)
	}
}

// VerifyOneTimeTokenResponseBody - The one-time token was verified successfully.
type VerifyOneTimeTokenResponseBody struct {
	TenantID  string                    `json:"tenantId"`
	ID        string                    `json:"id"`
	Email     string                    `json:"email"`
	Token     string                    `json:"token"`
	Context   VerifyOneTimeTokenContext `json:"context"`
	Status    VerifyOneTimeTokenStatus  `json:"status"`
	CreatedAt float64                   `json:"createdAt"`
	ExpiresAt float64                   `json:"expiresAt"`
}

func (o *VerifyOneTimeTokenResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *VerifyOneTimeTokenResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *VerifyOneTimeTokenResponseBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *VerifyOneTimeTokenResponseBody) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *VerifyOneTimeTokenResponseBody) GetContext() VerifyOneTimeTokenContext {
	if o == nil {
		return VerifyOneTimeTokenContext{}
	}
	return o.Context
}

func (o *VerifyOneTimeTokenResponseBody) GetStatus() VerifyOneTimeTokenStatus {
	if o == nil {
		return VerifyOneTimeTokenStatus("")
	}
	return o.Status
}

func (o *VerifyOneTimeTokenResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *VerifyOneTimeTokenResponseBody) GetExpiresAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresAt
}

type VerifyOneTimeTokenResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The one-time token was verified successfully.
	Object *VerifyOneTimeTokenResponseBody
}

func (o *VerifyOneTimeTokenResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *VerifyOneTimeTokenResponse) GetObject() *VerifyOneTimeTokenResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
