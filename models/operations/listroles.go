// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/bllli/logto-management-api/internal/utils"
	"github.com/bllli/logto-management-api/models/components"
)

// QueryParamType - Filter by role type.
type QueryParamType string

const (
	QueryParamTypeUser             QueryParamType = "User"
	QueryParamTypeMachineToMachine QueryParamType = "MachineToMachine"
)

func (e QueryParamType) ToPointer() *QueryParamType {
	return &e
}
func (e *QueryParamType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "MachineToMachine":
		*e = QueryParamType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamType: %v", v)
	}
}

type ListRolesRequest struct {
	// Exclude roles assigned to a user.
	ExcludeUserID *string `queryParam:"style=form,explode=true,name=excludeUserId"`
	// Exclude roles assigned to an application.
	ExcludeApplicationID *string `queryParam:"style=form,explode=true,name=excludeApplicationId"`
	// Filter by role type.
	Type *QueryParamType `queryParam:"style=form,explode=true,name=type"`
	// Page number (starts from 1).
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Entries per page.
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page_size"`
	// Search query parameters.
	SearchParams map[string]string `queryParam:"style=form,explode=true,name=search_params"`
}

func (l ListRolesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListRolesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListRolesRequest) GetExcludeUserID() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeUserID
}

func (o *ListRolesRequest) GetExcludeApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeApplicationID
}

func (o *ListRolesRequest) GetType() *QueryParamType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListRolesRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListRolesRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListRolesRequest) GetSearchParams() map[string]string {
	if o == nil {
		return nil
	}
	return o.SearchParams
}

type ListRolesTypeResponse string

const (
	ListRolesTypeResponseUser             ListRolesTypeResponse = "User"
	ListRolesTypeResponseMachineToMachine ListRolesTypeResponse = "MachineToMachine"
)

func (e ListRolesTypeResponse) ToPointer() *ListRolesTypeResponse {
	return &e
}
func (e *ListRolesTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "MachineToMachine":
		*e = ListRolesTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRolesTypeResponse: %v", v)
	}
}

type ListRolesFeaturedUser struct {
	ID     string  `json:"id"`
	Avatar *string `json:"avatar"`
	Name   *string `json:"name"`
}

func (o *ListRolesFeaturedUser) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListRolesFeaturedUser) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *ListRolesFeaturedUser) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type FeaturedApplicationType string

const (
	FeaturedApplicationTypeNative           FeaturedApplicationType = "Native"
	FeaturedApplicationTypeSpa              FeaturedApplicationType = "SPA"
	FeaturedApplicationTypeTraditional      FeaturedApplicationType = "Traditional"
	FeaturedApplicationTypeMachineToMachine FeaturedApplicationType = "MachineToMachine"
	FeaturedApplicationTypeProtected        FeaturedApplicationType = "Protected"
	FeaturedApplicationTypeSaml             FeaturedApplicationType = "SAML"
)

func (e FeaturedApplicationType) ToPointer() *FeaturedApplicationType {
	return &e
}
func (e *FeaturedApplicationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Native":
		fallthrough
	case "SPA":
		fallthrough
	case "Traditional":
		fallthrough
	case "MachineToMachine":
		fallthrough
	case "Protected":
		fallthrough
	case "SAML":
		*e = FeaturedApplicationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeaturedApplicationType: %v", v)
	}
}

type FeaturedApplication struct {
	ID   string                  `json:"id"`
	Name string                  `json:"name"`
	Type FeaturedApplicationType `json:"type"`
}

func (o *FeaturedApplication) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *FeaturedApplication) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *FeaturedApplication) GetType() FeaturedApplicationType {
	if o == nil {
		return FeaturedApplicationType("")
	}
	return o.Type
}

type ListRolesResponseBody struct {
	TenantID             string                  `json:"tenantId"`
	ID                   string                  `json:"id"`
	Name                 string                  `json:"name"`
	Description          string                  `json:"description"`
	Type                 ListRolesTypeResponse   `json:"type"`
	IsDefault            bool                    `json:"isDefault"`
	UsersCount           float64                 `json:"usersCount"`
	FeaturedUsers        []ListRolesFeaturedUser `json:"featuredUsers"`
	ApplicationsCount    float64                 `json:"applicationsCount"`
	FeaturedApplications []FeaturedApplication   `json:"featuredApplications"`
}

func (o *ListRolesResponseBody) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

func (o *ListRolesResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListRolesResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListRolesResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListRolesResponseBody) GetType() ListRolesTypeResponse {
	if o == nil {
		return ListRolesTypeResponse("")
	}
	return o.Type
}

func (o *ListRolesResponseBody) GetIsDefault() bool {
	if o == nil {
		return false
	}
	return o.IsDefault
}

func (o *ListRolesResponseBody) GetUsersCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.UsersCount
}

func (o *ListRolesResponseBody) GetFeaturedUsers() []ListRolesFeaturedUser {
	if o == nil {
		return []ListRolesFeaturedUser{}
	}
	return o.FeaturedUsers
}

func (o *ListRolesResponseBody) GetApplicationsCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ApplicationsCount
}

func (o *ListRolesResponseBody) GetFeaturedApplications() []FeaturedApplication {
	if o == nil {
		return []FeaturedApplication{}
	}
	return o.FeaturedApplications
}

type ListRolesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// An array of roles matching the filters.
	ResponseBodies []ListRolesResponseBody
}

func (o *ListRolesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListRolesResponse) GetResponseBodies() []ListRolesResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
